<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Gojek Tech]]></title><description><![CDATA[Limitless product ambition]]></description><link>http://gojek.io//</link><image><url>http://gojek.io//favicon.png</url><title>Gojek Tech</title><link>http://gojek.io//</link></image><generator>Ghost 2.9</generator><lastBuildDate>Wed, 03 Jun 2020 19:17:04 GMT</lastBuildDate><atom:link href="http://gojek.io//rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Global technology and payments companies invest in Gojek]]></title><description><![CDATA[The investment will boost Southeast Asia’s digital economy and accelerate digital payments adoption among small businesses.]]></description><link>https://gojek-ghost.zysk.in/global-technology-and-payments-companies-invest-in-gojek-2/</link><guid isPermaLink="false">Ghost__Post__5ed7600d7aa22c4066f83fc2</guid><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Wed, 03 Jun 2020 08:39:09 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/06/FBPaypal-02.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/06/FBPaypal-02.jpg" alt="Global technology and payments companies invest in Gojek"/><p>Gojek announced today that Facebook and PayPal have joined Google, Tencent and others as investors in its current fundraise. This new investment will support Gojek’s mission to boost Southeast Asia’s digital economy, with a focus on supporting payments and financial services in the region.</p><p>With digital payments adoption primed to accelerate exponentially, the resources from some of the world’s leading global tech businesses will be combined with the local focus and technology of Gojek.</p><p><strong>This benefits millions of businesses and people across Indonesia and other parts of Southeast Asia.</strong></p><p>Gojek’s payments business, GoPay, has long been focused on increasing access to the digital economy among micro, small and medium enterprises (MSMEs), the majority of which continue to rely on cash to operate, due to the region’s large unbanked population. The latest influx of funding will support more of these businesses as they seek to digitise further, from micro-merchants selling wares on the street side, up to large businesses looking to strengthen their digital payment infrastructure.</p><p>Since launching its app in 2015, Gojek has digitised hundreds of thousands of merchants on its platform, providing them with access to more than 170 million users across Southeast Asia. Its payments business processes billions of transactions each year and owns the largest e-wallet in Indonesia. A large part of this is driven by GoFood, the largest food delivery service in Indonesia, as well as the expansion of GoPay into other sectors both within and outside the Gojek ecosystem.</p><p><strong><strong>Gojek Co-CEO, Andre Soelistyo</strong></strong>, said:</p><blockquote><em><em>This is great validation that the world’s most innovative tech companies recognise the positive impact Gojek is making in Indonesia and the whole of Southeast Asia. By working together, we have the opportunity to achieve something truly unique as we aim to help more businesses to digitise and ensure that many millions more consumers are enjoying the benefits that the digital economy can bring.</em></em></blockquote><blockquote><em><em>The COVID-19 pandemic and its associated issues have served as a tough reminder that if our economies are to be more resilient, they must be underpinned by digital infrastructure that diversifies the ways in which people can live and transact. We see our role as a convener of global tech expertise, facilitating collaboration that will ultimately lead to a better future for everyone in our region.</em></em></blockquote><p><strong><strong>Gojek Co-CEO, Kevin Aluwi</strong></strong>, added:</p><blockquote><em><em>Since we were founded, the story of Gojek’s growth has been inexorably linked with the growth of the micro-entrepreneurs and small businesses on our platform and this will always be the case. With some of the world’s best technology companies as partners, we are confident that we can continue to deliver unique world-class products and services for the various players in our ecosystem.</em></em></blockquote><p>Facebook’s investment is the first it has made in an Indonesia-based business as it seeks to create new opportunities for businesses in the country, including through its ubiquitous Whatsapp service.</p><p><strong><strong>Matt Idema, Chief Operating Officer at WhatsApp</strong></strong>, said: “Gojek, WhatsApp and Facebook are indispensable services in Indonesia. Working together we can help bring millions of small businesses and the customers they serve into the largest digital economy in Southeast Asia.”</p><p>As part of its commercial agreement, PayPal’s payment capabilities will be integrated into Gojek’s services and the two companies will also collaborate to allow customers of GoPay, Gojek’s digital wallet, to gain access to PayPal’s network of more than 25 million merchants around the world.</p><p><strong><strong>Farhad Maleki, Head of Corporate Development and Ventures for APAC at PayPal</strong></strong>, said: “Southeast Asia is at an inflection point in digital adoption that creates new opportunities to deliver financial services to previously unbanked merchants and consumers. We could not be more excited about entering into this strategic relationship with Gojek to expand access and provide new experiences for our collective customers in this dynamic market and around the world.”</p><p>Google and Tencent are longstanding investors in Gojek. Both companies have collaborated on multiple Gojek projects since their first investments in 2018.</p><p><strong><strong>Caesar Sengupta, VP, Payments and Next Billion Users, Google</strong></strong>, said: “Gojek’s innovation and technologies have had an incredible impact in making life more convenient for Indonesians across the country and in bringing its MSMEs online. We’re pleased to continue to invest in and enable Gojek in its journey. Gojek’s success points to the strength of the region’s internet economy and the innovation in its start-up ecosystem.”</p><p><strong><strong>Jeffrey Li, Vice President of Tencent Holdings and Managing Partner of Tencent Investment</strong></strong>, said, “Gojek is effectively promoting digitization and financially enabling small businesses. We’re glad to strengthen our partnership through the increased investment and we look forward to further collaboration with Gojek.”</p><h3 id="about-gojek-group">About Gojek Group</h3><p>Gojek is Southeast Asia’s leading technology group and a pioneer of the integrated Super App and ecosystem model. Gojek is founded on the principle of using technology to remove life’s daily frictions by connecting consumers to the best providers of goods and services in the market.</p><p>The company was first established in 2010 focusing on courier and motorcycle ride-hailing services, before launching the app in January 2015 in Indonesia. Since then, Gojek has grown to become the leading Super App in Southeast Asia, providing access to a wide range of services from transportation and digital payments, to food delivery, logistics, and many other on-demand services.</p><p>Gojek now operates across 207 cities in five Southeast Asian countries. As of end 2019, Gojek’s application and its ecosystem have been downloaded 170 million times by Gojek’s users across Southeast Asia. Based on the App Annie ‘2020 State of Mobile Report’, Gojek has become the most widely used on-demand application by Indonesians in 2019.</p><p>As a <strong><strong>Super App</strong></strong>, Gojek is dedicated to solving daily challenges faced by consumers while also improving the quality of life for millions of people throughout Southeast Asia, especially those in the informal sector and micro, small, and medium enterprises (MSMEs).</p><p>The Gojek app is available for iOS and Android.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/06/Blog-Separator.png" class="kg-image" alt="Global technology and payments companies invest in Gojek"/></figure><p><strong><strong>For media queries, contact apoorva.babu@gojek.com.</strong></strong></p><p>Read more stories on Gojek’s Engineering, Design, Product and Culture <a href="https://blog.gojekengineering.com/" rel="noopener">here</a>.</p>]]></content:encoded></item><item><title><![CDATA[Tips for Building Smooth Live Tracking]]></title><description><![CDATA[How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.]]></description><link>https://gojek-ghost.zysk.in/tips-for-building-smooth-live-tracking/</link><guid isPermaLink="false">Ghost__Post__5ec94e8c7aa22c4066f83db2</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 22 May 2020 03:30:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg" alt="Tips for Building Smooth Live Tracking"/><p><em><strong>By Divya Vikash</strong></em></p><p>It’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s transport products) to go to your office. Voila!! You got a driver. That was fast. You can see your driver’s location on the map, and the estimated time they would take to come to you.</p><p><em><em>But hang on… It seems like the map is a bit messed up.</em></em></p><p>The driver location on the map goes back and forth at unreal speed, and even flies over buildings. Starring in an action movie is not exactly how you want to start your week. 😮</p><p>While our driver-partners sure are superman in their own unique way, they certainly can’t drive over buildings. This is clearly not how your driver is actually driving on the road. But then why is the map showing all this?</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking2.gif" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><p>Well, there are multiple factors that can lead to a bad experience like that. Some within our control, some not so much (as of now). We decided to go back to the drawing board and figure out the issues that are in our control and fix them for good. And that is how we built a world-class (arguably 😬) live-tracking experience.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/image.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><p>But what is live-tracking, you would ask?</p><p>Live tracking is a complete map experience. It doesn’t involve anything other than what you see on maps after you get a driver.</p><p>So, what do you see on maps?</p><ol><li>Driver's location depicted by a green marker.</li><li>The routes.</li><li>The change in driver marker as the driver moves closer to your pickup/your destination.</li><li>The change in route as the driver moves.</li></ol><p>And that’s it. That’s all live-tracking is.</p><blockquote><em><em>But that sounds quite simple. Right? Use some routing APIs and plot the markers and routes.</em></em></blockquote><p>Well, yes, it sounded easy to us when we first heard about it too. The real experience threw us a few curveballs. Let’s go through how we create a live-tracking experience.</p><h3 id="input">Input</h3><p>Let’s look at the input data that we need to create a live-tracking animation:</p><h3 id="driver-location-and-routes">Driver Location and Routes</h3><p>Our driver apps have an in-built mechanism to upload driver location to our backend at regular intervals. This is how we are able to find a driver close to your location when you order one of our services. The primary input to live-tracking is this driver location.</p><p>In our driver app, we get this location using Android’s <code>FusedLocationProvider</code> API which automatically uses the best location provider(GPS, Wifi, etc). The driver location is ingested into our backend system via a continuous stream. Routes are generated by our internal routing engine and provided to the customer app.</p><h3 id="input-source">Input Source</h3><p>As you would have guessed, this data is provided via API calls initiated by the our Super App to the routing engine.</p><p>Making the API call just once won’t be sufficient. Right? The app needs to be informed every time the driver’s location has changed. So, the customer app polls this API every few seconds to get this data.</p><p>Now, we have a continuous stream of data flowing to our app which has all the information that we need to show the vehicle animation on the road.</p><h3 id="terminology">Terminology</h3><p>Before moving forward, we should get acquainted with a few terminologies that we would use quite frequently in this post.</p><ol><li><strong><strong>Route</strong></strong>: The entire list of latitude-longitudes between the driver location to the pickup/destination location.</li><li><strong><strong>Segment</strong></strong>: A segment is the smallest unit of a route. It is a straight line from one position in the routes list to the very next position in the routes list.</li></ol><p>A route of length n has n-1 segments. Confused? Yeah, let’s take an example.</p><p>A <strong><strong>Route</strong></strong> looks like this:</p><p>[{-6<code>2441198, 106.8032959},<br>{-6.2440766, 106.80328}, <br>{-6.2439977, 106.8033275},<br>{-6.2434893, 106.8029214},<br>{-6.2433926, 106.8030539},<br>{-6.2436018, 106.803222}]</br></br></br></br></br></code></p><p>There are 5 <strong><strong>Segments</strong></strong> in this route.</p><p><code>Segment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}</code><br><code>Segment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}</code><br><code>Segment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}</code><br><code>Segment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}</code><br><code>Segment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}</code></br></br></br></br></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/image-1.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><h3 id="the-initial-setup">The initial setup</h3><p>When the user lands on the live tracking screen, the app immediately makes a call to our internal API to get the driver location and route. Once we get this data, we plot it on the map using the standard GoogleMap methods. <code><em><em>googleMap.addMarker()</em></em></code><em><em>, </em></em><code><em><em>googleMap.addPolyline()</em></em></code> etc.</p><p>Sometimes, we don’t have the routing information available immediately, so we just show the driver marker. We also store this data locally in an in-memory cache as we would need it later to do some comparisons.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/436/1*k9IpgQ4ss-bhKHBY5ETUgg.gif" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><p>So, the customer is able to see the markers and routes on the map now. So far so good.</p><h3 id="the-subsequent-updates">The subsequent updates</h3><p>As I mentioned earlier, we need to change the position of driver marker and route as the driver moves. The customer app makes a call to the same internal API every few seconds. After the first response, we don’t move any markers or routes on the map until the next response succeeds.</p><p>In the next response, we again get the same data points i.e the route and driver location but with different values, of course, <strong><strong>if the driver has moved</strong></strong>. The next set of data that we get can have the following characteristics:</p><ol><li>Route and driver location don’t change</li><li>Route changes</li><li>Route doesn’t change BUT driver location does</li></ol><p>Let’s discuss these cases one by one.</p><h3 id="1-route-and-driver-location-don-t-change">1: Route and driver location don’t change</h3><p>If nothing has changed, we don’t need to do anything. Probably our driver partner is stuck in traffic. 😞</p><h3 id="2-route-changes">2: Route changes</h3><p>This can happen either when:</p><ol><li>The app was not showing any route to the user before i.e the first response didn’t have the route.</li><li>The app was showing a route that is different from the newly received route. This usually happens in cases where the driver starts following a different route from the one they were following before. This can also happen due to road closures or simply because our driver-partner initially followed a wrong route by mistake 😅.</li></ol><p>In either of these cases, we simply ignore the old driver marker and routes which were shown and plot the new marker and routes.</p><h3 id="3-route-doesn-t-change-but-driver-location-does">3: Route doesn’t change BUT driver location does</h3><p>The app was showing the same route to the user before i.e the old response had the same route as the new response. This means that the driver is following the original route that we determined.</p><p>In this case, we need to animate the driver marker on the map from the old location to the new location along the same route. This is the most common scenario, which can again be broken down further into multiple scenarios (yeah, I’m all about breaking things down 🤐).</p><h3 id="3-1-does-the-new-location-lie-on-the-route">3.1: Does the new location lie on the route?</h3><p>To animate the driver marker from it’s current position to the new location, we first need to know whether the new location lies on the route or not.</p><p>Yeah, we can’t be sure that the driver location that we have received would always lie on the route/road because of various GPS inaccuracy issues.</p><p>We iterate through every segment in the route to find the segment which has the new location. For every segment, we use the Geometry/PolyUtil library to determine whether the driver location lies on that route.</p><p>We also specify a tolerance of a few meters to account for GPS inaccuracy. So, if the newly received location is within a radius of <strong><strong>X meters</strong></strong> near a segment, this method will return true.</p><p><strong><strong>Android</strong></strong></p><p><code>boolean isLocationOnPath(LatLng point,List&lt;LatLng&gt; polyline,boolean geodesic, double tolerance)</code></p><p><strong><strong>iOS</strong></strong></p><p><code>BOOL <a href="https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d" rel="noopener">GMSGeometryIsLocationOnPathToleranc</a>e(CLLocationCoordinate2D point,<a href="https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path" rel="noopener">GMSPath</a> * path,BOOL geodesic,CLLocationDistance tolerance)</code></p><p>If the location doesn’t lie on any of the segments in the route, we are sad and so, we don’t animate anything. But if it does, we go forward with the next step which is….</p><h3 id="3-2-vehicle-projection-on-route">3.2: Vehicle projection on route</h3><p>When we receive a new location, the start location is simply the position that the driver marker is already at. No logic required there to calculate that.</p><p>The end location should simply be the new location that we received. Well, in an ideal world, it <strong><strong>should be</strong></strong> but we live so far away from an ideal world 😞.</p><p>As we mentioned earlier, the raw driver location that we get from the driver app via GPS/other providers mostly doesn’t lie on the road. So, we have to find a projection of the driver location on the road/route.</p><p>If you have been reading carefully, you might wonder why we can’t just use the <em><em>isLocationOnPath()</em></em> method above 🤔.</p><p>Well, if you had been reading <em><em>more</em></em> carefully, you might have noticed that this method returns a boolean explaining whether the location is on/near the route or not 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps Utils stumbled upon this by chance, please add that method, good sir).</p><p>So, we had to revise some maths. Yeah, folks, learn your maths well. You never know when a situation like this might arise 🤷‍♂.</p><p><em><em>“Find the projection of point (x,y) on the line y = mx + c”.</em></em> Does that ring a bell? Drawing a perpendicular line towards the segment and calculating the location of where the line and route intersect can give us the projected location. Right?</p><p>Well, the above approach works for 2-D systems but earth is not a 2-D space. We need a way to project the spherical surface of the earth onto a rectangle 2-D space. There are several ways to do that. All of them have certain drawbacks. We might lose information like direction or the shape of landmasses/countries or the area information.</p><p><strong><strong>Mercator Projection</strong></strong></p><p>Mercator projection is one of the available methods to project the spherical map of earth onto a rectangle to make usable maps. Most of the mapping tools used for navigation use this projection.</p><p>The key feature of Mercator projection is that it retains the direction information. That means if point A is 30deg east from north of point B on the globe, it will be in the same direction on its Mercator projection. Or say there is a turn of 90deg in some lane, it will be 90deg on Mercator projection as well. That is the reason it works really well for navigation purposes.</p><p><strong><strong>How to use a Mercator projection?</strong></strong></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/image-4.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/image-5.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><ol><li>Every point on the earth is projected on a cylinder exactly like point A which has point A’ on the cylinder.</li><li>Once all the required points/routes are projected on this cylinder. It is unrolled, and we obtain a rectangle like the one shown above.</li><li>All the planar geometry can be applied with a very little margin of error on this 2D projected map.</li><li>After processing all the points/routes they can be converted back to latitude and longitude on the globe.</li></ol><p>So, now we have the projected driver location on the route which we will fondly call <code>snapped point</code> going forward.</p><h3 id="3-3-end-to-end-animation">3.3: End-to-End animation</h3><p>The new driver location that we receive can be present in <strong><strong>any</strong></strong> segment. It may be that it is in the same segment or it may be that it is on the next segment or on the next one or it may be that it is on the last segment.</p><p>But for linear animation, we need a start point and an end point. The start point is the current position of the driver marker. We already got the snapped endpoint in the earlier section. But we can’t just animate from start to end <strong><strong>at once</strong></strong> as that would seem like the car is flying and ignoring U-turns, routes, etc. So, how do we prevent it from flying?</p><p>What do you do when you can’t fly to a place? You follow the road. Right? That’s what we have to do as well. Make the driver marker follow the route/road. We need to animate along each segment in the route until we reach the segment which has the driver position that we received.</p><p>There are again two cases here 😜:</p><h3 id="3-3-1-the-new-driver-location-is-on-the-same-segment">3.3.1: The new driver location is on the same segment</h3><p>In this case, we can directly animate from the current position of driver marker to the driver location that we received since this is just a straight line animation.</p><p>A segment is always a straight line. We will discuss more on how to do the animation b/w 2 points in a later section.</p><h3 id="3-3-2-the-new-driver-location-is-on-a-different-segment">3.3.2: The new driver location is on a different segment</h3><p>In this case, we need to animate to that segment along the route. We have to animate along each of the segments in between to reach the final segment.</p><p>For animation along the first segment, we set the endpoint of the animation to the beginning of the next segment in the route. We animate to the end of the first segment.</p><p>The next segment may also not have the driver location that we received. After a driver has traversed the first segment, we move the end location of the animation to the end of the next segment, and so on and so forth till we reach the last segment. Confusing, ya? Let’s see an example.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/Screenshot-2020-05-23-at-10.06.55-PM.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"><figcaption>So much zig-zag (huh!!)</figcaption></img></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received.</p><p>In the 1st animation, we move the driver marker from A to the end of the first segment (B).</p><p>In the 2nd animation, the driver marker is moved through the entire length of the 2nd segment.</p><p>And so on and so forth till we reach the segment which has the newly received snapped location (X).</p><h2 id="animation-in-a-segment">Animation in a segment</h2><p>We now know how the overall animation would look like. But we also need to configure how the smallest unit of the animation i.e animation in a segment should happen.</p><p><strong><strong>Start point and End point</strong></strong>: For case #1 above, the animation in a segment will happen just once. For case #2 above, this animation in a segment will happen multiple times. Start and endpoints will be determined before beginning each of the animations.</p><p><strong><strong>Bearing b/w these two points</strong></strong>: Bearing can be calculated using another one of Geometry/Maps Utils method.</p><p><code>SphericalUtil.computeHeading(startPosition, endPosition)</code></p><p><strong><strong>Duration of animation: </strong></strong>Calculating duration is a bit tricky. And the duration is the most important thing in any animation. Sometimes the difference b/w a smooth and a choppy animation is caused by the duration. It was very important that we got it right. So, let’s take a break and see how to calculate the duration.</p><h2 id="what-is-duration">What is Duration?</h2><p>It’s the amount of time for which the animation should happen. But you already know that. Going back to middle school maths (yeah, that far), how do you calculate time? Time is nothing but distance divided by speed. Correct? Calculating straight line distance b/w the two points we want to animate through is pretty easy.</p><p><code>SphericalUtil.computeDistanceBetween(startLocation, endLocation)</code></p><p>Cool, cool. But what about speed? How should we calculate speed?</p><h2 id="speed-calculation">Speed calculation</h2><p><code>FusedLocationProvider</code> API in the driver app does provide the speed of the vehicle but it’s highly unreliable. So, we have to employ some tricks to calculate the speed.</p><p>Speed is distance divided by time. Distance again!! Seems like we are running in circles 😵. Not exactly. Here the distance is not the straight line distance b/w the two points that we have to animate through.</p><p>This is the total distance along the route <strong><strong>from</strong></strong> the segment that the old driver location is currently located at, <strong><strong>to</strong></strong> the segment where the new driver location is. Yeah, that statement is a bit confusing. So, let’s take an example.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/image-8.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received. To calculate the distance, we do the obvious:</p><p><code>Total distance = d1 + d2 + d3 + d4</code></p><p>Now, we have the distance. We need the time interval.</p><p>The <code>FusedLocationProvider</code> API in the driver app does provide us the timestamp at which a location was updated. And this information is passed to our backend and subsequently to the customer app.</p><p>We calculate the time difference b/w the old driver location and the new driver location using their timestamps. Wait, how do we know the old driver location? As we had mentioned earlier, we cache the last available driver location and route in an in-memory cache.</p><p>Total route distance divided by time and now we have the speed for the entire duration. Linear distance divided by this speed and now we have the <strong><strong>duration</strong></strong>for a single animation in a segment. Cool, so let’s get back to the point where we broke off 😅.</p><h1 id="update-the-animation">Update the animation</h1><p>With all the above information, we start the animation. But wait? Aren’t we missing something? We did start an animation b/w two points but how will our animator know <strong><strong>how</strong></strong> to animate?</p><p>Animation is just a bunch of frame updates that happen every fast. How do we update the marker position, the starting point of the route, the rotation in each and every frame of the animation? Well, the mobile/web framework allows us to do something every time the frame is updated.</p><p>But what is this something that we should do?</p><h2 id="1-update-marker-s-position">1. Update marker’s position</h2><p>For markers, we need to update their position. Once we have the position, we can simply update the marker position using the <code>marker.setPosition()</code>. To find the position during each frame of the animation, we need the percentage of animation that has elapsed.</p><p>We can get the percentage from the Animation framework. Using this percentage and the start and end position, we calculate the intermediate position/s like this:</p><p><code>SphericalUtil.interpolate(startPosition, endPosition, fraction)</code></p><h2 id="2-update-routes">2. Update Routes</h2><p>Routes need to be aligned with the marker’s movement. So, we update the routes as well using the values above and updating the polyline points of that route using the <code>polyline.setPoints()</code><em><em>.</em></em></p><p>And that’s a wrap. The result that we get is a very smooth, measured movement of the vehicle along the road.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/600/1*EtoKV1x7ufBgxOPdcsvnJg.gif" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><p>There are a few more tips/tricks that we employ to ensure that there are no abrupt changes in the animation.</p><p>But that’s for next time. 😃</p><h3 id="what-s-next">What’s next?</h3><p>We still need to go a long way to meet the standards that we have set for ourselves. Currently, this new experience is only rolled out to GoRide, GoCar, and GoBluebird. We are working on bringing the same experience to other services like GoFood, GoSend, and GoShop. Stay tuned for more!</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/image-9.png" class="kg-image" alt="Tips for Building Smooth Live Tracking"/></figure><p>Want stories like this one beamed straight to your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p><p>Thanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij Choudhary.</p>]]></content:encoded></item><item><title><![CDATA[Why We Swear by the RCA]]></title><description><![CDATA[An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.]]></description><link>https://gojek-ghost.zysk.in/why-we-swear-by-the-rca/</link><guid isPermaLink="false">Ghost__Post__5eb1066a5524cd001e7392a4</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 12 May 2020 06:23:00 GMT</pubDate><media:content url="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_nOcToFzqvdWlHmOQ59v0sw.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_nOcToFzqvdWlHmOQ59v0sw.jpg" alt="Why We Swear by the RCA"/><p>When Gojek was still finding its feet, Fridays used to be a nightmare.</p><p>Jakarta, being the capital of the fourth most-populous country in the world, is home to many people who work in the city and travel to their hometowns on weekends. Many of them rely on Gojek as their preferred first mile connectivity option — resulting in a traffic spike on our systems on Friday evening. In those early days, this often triggered a system outage.</p><p><em><em>Every outage erodes the hard earned trust we build with our customers and driver partners.</em></em></p><h3 id="enter-the-rca">Enter the RCA</h3><p>We knew we couldn’t fix the failures overnight, but we could learn from them. After all, so many of these mistakes were common and easily overlooked. So we decided to embrace the ‘Root Cause Analysis’ (RCA). If something related to Gojek’s Engineering division failed, the person(s) who attended the support call and had most context of what happened would prepare a document. This document would contain a timeline, detail what went wrong, suggest corrective measures, and compile lessons learned.</p><p>This process ensured everyone across the organisation had visibility into what happened. As a result, even unaffected teams cited in the RCA could analyse their systems to ensure the same problem would not happen to them. More importantly, it provided a degree of accountability — and that’s important when you have 20+ products.</p><p>A post-mortem, and a prevention.</p><p>This post details what happens when a system failure happens at Gojek, and how it makes it way into an RCA.</p><h3 id="1-the-what">1. The What</h3><p>When something fails, it is important to understand the origin of the problem. Every team in Gojek sets up alerts which monitor the state of their systems. If a state change in the system causes a deviation from expected behaviour, an alerting service called <code>pager duty</code> automatically dials the phones of the people responsible for that part of the system.</p><p><strong><strong>Here’s an example:</strong></strong></p><p>When a booking is created, we find a list of driver partners and send the order details to them, at which point they get a pop-up with trip details like estimated duration and approximate earnings. The idea is to give driver partners enough information to make the decision to accept the trip. But there was a problem.</p><h3 id="2-the-why">2. The Why</h3><p>One of the fields this prompt contains is a Booking ID, which is stored as an integer (which, in technical speak, has a limit of 32 bits). Unfortunately for us, the ID generated exceeded this limit.</p><p>Welcome to what we call Integer Overflow.</p><p>As a result of this, the driver app started crashing.</p><p><strong><strong><em><em>How bad can that be, you ask?</em></em></strong></strong></p><h3 id="3-the-fallout">3. The Fallout</h3><p>Drivers being unable to use the app means they can’t accept bookings. This means customers can’t book rides, send packages, get food, or use any service that depends on our driver partners.</p><p>As a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want to get all technical about it) plummeted. Pager duty is hit, and cell phones start ringing off their proverbial hooks.</p><p>With driver partners stuck with malfunctioning apps, multiple Gojek services start reporting errors. As customers try and figure out why the app is behaving this way, engineers scramble to do the same.</p><h3 id="4-the-response">4. The Response</h3><p>When the phones ring, the team whose alerts have been triggered immediately get to work figuring out what happened. If they identify the problem quickly and debug it, they notify other teams. The team then gets to work using information from the alerts and system dashboards to prepare an RCA.</p><p><strong><strong>This is, of course, the best case scenario.</strong></strong></p><p>If the concerned team cannot find a fix however, a war room is called.</p><p>The war room signifies a larger issue, and members of every available team drop what they’re doing and join the call. Sometimes, these are frantic Slack discussions and calls in the middle of the night. Other times, office boardrooms are blocked and everyone gathers to brainstorm collectively.</p><p><em><em>Devs, Team Leads, Product Managers, all hands on deck.</em></em></p><p>In a war room scenario, whoever has most context on the situation takes charge and delegates tasks as required. This central person also plays a key role in documenting the happenings in the war room — <strong><strong>how many people were present, which teams were represented, who was handling what, etc.</strong></strong> <strong><strong>All this information plays a key role in the RCA.</strong></strong> While this is going down, Driver and Customer Care centres are also notified, bracing for the inevitable flurry of complaints.</p><p>The fix may take the form of a few simple temporary hacks, or an hours long war room — but in the end, there is always a fix.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1129/1*UFUYfO3Gw9tnKCiE1y40-Q.jpeg" class="kg-image" alt="Why We Swear by the RCA"><figcaption>Words of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore</figcaption></img></figure><p><em><em>And a sense of camaraderie </em>💚</em></p><p>Once the dust settles, the investigation begins. The person who managed the war room generally authors a document analysing what went wrong, using all the info from the alerts, dashboards, and firsthand accounts of the responders present. Typically every stakeholder in the organisation gets an email the next day with details of what went wrong — the RCA.</p><h3 id="5-the-learnings">5. The Learnings</h3><p>“Collaborate With Compassion”</p><p>These three words mean a lot at Gojek, and our RCAs reflect that. When you open an RCA mail, there is rarely even a mention of specific people, except to acknowledge those who responded to the distress call and played a role in finding a fix. <strong><strong>Call out the ones who made the effort, never the ones responsible.</strong></strong></p><p>Most RCAs instead dwell on relevant, actionable information. Information that was being collected and monitored right from when the alert tripped:</p><p><em><em>The What: What was the problem?</em></em></p><p><em><em>The Why: Why did it happen?</em></em></p><p><em><em>The Fallout: Which services were affected, and for how long?</em></em></p><p><em><em>The Response: How was it fixed?</em></em></p><p><em><em>The Learnings: What can be done to avoid a repeat of this in future?</em></em></p><p>This simple process has helped us scale more safely and efficiently. It also allows for early identification of potential vulnerabilities in other systems. As you may have noticed, there is no mention of who was responsible, no finger pointing, no blame games. <em><em>Collaborate with compassion.</em></em></p><p>To get a better sense of how we write RCAs at Gojek, <a href="https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6" rel="noopener"><strong><strong>read a sample RCA</strong></strong></a>.</p><p>If you’d like to start a culture of RCAs as well, <a href="https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit" rel="noopener"><strong><strong>here’s our RCA template</strong></strong></a>, courtesy GoPay CTO <a href="https://twitter.com/rnjn" rel="noopener">Ranjan Sakalley</a>, who also occasionally drops invaluable insights in the ‘Learnings’ section. <strong><strong>😅</strong></strong><br/></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/480/1*2sosYEnk68lMaQTVjdZjWQ.jpeg" class="kg-image" alt="Why We Swear by the RCA"/></figure><p>RCAs have played an integral part in our journey to becoming a SuperApp. Investigating, analysing, and documenting problems in production help us build better, more scalable systems, and tackle new problems in a mature manner without fear of retribution.</p><p>The days of weekly production issues are now a thing of the past. While we won’t be so brash as to say we never have problems, embracing RCAs and a culture of compassionate collaboration have helped us get to where we are today. 🙌</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-3.png" class="kg-image" alt="Why We Swear by the RCA"/></figure><p>We’ll be writing about more interesting case studies on issues faced in production. Keep an eye on this blog, or <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">subscribe to our newsletter</a> for updates on our stories in a neat little email.</p>]]></content:encoded></item><item><title><![CDATA[OK Google, Meet Gojek]]></title><description><![CDATA[We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.]]></description><link>https://gojek-ghost.zysk.in/ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process/</link><guid isPermaLink="false">Ghost__Post__5eaf9f2234df85001e15f42d</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 04 May 2020 05:03:07 GMT</pubDate><media:content url="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_QaQg1VnVWuhAebytXO-gKg.jpg" medium="image"/><content:encoded><![CDATA[<h3 id="we-added-gojek-s-ride-hailing-and-food-ordering-functions-to-google-assistant-here-s-what-we-learned-in-the-process-">We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.</h3><img src="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_QaQg1VnVWuhAebytXO-gKg.jpg" alt="OK Google, Meet Gojek"/><p><strong><strong><em>By Vikas Bajpayee and Lokesh Kalal</em></strong></strong></p><p>Our aim behind building a Super App was to help our users get rid of the daily frictions in their lives. But the journey doesn’t stop there. Even after building all these convenient products, we still try and reduce frictions that may be encountered even within our app — such as booking a ride or ordering food.</p><p>So we thought, why don’t we integrate with Google Assistant, and let our users communicate with our products in a new way?</p><p>In this post, we explain how we integrated our food and transport products with the Google Assistant.</p><h1 id="the-why">The why</h1><p>We’ve already addressed one part of the <em><em>why — </em></em>convenience. The other is user re-engagement. According to <a href="https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&amp;utm_medium=twitter.com&amp;utm_source=social&amp;utm_campaign=buffer" rel="noopener">this survey</a> conducted by Silicon Valley researcher Andrew Chen 77% of users stop using an app three days after they install it. Within a month, that number goes up to 90%. ?</p><h1 id="the-how">The how</h1><p>To help integrate Android apps with the Google Assistant, Google launched App Actions:</p><h2 id="what-are-app-actions">What are app actions?</h2><p>App Actions are a new way to make your android app content available in places like Google Search, Google Assistant etc. From a user’s perspective, App Actions behave like shortcuts to parts of your Android app. When users invoke an App Action, the Assistant either launches a screen in the Android app that the user has already installed or shows an embedded visual card (Android Slice) that users can interact with.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/260/1*w4jk-CTME9amkb5dsIQDzw.gif" class="kg-image" alt="OK Google, Meet Gojek"/></figure><p>App actions provide a faster way for users to access Android apps. It can be achieved in two ways:- either user can be directed to a specific activity(screen) using a deep link or user may see relevant content on the Assistant itself called Slices.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/260/1*KPBLtVMjiHBOPEJ53E9F8A.gif" class="kg-image" alt="OK Google, Meet Gojek"/></figure><p>More info on this can be found here: <a href="https://developers.google.com/assistant/app/overview" rel="noopener">https://developers.google.com/assistant/app/overview</a></p><h2 id="what-are-slices"><strong>What are Slices?</strong></h2><p>Slices are super-powered app actions. They provide a way to interact with apps without moving away from Assistant by showing a small piece of UI within Assistant. Slices are UI templates that can display rich, dynamic, and interactive content from the app in Google Assistant.</p><p><em><em>Slices can help users perform tasks faster by enabling engagement outside of the fullscreen app experience.</em></em></p><p>You can build Slices as enhancements to App Actions.</p><p>Here’s an example:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1080/1*EFF30b3185UtwKYjx0VP1A.jpeg" class="kg-image" alt="OK Google, Meet Gojek"/></figure><p>We choose to use slices to show food order status, as the order status will have limited information (eg. Driver is on the way to Restaurant, with his location on Map ) which can be easily shown in a small piece of UI segment.</p><p>In fact, this functionality was recently demoed on stage at a Google event in Indonesia. You can check it out below:</p><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0u20Iu4m2Co%3Fstart%3D5805%26feature%3Doembed%26start%3D5805&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0u20Iu4m2Co&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0u20Iu4m2Co%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" allowfullscreen="" frameborder="0" height="480" width="854" title="#Google4ID 2019" class="s t u iu ai" scrolling="auto" style="box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 382.188px;"/><figcaption>App Actions Demo at #Google4ID 2019</figcaption></figure><h1 id="how-does-it-work"><strong>How does it work?</strong></h1><p>Whenever a user says or types something in Assistant, assistant parses the query. If the query matches the<a href="https://developers.google.com/assistant/app/reference/built-in-intents" rel="noopener"> built-in intent</a> grammar then Google Assistant extracts the query parameter in<a href="https://schema.org/" rel="noopener"> schema.org</a> and generates a deep link URL using the mapping we provide in an actions.xml file.</p><p>Google then attaches those extracted parameters to the deep link URL and creates a final deep link which allows a user to launch specific content or screens in the app.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1490/0*jUlpzwbXbFIgGy7s" class="kg-image" alt="OK Google, Meet Gojek"/></figure><p>Let’s dig a little deeper:</p><p>Google applies Machine Learning and Artificial Intelligence (Natural Language Processing) to understand all the sentences we type in Assistant.</p><p>While users can type anything they want in Assistant and the system gets better at interpreting them over time, but there are some sentences for specific intent that are fixed by Google. More info <a href="https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation" rel="noopener">here</a>.</p><h1 id="how-did-we-integrate-our-services-with-assistant"><strong>How did we integrate our services with Assistant?</strong></h1><p>The core of integrating Gojek with Assistant involved creating actions on Google Assistant with actions.xml file.</p><p>Let’s explore how to do this:</p><p>1. Create <strong><strong>actions.xml</strong></strong> file in your XML folder. This contains all the actions with built-in intents which define what actions our app can support in the Assistant. Each action contains<a href="https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation" rel="noopener"> built-in intents</a> supported by Google as a &lt;intent-name&gt; tag.</p><p>2. Define a fulfilment mode for each app action — which can be deep links or slices. You have to pass a fulfilment mode in each action. This is compulsory.</p><p>3. Pass the URL template which will allow a user to launch your app — this can be the deep link to your app or URL to Slice provider.</p><p>4. Define entity-set — the Gojek app is available in multiple locales, so to provide locale for all the regions, we added the entity-set, which allows Assistant to understand more than one version of category. ex:- taxi can be pronounced as taksi in Bahasa.</p><p>So, If you want locale for your specific parameter in deep-link URL, you can simply attach an entity-set with that parameter, see how you can achieve this in below example</p><p><em>&lt;parameter name=”taxiReservation.category”&gt;&lt;entity-set-reference entitySetId=”TransportCategoryEntitySet” /&gt;&lt;/parameter&gt;</em></p><p>5. Add a reference to <strong><strong>actions.xml</strong></strong> file using the &lt;meta&gt; tag in your app’s manifest.xml file inside the application tag.</p><p><strong><strong>In order to integrate Slices:</strong></strong></p><ol><li>Implement an Android Slice by following the steps described in the <a href="https://developer.android.com/guide/slices/getting-started" rel="noopener">Slices Getting Started guide</a>.</li><li>In the actions.xml file, in the <code>&lt;fulfillment&gt;</code> element, specify <code>fulfillmentMode=“actions.fulfillment.SLICE”</code> to indicate that a user intent can be fulfilled using a Slice in your app.</li></ol><h1 id="a-few-quick-notes-on-what-we-learnt"><strong>A few quick notes on what we learnt</strong></h1><ol><li>Testing this feature is pretty hard and things become weird when you have multiple build types of your app. For testing, you need a build type on the Play Store, (which means the package name of the testing build should match the package name of the published app). You can use a plugin (developed by Google) called<a href="https://developers.google.com/assistant/app/test-tool" rel="noopener"> <strong><strong>App Actions Test Tool</strong></strong></a> for testing this feature.</li></ol><blockquote><em><em>Please make sure you are following points while testing with App Actions Test Tool:</em></em><br><em><em>a) Log in to Android Studio and Google Assistant with the account which has access to your published app on Play console.</em></em><br><em><em>b) <code>ApplicationId</code> of the app should be the same as your published app.</em></em><br><em><em>c) Your Gradle should be built successfully.</em></em><br><em><em>d) Use App Action Tool to create and update preview and test the app actions and slice.</em></em></br></br></br></br></blockquote><p>2. If your app is used in different locales, you can create locales using <a href="https://developers.google.com/assistant/app/action-schema#entity-set-reference" rel="noopener">entity-set</a> in the actions.xml file.</p><p>3. In order to give early builds to QA or other users (if you have multiple build types in your app), you can create an internal test track on Play console and add relevant people to it. This allows you to share the build to production for only some listed users.</p><p>(See <a href="https://support.google.com/googleplay/android-developer/answer/3131213?hl=en" rel="noopener">this</a> for how you can create an internal test track for your app.)</p><p>4. Actions.xml shouldn’t be <strong><strong>obfuscated</strong></strong> in release apk — it means if you are using any obfuscated tools like proguard then actions.xml shouldn’t be obfuscated there.</p><p>5. Slices can be requested before the <code>onCreate</code> of your application is completed. You can run into issues if you are using something which is initialised in <code>onCreate</code> while creating slices.</p><p>6. Don't refresh slices from <code>onBindSlice()</code> method, it will end up in an infinite loop where Google Assistant will call <code>onBindSlice()</code> infinitely.</p><p>That’s all from us folks. Hope this post gave you a better understanding of how App Actions and Slices work with Google Assistant. Working on this feature was an amazing experience for us. If you use the Gojek app, make sure to give them a try and let us know what you think. ?</p><hr><p>Liked what you read? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter</a> and we’ll send you updates from the blog straight to your inbox! ?</p></hr>]]></content:encoded></item><item><title><![CDATA[How Gojek Uses NLP to Name Pickup Locations at Scale]]></title><description><![CDATA[Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.]]></description><link>https://gojek-ghost.zysk.in/how-gojek-uses-nlp-to-name-pickup-locations-at-scale-2/</link><guid isPermaLink="false">Ghost__Post__5eb0f8af5524cd001e7391f4</guid><category><![CDATA[Data]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 01 May 2020 04:00:00 GMT</pubDate><media:content url="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dFalBje-vQCkEY8Zrq9P5g.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dFalBje-vQCkEY8Zrq9P5g.jpg" alt="How Gojek Uses NLP to Name Pickup Locations at Scale"/><p>When our customers want to use our ride hailing products like GoRide and GoCar, they are presented with convenient, clearly named pickup points nearby. Here’s an example:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/180/1*msS7z4IN06LVM0XvClmmPQ.gif" class="kg-image" alt="How Gojek Uses NLP to Name Pickup Locations at Scale"/></figure><p>This saves customers the hassle of calling the driver partner, explaining where they are, what colour clothes they are wearing, and so on. Our pickup points are designed to make lives easier for both customers and driver partners.</p><p>This is possible because the pickup points shown on the app are popular pickup locations around the area. What’s more, the pickup point names are displayed exactly how customers driver partners usually refer to them.</p><p><strong><strong>But how do we manage to name so many pickup points accurately, and at scale?</strong></strong></p><p>We use past booking locations and their associated chat logs to discover named pickup points. As our previous research has explained, we first perform <a href="https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29" rel="noopener">clustering</a> on historical bookings to form potential pickup points, then we use a <a href="https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03" rel="noopener">language model</a> to select the best name. Here, we explain how we improved upon the previous statistical language model with a state-of-the-art NLP model, which makes the entire naming exercise fully scalable. This is the magic behind all the pickup points seen on the Gojek app.</p><h1 id="how-can-we-learn-better">How can we learn better?</h1><p>As explained in our previous post, our original statistical language model selects the best pickup point name from the most probable n-grams extracted from bookings text. However, such a statistical language model doesn’t ‘understand’ the meaning of the texts, it simply chooses phrases with high frequencies without knowing the semantics. Sometimes it throws street names, sometimes even common phrases with no information about location. We have to manually check everything to make sure it reflects the right POI, before it appears on the app.</p><p>This creates a challenge — especially if we want to quickly expand the frictionless pickup experience to customers across in new geographies. Hence, we decided to go a step further with a deep-learning NLP model that ‘understands’ and ‘learns’ to differentiate what is a valid pickup point name.</p><p><em><em>At Gojek, we never stop thinking and always go a step further</em></em></p><h1 id="meet-cartobert-">Meet CartoBERT ?</h1><p>One of the most recent and impactful breakthroughs NLP was the publication of BERT[1] — a contextual language representation with transformer models — by Google in late 2018. It obtained state-of-the-art results on a wide array of NLP tasks. In the 2019, many NLP researches were influenced by BERT, including XLNet, RoBERTa, ERNIE etc.</p><h2 id="bert-explained">BERT Explained</h2><p>BERT, or Bidirectional Encoder Representations from Transformers, is composed of an embedding layer, followed by groups of transformer layers.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1226/1*qHFXdPcW_3UkLEsRJy2FRg.png" class="kg-image" alt="How Gojek Uses NLP to Name Pickup Locations at Scale"/></figure><p>Every word (token) in the input sentence will first get encoded into its embedding representations in the embedding layer, and then go through bidirectional transformer encoder layers. Every encoder layer will perform the multi-head attention computation on the token representation from the previous layer to create a new intermediate representation, which is then output to the next layer. The output from the final layer is the contextual representation of the input token. A pooled sentence level representation combining all token representations could be created if needed by specific downstream tasks.</p><p>With the final contextual representations at either token or sentence level, a pre-trained BERT on large unlabelled text corpus, could be further extended to a wide variety of NLP tasks, such as text classification, question answering, Named Entity Recognition (NER) etc.</p><p>ALBERT[2], published by Google in Sep 2019, improved on BERT with embedding parameter factorisation and cross layer parameter sharing to reduce the number of parameters (by 9 times for base model). It also uses sequence order prediction instead of next sentence prediction for the pre-train task. In the paper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE etc), with fewer parameters.</p><h2 id="pre-train-cartobert-to-learn-language-representation-from-gojek-bookings-text">Pre-train CartoBERT to learn language representation from Gojek bookings text</h2><p>Inspired by ALBERT’s lightweight model and performance, we developed CartoBERT, Gojek’s very own pickup point name recognition model, based on ALBERT’s architecture.</p><p>As illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked bookings text corpus of about 200 million sentences. Booking text is first pre-processed for data masking to mask all customer sensitive information, language detection, text normalisation (including text cleaning, slang, abbreviation transformations, lowercase transformation and emoji removal). The pre-processed text is used to build subword vocabularies which handles Out-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword patterns. CartoBERT tokenizer is then created with the subword vocabularies and further used to encode and tokenize the same preprocessed bookings text to form pre-trained input files.</p><p>Same as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text using Masked Language Model — which predicts randomly masked tokens in input sentences — and Sentence Order Prediction tasks, which predicts the order of input sentences pair.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1386/1*STaqWssxlYPhFaDulLwJzg.png" class="kg-image" alt="How Gojek Uses NLP to Name Pickup Locations at Scale"/></figure><h2 id="fine-tuning-cartobert-to-extract-pickup-point-names-from-gojek-bookings-text">Fine-tuning CartoBERT to extract pickup point names from Gojek bookings text</h2><p>With the huge amount of bookings text we have at Gojek, now CartoBERT can better ‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a booking text sentence.</p><p>For every token in the input sentence, CartoBERT will output a 768-dimension vector (we use the default hidden layer size of the ALBERT base model in CartoBERT, however this is configurable) from last transformer encoder layer, and we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning in the sentence context for fine-tune step.</p><p>As illustrated in the diagram below, while fine-tuning CartoBERT for pickup point name recognition, we replace the Masked Language Model and Sequence Order Prediction layers from CartoBERT in pre-train step with token classification layer. The token classification layer learns to predict the probability of a token belonging to a pickup point name, with the final token representation output from CartoBERT transformer layers, from labelled training data created with bookings text sentences, and corresponding pickup point names. Here, we use weighted cross entropy loss to deal with class imbalance, as tokens tagged to pickup point names are a minority.</p><p/><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1526/1*WO1LRHQPqAqzpLBMMl-NuA.png" class="kg-image" alt="How Gojek Uses NLP to Name Pickup Locations at Scale"/></figure><p>With this, CartoBERT is fine-tuned to extract pickup point names from bookings text sentences, if any.</p><h2 id="how-does-the-model-perform">How does the model perform?</h2><p>CartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93% accuracy, which is measured as the percentage of valid pick up point names out of generated names. With this high accuracy, we have achieved full scalability of automatic generation for named pickup points to quickly cover multiple geographies without heavy reliance on human inputs.</p><h1 id="what-s-next">What’s next?</h1><p>We are not stopping here and are exploring using active learning to further improve CartoBERT. With active learning, we only flag out uncertain predictions, which are measured as sentence level least token probability[3] for human labelling. We then use human-curated data as feedback for model learning. In this way, we can improve model learning efficiency with minimum labelling effort.</p><p>What’s more, with the success of CartoBERT, we are considering pre-training and open sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus from wiki, news, Twitter etc. Currently, the options for open-sourced language model in Indonesia Bahasa are very limited, only pre-trained static word embeddings such as word2vec, fasttext etc are available. It would be beneficial to the community if we have a good state-of-the-art attention-based transformer model for the language. Stay tuned for more updates from the Cartography Data Science team. ?</p><p>Leave a ? if you liked what you read. Ping me with suggestions and feedback.</p><p>Thanks to all the amazing people who contributed to this post: Tan Funan, Zane Lim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur Izzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.</p><hr><p><strong>References</strong></p><p>[1] <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Devlin%2C+J" rel="noopener">J. Devlin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chang%2C+M" rel="noopener">M. Chang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lee%2C+K" rel="noopener">K. Lee</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Toutanova%2C+K" rel="noopener">K. Toutanova</a>: BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.<br><a href="https://arxiv.org/abs/1810.04805" rel="noopener">arXiv:1810.04805</a> (2018)</br></p><p>[2] <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lan%2C+Z" rel="noopener">Z. Lan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen%2C+M" rel="noopener">M. Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Goodman%2C+S" rel="noopener">S. Goodman</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gimpel%2C+K" rel="noopener">K. Gimpel</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Sharma%2C+P" rel="noopener">P. Sharma</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Soricut%2C+R" rel="noopener">R. Soricut</a>: ALBERT: A Lite BERT for Self-supervised Learning of Language Representations. <a href="https://arxiv.org/abs/1909.11942" rel="noopener">arXiv:1909.11942</a> (2019)</p><p>[3] <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu%2C+M" rel="noopener">M.Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tu%2C+Z" rel="noopener">Z. Tu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang%2C+Z" rel="noopener">Z. Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu%2C+X" rel="noopener">X. Xu</a>: LTP: A New Active Learning Strategy for Bert-CRF Based Named Entity Recognition. <a href="https://arxiv.org/abs/2001.02524" rel="noopener">arXiv:2001.02524</a> (2020)</p><hr><p>Liked what you read? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter</a> to have our latest stories delivered straight to your inbox!</p></hr></hr>]]></content:encoded></item><item><title><![CDATA[How We Do Delightful Customer Pickups]]></title><description><![CDATA[The little things that make getting where you need to go that much better.]]></description><link>https://gojek-ghost.zysk.in/how-we-do-delightful-customer-pickups/</link><guid isPermaLink="false">Ghost__Post__5e8efa6b5cbf39001e28e7fa</guid><category><![CDATA[Design]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 07 Apr 2020 04:00:00 GMT</pubDate><media:content url="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg" alt="How We Do Delightful Customer Pickups"/><p>Did you know Gojek’s Transport team (which oversees the ride hailing products of our SuperApp) has a ‘Pickup Experience’ pod?</p><p><em><em>No, we’re not helping you get better dates, you’re on your own there. </em></em>?</p><p>I’m talking about the customer pickup experience on booking a ride with us on GoRide (2-wheeler taxis) and GoCar (4-wheeler taxis).</p><p>You know the feeling. The feeling of going to a big mall in an unfamiliar place, trying to book a ride, but not knowing which is the most convenient pickup spot.</p><p><em><em>Do I try the north entrance? Oh wait, there’s a one-way there, might need to wait a long while.</em></em></p><p><em><em>Ah, I got a driver but I don’t know how to tell her which side I am on. Wait, there’s a Starbucks here. I’m in front of Starbucks!</em></em></p><p><em><em>Oh, you’re near McDonalds? Wait, maybe I can just come to you. But, how do I get to McDonalds now?</em></em> ?‍♂️</p><blockquote>Yeah, we’ve all been there.</blockquote><p>Pickup points may seem like trivial things, but when you operate on a scale of millions of orders per day, smoother pickups which require less coordination (and time) mean our customers get places faster, and our driver partners earn more.</p><p>In this post, we’ll talk about how Gojek improved the pickup experience for customers and partners using Points of Interest (POI) — like a mall — and then streamlined pickups around these areas using Pre-Defined Pickup Points (PPOI).</p><h2 id="the-breakdown">The Breakdown</h2><p>Many of the cities Gojek operates in are highly congested urban settings, where locations are often not properly labelled on maps and pickup points can be hard to determine. This initially led to a lot of additional coordination between partners and customers over the phone, which is not the best use of anyone’s time.</p><p>In order to streamline this process, we first began identifying POIs in popular areas. Once this was done, we located areas around these landmarks where lots of pickups happened, and began suggesting them as pre-defined pickup points to our users. Making these suggestions within the app was the first step in reducing the cognitive load associated with pickups. (If you’d like to know how we identified these spots. Check out <a href="https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03" rel="noopener">this post</a>).</p><figure class="kg-card kg-image-card"><img src="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do.gif" class="kg-image" alt="How We Do Delightful Customer Pickups"/></figure><p>Our next step in the process was to provide customers some details about the quality of these locations. We started showing them more details about the pickup points near them—are they sheltered from weather, in case the driver needs a couple of minutes to reach them? If it’s night, is it well-lit?</p><h2 id="but-wait-there-s-more-">But wait, there’s more…</h2><p>PPOIs have contributed hugely to streamlining pickups and making life easier for our stakeholders. But what if the customer is new to an area and cannot easily identify the locations we’re suggesting? Could we do more?</p><p>Of course we could.</p><p>Up until recently, pickup points showed up as map pins on the customer app based on their location. We decided to add some additional functionality, starting with images.</p><p>If you’re making a booking from an unfamiliar location, or have unreliable GPS connectivity, how do you know you’re at the correct point suggested by the Gojek app? By adding images to the corresponding pins, we gave our customers the advantage of being able to visually confirm they were in the right place.</p><figure class="kg-card kg-image-card"><img src="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do-1.gif" class="kg-image" alt="How We Do Delightful Customer Pickups"/></figure><p>With the two-factor confirmation of GPS pin and visual, our customers could confirm their pickup point, and wait in peace. Not bad, eh?</p><p>At this point, our app could cater reliably to most of our users, whether it was regulars who already had a lot of context on ideal pickup spots or users who were new to an area. However, we wanted to go even further to make a more airtight solution. What if a user was near a pickup point, but did not know how to reach it?</p><p>This was a problem with significant impact, as a user walking a short distance to a nearby well-served pickup point would be significantly faster than a driver partner navigating to an unfamiliar location nearby. Driver partners would potentially run into obstacles like one ways, or areas in Jakarta where odd-even rules are implemented.</p><p>However, we didn’t want to put the onus of navigating to the PPOI on the user. The least we could do in return for their cooperation was help them with directions.</p><p>So that’s what we did.</p><figure class="kg-card kg-image-card"><img src="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do-2.gif" class="kg-image" alt="How We Do Delightful Customer Pickups"/></figure><p>Being able to leverage technology to help users book rides is an achievement in itself, one we’re proud of. But stopping at the solution is not how Super Apps are built. We exist to solve problems, and then delighting our users further through ease of use.</p><p>From vague pickup points defined by often inaccurate GPS pings, our pickup experience had evolved to the point where a user with zero knowledge of an area could easily identify the best location nearby for smooth pickup, understand whether it was convenient to wait at, navigate there, and confirm their arrival by sight. Utter delight. ?</p><p>That said, all our bookings don’t happen in dense urban areas with defined PPOIs. We’re working towards having PPOIs in most major areas, but sometimes, good old chat-based coordination is still the default fallback.</p><p>We did learn a thing or two from our experience of putting images on PPOIs, so we worked with Gojek’s Platform team (which handles our chat functionality), and baked in the ability to share images in Driver-to-Customer chat. Even if all else fails, our customers could still click a picture of their current location, and share it with our partners to help them identify it.</p><p>It’s safe to say that putting in the effort to help our customers get to their rides easily has paid off.</p><blockquote><em><em>In the areas where we’ve deployed these features, we’ve seen pickup accuracy double on average. <em>✌</em></em></em></blockquote><h2 id="what-s-next">What’s next?</h2><p><em><em>There’s more?</em></em></p><p><em><em>There’s always more.</em></em></p><p>Even as we continue to roll out this functionality across more regions we operate in, we’re working towards making it better—by allowing our users to give us feedback on how accurate our images/directions were, and even upload PPOI images themselves.</p><p>We’ll keep you updated on how we fare. In the meantime, follow us for more stories, and <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">sign up for our newsletter</a>! ?</p>]]></content:encoded></item><item><title><![CDATA[Gojek’s Best Practices to Work From Home [Beta]]]></title><description><![CDATA[How to come to terms with ‘working from home’, and a few guidelines to help with the transition.]]></description><link>https://gojek-ghost.zysk.in/gojeks-best-practices-to-work-from-home-beta/</link><guid isPermaLink="false">Ghost__Post__5eb128b6f7c7da001effcd8c</guid><category><![CDATA[Culture]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 16 Mar 2020 04:00:00 GMT</pubDate><media:content url="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_g1gfRNDqLKJWtAwURoFgaw.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_g1gfRNDqLKJWtAwURoFgaw.jpg" alt="Gojek’s Best Practices to Work From Home [Beta]"/><p>By Kevin Aluwi</p><p>It’s been a trying couple of weeks since the Coronavirus outbreak. As governments and authorities encourage social distancing, many companies — Gojek included — have started to put a heightened emphasis on working from home. As an organization with a distributed workforce, we have offices in Indonesia, Singapore, Vietnam, Thailand, Philippines, and India, a remote strategy has always been embedded in our DNA. This post details some lessons and what we think are ‘best practices’ to follow in a Work from home (WFH) situation.</p><p><em><em>At the outset, it’s important to call out a key point: During this time of uncertainty, employees may not be at their productive best. There’s a lot of anxiety with family and friends, and rightly so. WFH requires high </em></em><strong><strong><em><em>Accountability</em></em></strong></strong><em><em>, but also </em></em><strong><strong><em><em>Empathy</em></em></strong></strong><em><em> and </em></em><strong><strong><em><em>Trust</em></em></strong></strong><em><em>. Be mindful, this is a stressful time for everyone. Trust your colleagues to do the best they can given the times.</em></em></p><h3 id="before-we-begin-context">Before we begin — context</h3><p>Gojek has always been mindful of our employees’ health and wellbeing. We have unlimited sick leaves, and encourage employees to work where and when they are at their productive best. <strong><strong>We have proven success</strong></strong> — with functional leaders working fully remotely without compromising on effectively launching org-wide initiatives: career ladders, new hiring programs, even setting up an entire new function. But this is by all means <strong><strong>not</strong></strong> a comprehensive or a definitive guide. Think of this as a ‘beta’ document summarising some lessons in a bid to get feedback from you, our readers. We’re putting this out there so we can learn together to do better.</p><p><em><em>If you think we’ve missed out on something, please leave a comment — will help us a long way in fine-tuning our own practices. These are trying times, and we want to do what is right for everyone.</em></em></p><h3 id="-1-the-right-environment">(1)The right environment</h3><p>Office spaces provide designated areas employees start associating with work and focus. This may not be the case in a home environment, so it is important to recreate this space. Some ideal prerequisites include an area with plenty of light, minimal distractions and a comfortable desk and chair.</p><p>Working from home also potentially involves sharing the space with other family members / housemates. It’s important to set guidelines to indicate when you are at work and not to be disturbed — one team member for example set up a plush toy on a desk as a makeshift ‘Do Not Disturb’ sign!</p><p>Once a setup is established, don’t neglect the importance of taking breaks. The absence of colleagues and social interaction should not lead to long uninterrupted sessions. Set a timer to alert you if you’ve been continuously at your desk for over two hours. Take short breaks to stretch your legs. Use the time to also spend time with family, or work on personal projects that require the occasional check-in! There’s a silver lining to every scenario :)</p><p><strong><strong>This whole point might seem obvious and rather trivial, but is critical when you want focus, and don’t have your colleagues to ‘pair’ with you and nudge you.</strong></strong></p><h3 id="-2-the-right-tools">(2) The right tools</h3><p>Ensure the coordination tools used by your organisation / team are installed on your laptop and working properly. At Gojek we use Slack for messaging, Zoom for video conferencing, and Asana and JIRA for project coordination. Here are a few quick tips from our <a href="https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing" rel="noopener">WFH Best Practices</a> on how best to use them in a remote work scenario:</p><p><strong><strong>Over communicate:</strong></strong> Set clear expectations and create WFH Rules of Engagement for your team. What cadences need to be synchronous vs. async? Set your Slack status to away every time you leave the computer for a break, and update it once you’re back. Clearly request responses to critical communications you send, and do the same to confirm you’ve received an update (even Slack’s emoji responses will do, as long as there is recorded acknowledgement).</p><p><strong><strong>Document everything:</strong></strong> Meetings may become increasingly asynchronous, so it is important to document all the items discussed and assigned. Record key decisions in a centralized decision log. This can be done via written notes hosted in a common cloud folder, as well as tasks on Asana for accountability. Minimise communication gaps.</p><p><strong><strong>Choose the most high-context communication medium available:</strong></strong> A lot gets lost in translation when you don’t have visual cues. Use <strong><strong>video</strong></strong> conferencing whenever possible. Failing video, (spotty connection) default to a phone call, then chat. In chat, don’t hesitate to use emojis liberally to convey your tone! ?</p><p><strong><strong><em><em>Pro tip:</em></em></strong></strong> In Zoom preferences, set the option to<strong><strong> video</strong></strong> <strong><strong>muted/off </strong></strong>as the default — then manually enable them once you join a meeting. It can help avoid a few facepalms. Not everyone has the perfect Instagram workspace at home, so <a href="https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background" rel="noopener">Zoom’s background masks</a> will help.</p><h3 id="-3-the-right-mindset">(3) The right mindset</h3><p>The shift to remote will be alien for a lot of us. Be respectful and considerate — everyone’s doing the best they can. Set up core work hours when the entire team is expected to be available and clearly define these on a calendar. Be mindful of each other’s calendars and schedule sensitively so all concerned parties can extract the maximum output from their workday.</p><p>Quantify what is being done at the end of each day, and by whom. Transparency is key here. You can shape this right at the beginning during daily team meetings. When social interactions with colleagues are virtual, you as a manager, or an employer, tend to worry about accountability. Maintain a notepad of things you did, what you’re working on, when others can expect work to be delivered, and when you will respond to messages or requests. This reduces anxiety and helps you plan your day. In the midst of all this, don’t forget to respect your own time as well. Define your working hours, and stop once they are up.</p><p><em>It’s equally easy to also overwork yourself when working from home. Be mindful of your on-screen time.</em></p><h3 id="snackable-hacks">Snackable hacks</h3><p>We spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:</p><ul><li>If you find your attention span dwindling, take time off, browse your favorite social media app, go for a walk — get that Vitamin D in, talk to a friend/family member etc…</li><li>Eat on time, eat healthy — set timelines for this on your calendar so you’re not skipping meals.</li><li>Create a mini-team virtual group just for social interactions that do not discuss work — movies, books, art, interesting articles etc.</li><li>Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you eat. Do not sway here. Did we say hydrate? Hydrate.</li><li>Team calls should start with something fun — a new fact you learnt, an interesting fact you learnt, or something interesting going on in team member’s lives outside of work.</li><li>Change into a separate set of clothes during core working hours, even if they are just a different set of comfortable PJs. It helps delineate “work time” from “waking up” or “me time” when both are happening in the same place. It’s tempting to work in bed while wearing the clothes you slept in, but avoid this!</li><li>Your calendar is sacred — set timers for food breaks, leisure walks, time off, family obligations etc.</li><li>Call out good work! Do this more often than usual and with consistency. Start your meetings with kudos.</li></ul><h3 id="we-re-trying-to-get-better">We’re trying to get better</h3><p>This is an important shift in how organisations get work done. While this guide is a foundation to help us figure things out, we don’t have all the answers.</p><p>If you have significant experience with <a href="https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing" rel="noopener">remote work</a>, we’d like to hear your thoughts. Feel free to drop into our comments.</p><p>That’s all from us for now, stay safe!</p><p>P.S. Empathy &amp; Trust — The two key words you want to keep in mind. ✌️</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-1.png" class="kg-image" alt="Gojek’s Best Practices to Work From Home [Beta]"/></figure>]]></content:encoded></item><item><title><![CDATA[Speed Up Your Workflow With IntelliJ]]></title><description><![CDATA[Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja]]></description><link>https://gojek-ghost.zysk.in/speed-up-your-workflow-with-intellij/</link><guid isPermaLink="false">Ghost__Post__5ecb65447aa22c4066f83f64</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 27 Jan 2020 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_ygP4I6VnLARQODtQvTzheQ.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_ygP4I6VnLARQODtQvTzheQ.jpeg" alt="Speed Up Your Workflow With IntelliJ"/><p>I do the bulk of my test automation development in Kotlin/Java or Python languages. After the programming language, a very important component for the dev workflow is a good IDE.</p><p>Purists generally rave about the use of Editors like Sublime, VSCode or even use of Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or Eclipse. However, the truth is most modern devs in this day and age use/prefer IDE’s for the host of convenience features, speed, and flexibility they provide.</p><p>Personally, I am a big fan of IDE’s provided by <a href="https://www.jetbrains.com/" rel="noopener">Jetbrains</a>, and they are generally my tools of choice—saving me a ton of time while performing refactoring and greatly decreasing development time.</p><blockquote><em><em>Not convinced yet?</em></em></blockquote><p>If you’ve used IntelliJ, then ppen up <code>IntelliJ &gt; Help &gt; Productivity Guide</code> and see how much time it has saved you.</p><p>This is my breakdown in the past two years:</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_mRHQ5HihrnXqU7bh.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>However,</p><ul><li>Do we really extract the maximum juice out of these tools?</li><li>How many of the IDE’s features do we really use on a day-to-day basis?</li></ul><p>Well, fret not. This post will share some awesome tips that you can also follow to become more productive with your editors. I got to know some of these features when the prolific Dev evangelist <a href="https://hadihariri.com/" rel="noopener">Hadi Hariri</a> from Jetbrains visited <a href="https://www.gojek.io/" rel="noopener">Gojek</a> Bengaluru and shared these during a meetup.</p><p>To demonstrate these features, I would be using appium <a href="https://github.com/appium/java-client" rel="noopener">Java client</a> project but the same features can be applied in any <strong><strong>Java/Kotlin (IntelliJ IDEA)</strong></strong> project of your choice or <strong><strong>Python project (In Pycharm).</strong></strong></p><h3 id="ideavim">Ideavim</h3><p>To start with, did you know all Jetbrains editors come with a very good VIM support via IdeaVim plugin? Vim commands are amazing.</p><p>Once you get used to them, your editing and code navigation speed is easily multiplied 2X and it’s so easy to use it within IntelliJ. If you want to know VIM basics, I wrote a <a href="https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/" rel="noopener">post</a> on it some time back.</p><p>To install this plugin, either opt for it when freshly installing IntelliJ or <code>Go to preferences &gt; Plugins and search for IdeaVim in marketplace</code>, don't worry, you can always temporarily disable it and practice first before starting to use it in your day to day workflow.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_mMdadKP3FjJ2Jj9c.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>The most common commands that you should be aware of are mentioned right when you open it.</p><p>I use the IntelliJ IDEA classic keybindings, however, you should be able to quickly find the short cuts for these operations in the binding of your choice ( <code>Look into Preferences &gt; Keymap</code>)</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_2xCQI_tMRl7RQpAv.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_dndhilLo2bXVYO_D.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="search-shortcuts">Search Shortcuts</h3><p>Double Shift brings up the search console and this is the single place to either</p><ul><li>Search Classes or Files <strong><strong>(Shift + Cmd + N):</strong></strong> with certain names in your project or</li><li>Perform any action <strong><strong>(Shift + Cmd + A):</strong></strong> for example, refactoring certain components inside a class</li></ul><p>You can also easily learn the keyboard shortcuts for the common operations within the editor by seeing the shortcut right beside the command on this screen. Trust me, the investment in learning these has huge payoffs.</p><blockquote><em><em><em>The number of times that you avoid using the trackpad or mouse is </em><strong><strong><em>one time less</em></strong></strong><em> that you have to context switch while coding. Believe me, that makes a difference.</em></em></em></blockquote><h3 id="search-by-file-initials">Search by file initials</h3><p>While trying to find a file, often we just know the name vaguely by memory. In Search, it is sufficient to just mention the initials of the file and IntelliJ will list out all the files which match that criteria</p><p>Let’s say, for example, I want to search for all test files which start with <code>A</code> and have Test suffix, I can just enter <code>ATes</code> and see all the file names which match this.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0__Q-aR5Yl8g_PYSvr.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="search-method-inside-a-file-matching-a-pattern">Search method inside a file matching a pattern</h3><p>What if I want to search for all methods having <code>find</code> keyword inside test files named <code>AndTes</code>?</p><p>Well you just use a <code>dot .</code> in these search queries and you can easily search for even methods inside classes based on partial pattern search.</p><p>In this case, <code>AndTest.find</code> would show all the methods with <code>find</code> keyword in them. Neat huh?</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_-tEBZAYAl_oD6DHS.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="search-for-file-names-inside-a-particular-folder">Search for file names inside a particular folder</h3><p>In the example below, I am searching for file names starting with <code>KeyE</code> under <code>nativekey</code> folder by separating them with a forward slash <code>/</code></p><p><code>nativekey/KeyE</code></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_IW8jxxtq6cyfMpSC.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="navigating-options-all-within-the-search">Navigating options all within the search</h3><p>If you type a forward slash <code>/</code> in the search bar, you can see different IDE actions that you can take right there.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_9tsFLNRrv1Y3lTjt.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="find-usages">Find usages</h3><p>You can quickly find out usages of a given function, class, interface, etc by hitting <code>Cmd + B</code>, This saves a ton of time over manually searching for code. You can either navigate right inside the result pop up or open it in dedicated window by selecting <code>Open in find window</code>.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_CJOyIsf7nGojY9Lg.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>What if I want to see all the classes and methods that are present in <code>AndroidTest.java</code> class?</p><p>We can open the <strong><strong>Structure</strong></strong> tab <strong><strong>(Cmd + 7)</strong></strong> and glance at all the available methods with options to even show <strong><strong>anonymous classes/lambdas</strong></strong> inside the class.</p><p>Now, this could be very useful when you have a long class and want to see all the methods and then quickly navigate to them. Too many methods might hint at a potential refactoring candidate.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_RH_TICWZf2VTasMN.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="switcher">Switcher</h3><p>To switch between open files and open tabs</p><p>Use <code>Ctrl + Tab</code> and then to move down continue pressing <code>Ctrl + Tab</code> and to move up in switcher use <code>Ctrl + Shift + Tab</code></p><p>This is a useful way to quickly navigate among files and menu options again without using mouse or trackpad</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_u1OO-wpwoKH39BQs.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="recent-files">Recent files</h3><p>You do not need to remember what files were recently opened. To view recent files accessed, execute <code>Cmd + E</code></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_ZaMfMJ8LsxnnQk7F.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="navigation-bar">Navigation bar</h3><p>How many times have you switched the project tree using <code>Cmd + 1</code> and gone one level up to open a file? Before observing this, I know I kept on doing this again and again.</p><p>However, IntelliJ has a navigation bar on top of the editor which can be used to very quickly navigate up the project tree.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_ZCHnmBhFtgljalI2.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="live-templates">Live templates</h3><p>IntelliJ has a bunch of templates already created which can be quickly used to create a base skeleton code for many common constructs.</p><p>It is also aware of what type of file is currently opened and can show available options by opening <code>Cmd + J</code>, once you select the one that you are looking for, expand this code using <code>Tab</code> key</p><p>To open these templates and maybe even add your own, open <code>Preferences &gt; Editor &gt; Live Templates</code></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_lgWhZ-WL3zco-U5W.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="inject-language-reference">Inject language reference</h3><p>IntelliJ allows us to insert the context of a particular language and allows to work with it within another file. Seems confusing? Let me explain why this is a super neat feature.</p><p>Let’s assume you want to store JSON string inside a Java file. Typically Java 8 does not have support for multi-line string (Added in <a href="https://dzone.com/articles/jdk-12-raw-string-literals" rel="noopener">Java 12 though</a>)</p><p>You can start with a simple string variable. Press <code>Option + Enter</code> and select <code>Inject language or reference</code></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_-aSyY4KPrz8ZJ0rS.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>And then select the file type. Let’s say JSON</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_jHjlLhAkzjtluqcG.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>Now that we have provided the context, You can again press <code>Option + Enter</code> and then select <code>Edit JSON fragment</code> . This opens up a new window where you can create and edit JSON freely and the corresponding concatenated string is automagically inserted.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_beIcluwz5QOnPmVu.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="validate-regex-inside-the-editor">Validate regex inside the editor</h3><p>Regexes are a very powerful concept to learn and use. How many times have you had to write small scratch files (or use <a href="https://regexr.com/" rel="noopener">regex sites</a>) with below snippet to test whether a given string matches a regex?</p><p>I have personally done this many times.</p><!--kg-card-begin: markdown--><p>class Scratch {<br>
public static void main(String[] args) {<br>
String regex = &quot;\w+ world!&quot;;<br>
String testString = &quot;Hello world!&quot;;<br>
System.out.println(testString.matches(regex));<br>
}<br>
}</br></br></br></br></br></br></p>
<!--kg-card-end: markdown--><p>IntelliJ makes this even easier. Given a regex, enter <code>Option + Enter</code> and select <strong><strong>Check RegExp</strong></strong></p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_0NBq6qgPT14_zYIn.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>Enter test strings and IntelliJ would automatically test whether the sample string is a match or not. Neat right?</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_PPZYME7bt4PGZtrR.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><h3 id="drop-frames-while-debugging">Drop frames while debugging</h3><p>While developing it’s very important to be good at debugging. IntelliJ allows a very rich set of inspection features to know the state of variables/classes at a given point in the code.</p><p>In this below example, we have a simple <code>fooBar()</code> method which is a wrapper over <code>foo</code> and <code>bar</code> methods where <code>foo</code> has a debug point.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_P7eZVtk2sSDPiUFD.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>What if we want to move a step back from the current frame? It turns out we can select the current frame and select <code>Drop frame</code> and that would move the debug flow back to <code>foo</code> method.</p><p>It’s amazing how much time this saves since we do not need to rewire the debugging session from scratch.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/0_DdZ775opHOP0z_uL.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>Hopefully, this post encouraged you to also explore the feature-rich IDEs that Jetbrains provides, and give your automation development a literal nitro boost. (NFS reference anyone? 😋)</p><p>What other IDE tricks have been lifesavers for you? Let me know in the comments. If you found this useful, do share it with a friend or colleague.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-3.png" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"/></figure><p>For more such stories sent to your inbox once a week, <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">sign up for our newsletter!</a></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-2.jpeg" class="kg-image" alt="Speed Up Your Workflow With IntelliJ"><figcaption><a href="http://bit.ly/2UcJEI0">gojek.jobs</a></figcaption></img></figure>]]></content:encoded></item><item><title><![CDATA[Screenshot Testing our Design System on Android]]></title><description><![CDATA[An overview of how we do screenshot tests, and the open source libraries that helped us along the way.]]></description><link>https://gojek-ghost.zysk.in/screenshot-testing-our-design-system-on-android/</link><guid isPermaLink="false">Ghost__Post__5ec2ca3d7aa22c4066f83b6c</guid><category><![CDATA[Design]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 14 Jan 2020 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_CDWU7CE8XeZNDZ0fa4KNLw.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_CDWU7CE8XeZNDZ0fa4KNLw.jpeg" alt="Screenshot Testing our Design System on Android"/><p>By Jitin Sharma</p><p>In this post, we’ll take a look at how we test our Design System components on Android using screenshot tests to make them pixel perfect. 👌</p><p>Let’s start with an example.</p><p>Take a look at these two images:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/1052/1*GON1POsYNn-n13Yvx9KWlQ.png" class="kg-image" alt="Screenshot Testing our Design System on Android"><figcaption>Are these images identical?</figcaption></img></figure><p>They may look the same, but they aren’t! Here’s what’s different:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1052/1*0Cunmda2Ctain_g4xPU3iQ.png" class="kg-image" alt="Screenshot Testing our Design System on Android"/></figure><p>There are two subtle changes — the colour of the button is a different shade of green and the elevation is also different.</p><p>In <a href="https://blog.gojekengineering.com/ux-engineering-at-gojek-9de2abe24928" rel="noopener">Asphalt</a>, our design language system, we want to make sure our UI components are robust and detect breakages early. Here’s how we leveraged screenshot tests to achieve this.</p><h1 id="components-everywhere">Components Everywhere</h1><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1584/1*UH05mhuGHielEDM4RtbOcQ.png" class="kg-image" alt="Screenshot Testing our Design System on Android"><figcaption>Asphalt Components in Gojek app</figcaption></img></figure><p>With Asphalt, we create components that can be reused across the Gojek app. Every button, text, input, or card which you see in most of the screens of the app is an Asphalt Component. On top of this, we have a demo app which showcases the usage of these components.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1220/1*ixxp__0PC20bAMigugixhg.png" class="kg-image" alt="Screenshot Testing our Design System on Android"><figcaption>Asphalt Components in Demo app</figcaption></img></figure><p>Our components are the backbone of the Gojek app UI. For example, our button class has 300+ occurrences across Gojek’s consumer app codebase. This heavy reuse helps us enforce design guidelines across the app. The importance of these components requires that we test them thoroughly, as even a small regression in one component could mean a degraded experience for our users.</p><h1 id="-u-n-i-t-testing">[U]n[I]t Testing</h1><p>Unit tests are supposed to test logic and fail when expectations aren’t met. How do we expect that a certain UI is being rendered properly?</p><p>The idea of screenshot testing is to have a master copy of screenshots that we know are correct and on every test run compare the current screenshots to the master copy. If the current set does not match the master set, the test fails. This will allow us to check unintentional UI changes. If the changes are intentional, then we run the tests in <code>update</code> mode which updates the master screenshots.</p><p><strong><strong>Here is the high level outline:</strong></strong></p><blockquote><em><em>- Write Espresso test for all activities in the demo</em></em></blockquote><blockquote><em><em>- Take screenshots and create a master set</em></em></blockquote><blockquote><em><em>- At every CI run take screenshots again and compare with master set</em></em></blockquote><p>We started out with <a href="https://github.com/Karumi/Shot" rel="noopener">Shot</a>, an open source library which allows us to take screenshots and compare them using gradle commands and generate reports.</p><p>Here’s what a test for our Alert component looks like 👇</p><!--kg-card-begin: html--><script src="https://gist.github.com/jitinsharma/c57e8afbb0b4849ff75a29eeba4dc4d1.js"/><!--kg-card-end: html--><h1 id="achilles-heel-the-android-emulator">Achilles Heel — The Android Emulator</h1><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1400/0*WWyaL1uLibHeXC15.png" class="kg-image" alt="Screenshot Testing our Design System on Android"/></figure><p>While the Android emulator has improved a lot in recent times, we found running emulators in CI is still unreliable.</p><p>Here are a few issues we faced:</p><blockquote><em><em>- We had to wait to for the emulator to start up, which was only possible through a hack(y) script by continuously pinging <code>adb</code> commands</em></em></blockquote><blockquote><em><em>Emulator would put more memory pressure on CI runners</em></em></blockquote><blockquote><em><em>Emulators also need hardware acceleration which required us to enable <code>kvm</code> on our Linux-based machines.</em></em></blockquote><p>Running Instrumentation test cases with these issues would mean our tests would be flaky — and we couldn’t have that.</p><h1 id="firebase-test-lab-saves-the-day-">Firebase Test Lab saves the day!</h1><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1280/0*IIH6x5bWvHn1Gcv_.jpg" class="kg-image" alt="Screenshot Testing our Design System on Android"/></figure><p>We decide to move away from emulators to real devices.</p><p>One idea was to have devices connected to a machine and use the machine as a runner for running test cases in CI — a device test lab.</p><p>But devices come with their own baggage — maintaining them. They may be interrupted by software updates, system dialogs… or get overcharged and explode! 🔥</p><p>We found the next best thing: <a href="https://firebase.google.com/docs/test-lab" rel="noopener">Firebase Test Lab</a> — a set of devices in cloud, managed automatically and available via CLI.</p><p>This solved our device problem, but we ran into another one — Firebase Test Lab doesn’t allow you to run custom gradle commands. Instead, it expects you to upload a debug and a test apk, and it will run the tests for you. This meant we could no longer use Shot for taking screenshots and comparing them 😦</p><p>While scratching our heads over how to overcome this problem, we found that Firebase Test Lab <a href="https://firebase.google.com/docs/test-lab/android/test-screenshots" rel="noopener">allows you</a> to take screenshots through a library and then retrieve them from Google Cloud Bucket.</p><p>There is also a <a href="https://github.com/runningcode/fladle/" rel="noopener">gradle plugin</a> which automates this process including downloading artifacts from GCP — open source to the rescue again!</p><p>Here’s how our test case looks like with Firebase screenshot library:</p><!--kg-card-begin: html--><script src="https://gist.github.com/jitinsharma/971c95389af0ae11b38f392076dc6df8.js"/><!--kg-card-end: html--><p>For image comparison we used <a href="https://imagemagick.org/" rel="noopener">ImageMagick</a>, a very popular and feature-packed CLI tool for image manipulation. It also allows us to output a different image in case two images don’t match, which is super useful for generating test failure reports.</p><h1 id="the-final-piece-integrating-screenshot-tests-into-our-developer-workflow">The final piece — integrating screenshot tests into our developer workflow</h1><p>As part of CI, we do the following things when a merge request is raised:</p><blockquote><em><em>- Build the project</em></em></blockquote><blockquote><em><em>- Run Espresso Tests on Firebase Test Lab</em></em></blockquote><blockquote><em><em>- Retrieve screenshots and compare them with master set</em></em></blockquote><blockquote><em><em>- If any screenshot doesn’t match, we fail the build and add a comment to PR using <a href="https://danger.systems/" rel="noopener">Danger</a></em></em></blockquote><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1970/1*D6gb_yARAM4n83umso03Xw.png" class="kg-image" alt="Screenshot Testing our Design System on Android"><figcaption>Danger reporting mismatch in screenshot along with diff image.</figcaption></img></figure><p>We have been using this setup for some time now, and it’s worked out great for us! We have been able to execute multiple UI refactors with high confidence.</p><h1 id="what-s-next">What’s next?</h1><p>We will continue to invest in this setup in the future. Things like testing localisation, having a test matrix with multiple screen sizes, API levels, device densities… these are some things we have planned for the future.</p><p>A big thank you to the open source libraries that helped us achieve this!</p><hr><p>Liked what you read? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter</a> and we’ll send you weekly updates about our stories! 🖖</p></hr>]]></content:encoded></item><item><title><![CDATA[How We Supercharged Chat]]></title><description><![CDATA[The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.]]></description><link>https://gojek-ghost.zysk.in/how-we-supercharged-chat/</link><guid isPermaLink="false">Ghost__Post__5eb12eb3f7c7da001effce0b</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 10 Jan 2020 04:00:00 GMT</pubDate><media:content url="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_tuDgHHPUouXxzsK4OEzPaw.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_tuDgHHPUouXxzsK4OEzPaw.jpg" alt="How We Supercharged Chat"/><p>By Benzi Ahamed</p><p>The Gojek consumer app comes with a chat feature. This allows users to have conversations with:</p><ul><li>The currently assigned driver partner in relation to a booking.</li><li>Other Gojek users, provided they are known contacts in your address book. These can be either personal or group chats.</li></ul><p>In order to use the chat platform as springboard to other services within Gojek’s vast ecosystem, we wanted to expose some features that integrate with our other offerings — within the convenience of a chat window.</p><p>One of the first service options we wanted to focus on was payments — paying and requesting for money between individuals and groups. Chat had the platform to create connections between people, GoPay had payments — it was time to marry the two.</p><h1 id="architecture">Architecture</h1><p>To start with, as a chat platform team, we did not really know anything about the payments domain. In fact, most of the integrations we planned for required collaborating with other product teams within Gojek.</p><p>We decided early on that we needed a plugin-based framework that other product teams (and even chat team’s core services) could use. We also decided that the API surface area for this new framework should have as much as possible in common between the Android and iOS implementations.</p><p>The first use case we focused on was integrating payment options within chat — which would help us kickstart our design and feature rollout.</p><h2 id="approach">Approach</h2><p>In the vein of keeping things as simple as possible, we came up with the following set of guidelines:</p><ul><li>The chat subsystem can expose add-on features to the user</li><li>These features will not be part of the core chat offering, but can be plugged-in externally</li><li>These plugin-based entities — chat extensions — can have mainly two capabilities</li><li>Display a button (widget) in a chat window to trigger the chat extension’s functionality</li><li>Display chat extension messages that can support rich text, images, call-to-actions</li></ul><p>Chat extension messages are merely text messages with additional metadata. While plain text-based messages are rendered by the core chat rendering system, chat extension messages need to be rendered by the chat extension that created the message.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1980/1*yZbylgYQ7Q7jaF8cooEpeQ.png" class="kg-image" alt="How We Supercharged Chat"><figcaption>Chat Extension Framework — Key Actors</figcaption></img></figure><p>The illustration above depicts the final framework components we came up with.</p><ul><li><strong><strong>Chat Extension Providers</strong></strong> are responsible for vending <strong><strong>Chat Extension</strong></strong>s based on the active <strong><strong>Chat Session</strong></strong> (there might be cases where we want to enable a certain feature only for certain types of chats e.g. those between our drivers and customers).</li><li><strong><strong>Chat Extensions</strong></strong> are the components responsible for vending trigger points (<strong><strong>Widget Views</strong></strong>) and custom message views (<strong><strong>Extension Message Views</strong></strong>).</li></ul><p>While the core subsystem takes care of managing life cycles of the chat extensions, widgets, and message views, it is the responsibility of extension authors to purely focus on the implementation details of their feature.</p><p>With the above design in place, we were ready to start collaborating and start implementing features.</p><p>Let’s take a look at some integrations we were able to build collaboratively.</p><h1 id="sample-integrations">Sample Integrations</h1><h2 id="payments">Payments</h2><p>The first integration we did was Request and Pay flows. Utilising GoPay, customers can make payments and request for money from friends.</p><p>Here’s the Request Flow in action, within a personal chat:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/404/1*2mJZ8btzdO7bVq5rXtwvoQ.gif" class="kg-image" alt="How We Supercharged Chat"><figcaption>Request Money from an Individual</figcaption></img></figure><p>In a group chat, Request Flow translates to a Split Bill flow:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/402/1*OHgw8oUSuN6n1d8sjWCw7A.gif" class="kg-image" alt="How We Supercharged Chat"><figcaption>Request Money in a Group</figcaption></img></figure><p>Here’s the Pay flow in action:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/404/1*6z12Pjg1Vgy8Y-0P1jFPSw.gif" class="kg-image" alt="How We Supercharged Chat"><figcaption>Pay via GoPay, continue conversation in Chat</figcaption></img></figure><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id="restaurant-sharing">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.</p><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id="restaurant-sharing-1">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.<br/></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/404/1*iMz_DNDwFwiCM4aiMRilAg.gif" class="kg-image" alt="How We Supercharged Chat"><figcaption>Share Restaurant Details via Chat</figcaption></img></figure><p>What’s interesting is that once a Restaurant Card has been shared via chat, a recipient clicking on that card can proceed to make a food order, directly from the chat window itself. This is made possible by the fact that Extension Message Views can be fully interactive (e.g. detect user taps), and the chat window provides contextual navigation controls to them.</p><h2 id="image-sharing">Image Sharing</h2><p>Lastly, let us take a look at the most recent feature we rolled out to production — image sharing in our customer-driver chats.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/600/1*uFGU-NAQrIM2L4USdNLuWA.gif" class="kg-image" alt="How We Supercharged Chat"><figcaption>Image Sharing via Chat</figcaption></img></figure><p>During the implementation of this feature, we recognised that image sharing would be better triggered from the chat window if there was a direct shortcut button (e.g. a camera icon) within the bottom text input area of the chat window.</p><p>This leads us to enhance our extension framework to allow Chat Extensions to provide Chat Extension Shortcuts as well. Our updated framework looks like below:</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/2140/1*BDMz2IPpUJcX3M80qI_7bw.png" class="kg-image" alt="How We Supercharged Chat"/></figure><h1 id="lessons-learned">Lessons Learned</h1><p>It has been a great journey so far exploring various kinds of integrations in a simple chat window. We have a lot more planned, but in the meanwhile, here are a few key things we learned along the way</p><ul><li>When you are developing a platform, evangelising what your platform provides is key. This is equally relevant if you are a platform-product company, or a platform team within a company. We conducted an internal chat extension hackathon which helped broaden our outreach, and saw some pretty cool ideas implemented including Live Location Sharing, Booking Sharing, Games, Sticker Packs etc.</li><li>Document your public API! Teams are more willing to collaborate if you have proper, up-to-date documentation in place. We created detailed technical documents, integration guides, and even provided a sample chat extension (a starter-pack, if you will) — these greatly helped teams adopting these new features. Also, the feedback we got during the internal hackathon fed directly back into improving our documentation.</li><li>Having a common design language helped our Android and iOS engineers to collaborate more closely. It was easier for the team to work on implementing the feature by focussing on the common characteristics during tech discussion, design ratification sessions etc. and leaving the nuances of each platform to respective teams during development. Having a common language that engineers can speak (irrespective of their specialisations) improves cross-communications and collaboration.</li><li>It is important to design solutions exercising self-imposed constraints. These constraints should directly limit the engineering scope of the solution. As engineers, we are all too comfortable going down the technical analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit (possibly) over-engineered solution. This usually ends up in complicated designs, which translate into complicated code. It is better to design simpler systems and iteratively add smaller features, where each iteration cycle should also incorporate refactoring every step of the way. Even though we knew having something like Extension Shortcuts was nice to have from the get go, we had to exercise restraint and only implemented the feature when it was actually required.</li><li>We cannot stress this enough, but <em><em>continuous refactoring</em></em> (whenever required) is one surefire way to reduce the build-up of tech debt in any codebase. Improve a function here, rename a variable there, refactor a class into two — every little bit helps. It is the responsibility of the entire team to be engaged in this exercise.</li></ul><p>So there you have it, a quick look at the way the core chat team developed a base extension framework that is currently being used to build richer integrations into chat.</p><hr><p>Want more where that come from? Have our updates delivered straight to your inbox by <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter">signing up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[The Secret Sauce Behind Search Personalisation]]></title><description><![CDATA[How Gojek uses machine learning to personalise search results in GoFood.]]></description><link>https://gojek-ghost.zysk.in/the-secret-sauce-behind-search-personalisation/</link><guid isPermaLink="false">Ghost__Post__5eb12ec4f7c7da001effce0f</guid><category><![CDATA[Data]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 02 Dec 2019 04:00:00 GMT</pubDate><media:content url="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_x4G3c6-g3z3mz01o2EJdbw.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_x4G3c6-g3z3mz01o2EJdbw.jpg" alt="The Secret Sauce Behind Search Personalisation"/><p>By Jewel James</p><p>Are you looking for food? Thinking about burgers and crispy chicken fritters with creamy sauces sitting on a warm, soft bun? At least, that’s what I am thinking about. May be you’re different. Vegan perhaps? Or craving noodles? Each of us turn into a different person when we are hungry, and this is the story about how GoFood — Gojek’s food delivery service — helps you find the bite you crave.</p><blockquote><em><em>At the core of the food ordering experience, sits search.</em></em></blockquote><p>Searches are part of so many of our interactions on web and mobile, that we don’t even notice it anymore. This is mostly because modern search engines have matured to a point where they can deliver high quality results even if the entered query is a weak signal of the user’s intent. Even when weak, every query still contains a piece of the user’s intent.</p><p><em><em>In the case of GoFood, that piece is a fragment of our user’s hunger-driven brain.</em></em></p><p>In this post, we’ll discuss how we personalise the search results we surface on GoFood, based on the information we have about our users’ food preferences.</p><h1 id="how-each-of-us-differ">How Each of Us Differ</h1><p>Let’s look at two of our GoFood users who have started feeling the pangs of hunger, and come online to check restaurants near them.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/3192/1*AP6fdakISbNOdEZyCUxa5g.jpeg" class="kg-image" alt="The Secret Sauce Behind Search Personalisation"/></figure><p>They both open our app and click on the <code>NEAR ME</code> tile that lets users find the restaurants near them. We show them the nearest restaurants first, and this is what they both see.<br/></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/2322/1*tBxtTKY9cfA7rcl5LXq3Ag.jpeg" class="kg-image" alt="The Secret Sauce Behind Search Personalisation"/></figure><p>This list goes on and on and will let them see each restaurant which is farther and farther away. They can now peruse the menus of each restaurant and pick one that serves what they feel like ordering. The problem is that they may spend some time scrolling and then leave the app without being able to make up their minds around which restaurant to place an order from. We have thrown too many choices at them and the cognitive effort of picking a restaurant and then a dish from the menu is too much work to make them suffer through.</p><p><strong><strong><em><em>But wait. Both Mila and Husain have transacted with us in the past, and we know a fair bit about their preferences.</em></em> 🤔</strong></strong></p><p>To make this experience better, we decided to build a system that would let both of them see restaurants that suit their own tastes and preferences</p><h1 id="applying-machine-learning-to-the-problem">Applying Machine Learning to the Problem</h1><p>Ranking documents for relevance works by assigning a prediction score to each document retrieved, which is directly proportional to its relevance. In the case of <code>NEAR ME</code> restaurant ranking this can be something like:</p><blockquote><em><em><em>Relevance score = 2 * (1/distance) + 1.2 * rating of restaurant</em></em></em></blockquote><p>Here in the relevance score calculation, we are taking weighted sum of different factors like <em><em>(1/distance) </em></em>and <em><em>rating of restaurant</em></em>. The coefficients/weights of these factors can be arrived at by experimenting with them and choosing weights that seem to maximise the ordering conversions. But, in the case of restaurant ranking in GoFood, we want to take into consideration many factors when deciding relevance. Unfortunately, experimenting with combinations of all those factors is impossible.</p><p>Enter L<em><em>earning to rank</em></em>. Here, the problem of deciding the rank of the restaurants shown to the user is formulated as a supervised machine learning problem.</p><p>If we look at past search, click, and ordering data, we will be able to assign relevance judgements to each restaurant listing according to whether our users clicked or ordered from one of those restaurants. Restaurants that attracted higher degrees of interest will be given higher degrees of relevance.</p><p>In the below example, a relevance judgement level of 0,1 and 2 is assigned to a restaurant according to whether the user viewed, clicked, or ordered from the restaurant in the search result. The relevance judgements are relative and only intent to be monotonically increasing with increasing relevance . They say that the restaurant which the user created an order from is more relevant than a restaurant the user merely checked out by clicking on it. <strong><strong>They don’t mean that the restaurant which received the order is twice as relevant .</strong></strong></p><p>The values of each of the factors that could have played a role in the user’s decision of clicking or ordering is also shown against the restaurants.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/2376/1*X0Oe0KA7ZTU2wYa2SXS_CA.png" class="kg-image" alt="The Secret Sauce Behind Search Personalisation"/></figure><p>Three of the factors/features in the above example are marked as ‘personalisation features’ because they would change according to the user’s previous order history and location. These will be the features that will be different between Mila and Husain because of the differences in the restaurants and cuisines they have ordered from before in the past.</p><blockquote>These personalisation features are at the crux of creating personalised experiences for each user</blockquote><p>Other customer agnostic features/factors like the rating, price range, and popularity of the restaurant are also listed here. GoFood has millions of such examples where users with different tastes made different decisions when shown a set of search results. These examples can now be used to create a dataset from which the learning to rank ML algorithm can create a model to decide how relevant a GoFood user would find a restaurant given that user’s location, order history and other restaurant statistics.</p><h1 id="how-we-ranked">How We Ranked</h1><p>One way to approach this was as a point-wise ranking problem, wherein we try to predict the relevance judgement of each restaurant. Based on this, later we will predict the relevance judgement level and sort restaurants in decreasing order of predicted relevance score. This approach reduces learning to rank problem to a regression problem.</p><p>Another approach was to solve it is a pairwise ranking problem, wherein the ML model is trying to learn how to get the order of a pair of restaurants correct i.e if Restaurant A is more preferable to Restaurant B , the order (Restaurant A, Restaurant B) is correct and the order (Restaurant B, Restaurant A) is wrong.</p><p>For an ML model to be learned, we need an objective function that captures this pairwise ordering formulation . This is called a loss function or error function in ML and is the measure through which an ML model can assess how right or wrong its decision was. In pairwise ranking , this should be a function that becomes higher whenever the model misjudges a preference order and becomes lower when it is right about the preference order.</p><p>The loss/error function <strong><strong><em><em>C</em></em></strong></strong> is explained below:</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/3316/1*2sWi_7l1iI_-dRppVoaGRA.png" class="kg-image" alt="The Secret Sauce Behind Search Personalisation"/></figure><p>When this function is minimised, the model is trying to predict a score for each restaurant such that the ranking of the order of the restaurants are close the relevance judgements the users made.</p><p>The pairwise formulation is a better approach here in comparison to the point-wise approach as it is looking to get the order of restaurants right and is not trying to estimate the relevance score themselves whose values were assigned only as markers to show how some restaurants were more preferred relative to others.</p><p>We used an implementation of the LambdaMART algorithm that learns to predict relevance scores so as to minimise this pairwise loss. You can think of this as a pursuit to find the decision tree that takes in all the parameters of the restaurant and gives out a score to the restaurant . This score should be assigned in such a way as to make the pair orders right.</p><p>Once this model is trained, it can be used during search, as explained in <a href="https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a?source=friends_link&amp;sk=42397976fe914a418ac40f19545f90b7">this post</a>.</p><p>Now let’s go back to our beloved customers — Mila and Husain. The next time Mila or Husain looks for restaurants near them, the search results they see will be according to their preferences. This is because the model would look at the number of times they have ordered from each of the restaurants near them before. It would take their preferred cuisines and factors like restaurant ratings into account, and show them the restaurants that they would prefer to order from first.</p><p>The different search results Mila and Husain get after learning to rank is used to re-rank the results are shown below.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/7545/1*ALMsK5OzG3rUACrx_U3E0g.jpeg" class="kg-image" alt="The Secret Sauce Behind Search Personalisation"/></figure><p>We ran an AB test using this formulation of learning to rank and observed a relative lift of 20% in search to ordering conversions and 23% improvement in NDCG. More information on how this metric is calculated <a href="https://blog.gojekengineering.com/is-this-what-you-were-looking-for-439bf012cca6?source=friends_link&amp;sk=bdc1310acc3b6a8270f10284cb30fa53" rel="noopener">here</a>.</p><h1 id="what-we-learned">What We Learned</h1><p>One interesting thing we observed as we started experimenting with this learning to rank model was personalising search results led to the average position at which the search to order conversions happen to be much higher on the list. This is because users were increasingly seeing the restaurants that they have some affinity towards and were able to make an ordering decision without scrolling much and without spending too much time being confused where to order from.</p><p>So that’s how we rank restaurant pairs with respect to relevance based on available user data. We’ll continue to write more about how we make our products more intuitive. Stay tuned to this blog, or <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">sign up for our newsletter</a> for email updates. 👌</p><hr><p>(Special thanks to <a href="https://twitter.com/SugamAnand" rel="noopener">Sugam Anand</a> for additional design support ✌️)</p><hr><p>Want weekly updates with more of our stories? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a> ✌️</p></hr></hr>]]></content:encoded></item><item><title><![CDATA[Reducing Latency with Sidecar]]></title><description><![CDATA[How the sidecar pattern helped in our ongoing quest to reduce latency in our experimentation platform.]]></description><link>https://gojek-ghost.zysk.in/reducing-latency-with-sidecar/</link><guid isPermaLink="false">Ghost__Post__5ecb637d7aa22c4066f83f36</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 18 Nov 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_HWgBO6jgmlmk6-7_ewf7Yg.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_HWgBO6jgmlmk6-7_ewf7Yg.jpeg" alt="Reducing Latency with Sidecar"/><p>You’ve probably heard about <a href="http://bit.ly/2RGxvbg" rel="noopener">Litmus</a>, Gojek’s in-house experimentation platform. Since we built it, the adoption of Litmus across Gojek teams has been steadily increasing. More experiments are executed and more clients (in this case, Gojek teams) are integrated.</p><p>Besides this, another requirement is to integrate Litmus with other backend services directly, instead of solely with the mobile app. However, various client backend services have their own SLA and most of them are linked to latency. So, in order to client requirements, we have to reduce Litmus latency as much as possible.</p><p>In this post, we talk about our thought process behind delivering an initial sidecar design to achieve this goal,</p><h3 id="know-your-enemies">Know your enemies</h3><p>First thing first, we needed to figure out where the bottleneck was. After digging through some data, it turned out 30% of total time in a Litmus API call was dominated by database call, and the number of database calls is ~2000 qps.</p><p>Based on this fact, we decided to use cache. Now, we obviously could not use an external cache like Redis or Memcached. If we used those, we would be adding an additional call. 😑</p><p>Instead, we decided to use in-memory cache. Since Litmus was written in Clojure, we went with <a href="https://github.com/ben-manes/caffeine" rel="noopener">caffeine cache</a>, which is good enough to be used in JVM. We implemented the in-memory cache and the database calls dropped from ~2000 qps to ~10 qps. The API latency also dropped around 10%.</p><h3 id="good-but-not-good-enough-we-needed-more-">Good, but Not Good Enough. We Needed More.</h3><p>The implementation of in-memory cache and further tinkering with Litmus processes would not be enough on their own. Our next approach was to reduce the hops between client and Litmus servers.</p><p><strong><strong>How? By moving Litmus server so it is geographically closer to the client?</strong></strong></p><blockquote>Nah, we can do one better.</blockquote><p>We pulled our Litmus server as close as possible to the backend service client. To achieve this, we used <strong><strong>sidecar pattern</strong></strong>. We created a Litmus sidecar that resides in the same box as the backend service client. A Litmus sidecar can be seen as a mini version of the Litmus server that specifically serves the dedicated backend service client in the same box (VM).</p><h3 id="tweaking-the-nuts-and-bolts">Tweaking the Nuts and Bolts</h3><p>To know how effective the sidecar pattern is, we need to know the base latency of Litmus server. We created 10 new active experiments specifically to get the base latency number. With 20 concurrency and 10 request per second, the 99 percentile was 23.55 ms.</p><h3 id="need-faster-api-calls-use-grpc">Need faster API calls? Use gRPC</h3><p>We used gRPC over REST wherever we could in our Litmus sidecar. gRPC also has various features such as push/pull streaming and client-side load balancing that can be utilised for further enhancement. It’s fun stuff! 😁</p><h3 id="how-do-we-maintain-our-sidecar-without-permission-to-maintain-the-backend-service-client-box">How do we maintain our sidecar without permission to maintain the backend service client box?</h3><p>In Gojek, each team can only have permission to access its own components/boxes. It is not possible (or scalable) to access all our backend service client boxes.</p><p>We could have considered this if we had only two or three clients. However, when you’re building for an organisation of Gojek’s scale with the hope of having all teams adopt Litmus in their services, we couldn’t go down this route.</p><p>On the other hand, we still needed the ability to check the health of Litmus sidecars in every backend service client and develop a sidecar app that complies with several <a href="https://12factor.net/" rel="noopener">12 factor apps</a> criteria (treat logs as event streams and store config in the environment).</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_DpUpHDHGgk3d_jXEJYgD-w.png" class="kg-image" alt="Reducing Latency with Sidecar"><figcaption><a href="https://d33wubrfki0l68.cloudfront.net/24c41d54613afb774bff0a383043f8a47f4d0fd7/a14fb/static/img/consul-services.png">Source</a></figcaption></img></figure><p>We decided to use Consul for <a href="https://www.consul.io/discovery.html" rel="noopener">service discovery</a> and <a href="https://www.consul.io/docs/agent/kv.html" rel="noopener">key-value config</a>. In addition being easy to use and having a nice dashboard UI, Consul service discovery also supports health checks.</p><p>After we set up the infra (Consul server, agent, etc), we just needed to add our service definition config along with our litmus sidecar to the backend service client box. For the Consul KV itself, Consul supports hot reloading, which means we don’t need to restart clients’ litmus sidecar if there are config changes.</p><p>However, we needed to handle the logic of hot reloading in the litmus sidecar app by ourself. For the logging part, Gojek already has a logging tools called <a href="https://blog.gojekengineering.com/how-we-built-barito-to-enhance-logging-19f80b89496f" rel="noopener">Barito</a> that forwards the system logs so that we don’t have to access client boxes with ssh.</p><p>Here is the high-level architecture of how litmus sidecar integrates with client backend services. Instead of pointing to Litmus server address, now backend service clients only need to point to its localhost with Litmus sidecar port.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_nlCPCXxdSLGuXKvrjjBdfA.png" class="kg-image" alt="Reducing Latency with Sidecar"><figcaption>Litmus sidecar in the same box as client backend service</figcaption></img></figure><h3 id="how-is-the-data-distributed">How is the data distributed?</h3><p>As an agent of Litmus server that resides on the same box as the client, Litmus sidecar needs to have access to the same data as Litmus server.</p><blockquote><em><em>This was something we discussed long and hard. The trade off between speed and data consistency, the trade off between consistency and availability, and so on.</em></em></blockquote><p>As our purpose was to reduce latency, speed became our first class citizen. At least for now, it is okay for us to have eventually consistent data in our Litmus sidecar. We also decided to persist the data in the client box. We don’t store all Litmus server data, only what the client needs.</p><p>We wanted our Litmus sidecar as light as possible, so it does not disturb the main process in the box. Instead of using some SQL database, we decided to use KV store BadgerDB for persistence storage.</p><h3 id="how-to-synchronise-data-between-litmus-sidecar-and-server">How to synchronise data between Litmus sidecar and server?</h3><p>We came up with several ideas around this, but decided to use the simplest one for our initial design. Litmus sidecar pulls the data that it needs periodically and persists it with BadgerDB.</p><h3 id="alrighty-then-let-s-measure-how-good-our-sidecar-is">Alrighty then, let’s measure how good our sidecar is</h3><p>Using the same setup as we did in measuring base latency, the 99 percentile latency dropped to 6.91 ms. ✌</p><p>New clients are now integrating with sidecar, but we didn’t stop there. We are continuously optimising our Litmus sidecar app, and you can read more about our efforts in this <a href="http://bit.ly/2LQb6a3" rel="noopener">post</a>.</p><p>So, that was the thought process behind building sidecar to reduce latency. We believe there is still room for improvement, and would love to hear your thoughts in the comments.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-1.png" class="kg-image" alt="Reducing Latency with Sidecar"/></figure><p>Want our stories sent straight to your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-1.jpeg" class="kg-image" alt="Reducing Latency with Sidecar"><figcaption><a href="http://bit.ly/2KslIe4">gojek.jobs</a></figcaption></img></figure>]]></content:encoded></item><item><title><![CDATA[Batch Processing Pipelines for Better Data Analysis]]></title><description><![CDATA[How we generate intelligible insights from our data warehouse using batch pipelines.]]></description><link>https://gojek-ghost.zysk.in/batch-processing-pipelines-for-better-data-analysis/</link><guid isPermaLink="false">Ghost__Post__5ec2ca287aa22c4066f83b68</guid><category><![CDATA[Data]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 11 Nov 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_EbT2AH9uAMjxHrVxh5xJrw.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_EbT2AH9uAMjxHrVxh5xJrw.jpeg" alt="Batch Processing Pipelines for Better Data Analysis"/><p>By Maulik Soneji</p><p>Gojek’s <a href="https://en.wikipedia.org/wiki/Data_warehouse" rel="noopener">Data Warehouse</a>, built by integrating data from multiple applications and sources, serves as a central point of analysis that also helps generate actionable insights. Our batch pipelines process billions of data points periodically, in order to help our business teams gather an effective view of data.</p><p>This post explains our approach to building batch pipelines that leverage complex data in an efficient way.</p><p>I will start by providing some context on our data warehouse and the data we store in it, and explain the use cases of batch processing that we tackle at Gojek. Then we’ll talk about how we tackle running batch processing jobs and handling scheduling dependencies.</p><h1 id="data-warehouse-setup">Data Warehouse setup</h1><p>At Gojek, we use Google Bigquery (BQ) as a Data Warehouse. All data points ranging from booking and searches to location are published in real time using <a href="https://github.com/gojek/beast" rel="noopener"><strong><strong>Beast</strong></strong></a><strong><strong>, </strong></strong>our open-sourced tool.</p><p>We also push data from Kafka to our data lake, which is Google Cloud Storage(GCS). These data points vary in terms of the data format (which might not be relevant to the analysts). They need to gather insights from the data without needing to know how it is stored.</p><blockquote><em><em>To solve this, we wanted to create an abstraction such that the users of data only need to know about the constitution of data, and not about where the data is coming from or what format the data is stored.</em></em></blockquote><h1 id="batch-processing-use-cases"><strong>Batch processing use cases</strong></h1><p>Typical use cases of batch processing at Gojek revolve around enriching real-time data with additional data points mined from huge amounts of historical data.</p><p>A few examples of use cases include:</p><p><strong><strong>Creating a customer profile:</strong></strong></p><p>In order to provide our customers with the most relevant discount and deal vouchers, we enrich customer profiles with the last few months of the customer’s order and search history. This enables our team of data analysts and data scientists to experiment with customer segmentation and targeting. This use case has been covered in much detail by my colleague Mayank in this <a href="https://blog.gojekengineering.com/how-we-solved-user-selection-to-help-merchants-win-business-519fe5085a0e" rel="noopener">blog</a>.</p><p><strong><strong>Personalising search results:</strong></strong></p><p>In order to personalise the search results served up by our food delivery app GoFood, we leverage batch processing to gather insights about trending, popular, and highly-rated restaurants near the user that match their taste profile. More details around how we went about this use case are covered in this <a href="https://blog.gojekengineering.com/how-the-gojek-butler-serves-a-gourmet-meal-to-our-users-4a161d83052a" rel="noopener">blog</a>.</p><h1 id="running-batch-pipelines">Running Batch pipelines</h1><p>As I previously mentioned, the users of data usually don’t need to know the format in which the data is stored. They would benefit from having a unified interface to interact with data.</p><p><em><em>We leveraged Dataframes in </em></em><a href="https://spark.apache.org/" rel="noopener"><em><em>Apache Spark</em></em></a><em><em> to provide the unified interface.</em></em></p><h2 id="dataframes-or-datasets"><strong>DataFrames or Datasets</strong></h2><p>Spark provides an abstraction on top of the data underneath — called DataFrames or Datasets.</p><p>DataFrames are distributed collections of data in which data is organised in the form of columns.</p><p><strong><strong>Conceptually, a data frame becomes similar to a database.</strong></strong></p><p>Few examples of reading from Bigquery and GCS are as follows:</p><!--kg-card-begin: html--><script src="https://gist.github.com/mauliksoneji/48d7d84976ee5957de90e03ba2314540.js"/><!--kg-card-end: html--><p><em>Client to read data from bigquery into spark dataframe.</em></p><!--kg-card-begin: html--><script src="https://gist.github.com/mauliksoneji/0a8c12d3c7ecbe2c4794dbd039e03815.js"/><!--kg-card-end: html--><p><em>Client to read data from GCS into spark dataframe</em></p><p>Using these clients make it very easy for our analysts to read GCS and Bigquery data into Spark and interact with it.</p><p><strong><strong>Running Spark Jobs</strong></strong><br>We use <a href="https://cloud.google.com/dataproc/" rel="noopener">Google Dataproc</a> hosting a Spark cluster to run our batch pipelines. On each trigger of a batch job, we create an ephemeral cluster to run the job, which means that the cluster is destroyed after the batch job completes.</br></p><p>The batch job is written in <a href="https://spark.apache.org/docs/2.2.0/api/python/pyspark.html" rel="noopener">Pyspark</a>, which all our analysts are familiar with. This provides a good interface to interact with Spark Dataframes.</p><h1 id="scheduling-dependencies-between-jobs"><strong>Scheduling Dependencies between Jobs</strong></h1><p>As the Spark jobs become more complex and handle many responsibilities, it becomes important to break them down into simpler jobs that can be better managed.</p><blockquote>But this breakdown brings more challenges.</blockquote><p>We now have to make sure the related jobs are scheduled taking in mind the scheduling dependencies between different jobs.</p><p><strong><strong>For example:</strong></strong><br>If there are two jobs, the first one calculates the last 6 months of order history and the second job uses the order history to calculate the preferred locations from which the customer has ordered, it becomes important to run the first job and then schedule the second job.</br></p><p>Our solution to handle such scheduling dependencies is to use <a href="https://airflow.apache.org/" rel="noopener">Apache Airflow</a>. This is a tool to programmatically schedule and manage scheduling dependencies between different jobs.</p><p>The scheduling dependencies are written as a Directed Acyclic Graph (DAG) and we set a schedule for the DAG to run. Simple. 🙂</p><p>With Airflow, we are also able to assign retries for each job. In the instance of a job failing, Airflow will rerun the job by itself.</p><p>As a final precaution, we have also added Slack integration and StatsD metrics with Airflow, in order to get alerts for when the jobs have failed and need to be fixed.</p><p>So that’s all for this post. Hope you liked it! If you’d like to work on cool problems and help us scale a #SuperApp for Southeast Asia, make sure to check out <a href="http://bit.ly/2CvjmXv" rel="noopener">gojek.jobs</a>. Until next time. 🖖</p><hr><p>Want our updates delivered straight to your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter">Sign up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[Finding Needles in Haystacks]]></title><description><![CDATA[How Gojek’s Magneto team is building products to help automate discovery of top candidates at scale.]]></description><link>https://gojek-ghost.zysk.in/finding-needles-in-haystacks/</link><guid isPermaLink="false">Ghost__Post__5ecb5f6b7aa22c4066f83edf</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 08 Nov 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_Y5n8UwfW38RLuhXQ4wwOmg-1.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_Y5n8UwfW38RLuhXQ4wwOmg-1.jpeg" alt="Finding Needles in Haystacks"/><p><br>By Atif Haider</br></p><p>In just a few years, Gojek has grown from a small startup aggregating <em><em>ojeks</em></em> to a Super App that does over 200 million completed orders a month.</p><p>Most importantly, we’ve managed to scale our systems with a relatively lean team of engineers. However, in order to sustain this growth, we need to keep adding quality engineering talent to our ranks. To help with this, we rely on our in-house recruiters, who’ve been doing a phenomenal job. 👌</p><blockquote><strong>But the question remains — how do we continue to keep this up at scale?</strong></blockquote><p>We’ve been trying to find a solution to this question, and as is usually the case when it comes to Gojek, the answer lies in innovation. Just like every other domain we operate in, we needed to innovate in tech recruitment as well.</p><p>When our team <a href="https://blog.gojekengineering.com/gojek-acquires-aircto-expands-operations-in-india-d685c0b4db1c" rel="noopener">joined Gojek</a>, we had one clear objective — apply the learnings from our previous startup to help Gojek find innovative ways to hire top engineering talent.</p><p>This is the story of how we’re doing it.</p><h3 id="early-days-and-finding-our-north-star">Early Days and Finding Our North star</h3><p>In the first two weeks after we joined, we consulted with engineering heads, tech recruiters, and the India Inbound Marketing team. Over the course of comparing notes from many meetings, we hoped to find patterns in how Gojek hired, and how we could automate the discovery of more people with similar traits. Undertaking this exercise was at once a rewarding and challenging experience for our team.</p><p>We got interesting insights, but also ran into conflicting data. Gojek had also recently switched to a new Application Tracking Service (ATS), which brought its own set of unknowns. Navigating these unknowns and changing processes in an organisation with many fast-moving parts was our first order of business. In between all this, finding the formula for the kind of candidates we were looking for was like looking for a needle in a haystack. Most of the problems that we identified at these meetings turned out to be operational issues — an insight provided by our India MD, Sidu Ponnappa.</p><p>Meanwhile, we needed a name for our team which people could use to identify us. We named ourselves <strong><strong>Magneto</strong></strong>. To achieve our task of finding top developers, we would need the superhuman power of attraction.</p><h3 id="testing-our-powers">Testing Our Powers</h3><p>Gojek has a rigorous interview process, and we are picky about who we hire, to the point where even people outside of Gojek know how tough it is to get in.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet" data-width="550"><p lang="en" dir="ltr">Hoardings, Metro Wraps, Radio Ads by <a href="https://twitter.com/gojektech?ref_src=twsrc%5Etfw">@gojektech</a> to hire in Gurgaon are hard to miss - <br>and have heard that their selection process is one of the rigorous ones so don’t assume they are desperate to hire anyone who applies 😄</br></p>&mdash; deepakabbot (@deepakabbot) <a href="https://twitter.com/deepakabbot/status/1176710364030881797?ref_src=twsrc%5Etfw">September 25, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"/>
</figure><p>We did get one key takeaway though. All our tests and questions are designed to identify a few common traits:</p><blockquote><em><em>In a nutshell, we’re biased towards developers who are hands-on and can code; irrespective of their prior experience and pedigree.</em></em></blockquote><p>Another interesting fact: according to our internal data, a whopping 50% of candidates who go through our interview process <strong><strong><em><em>fail the first test assignment round</em></em></strong></strong>. 😮</p><p>I was surprised to see candidates from top product companies unable to get through this round.</p><p>After looking at this daunting drop-off data, and acknowledging that we were very new to Gojek’s hiring process, we decided to take baby steps. The goal: <strong><strong>hire 1 engineer for GoFood. </strong></strong>We also set up some key results to track back towards our objective.</p><h3 id="crafting-a-solution">Crafting A Solution</h3><p>We knew we needed to find top developers who could make it through our recruitment process, and then reach out to them to check if they would be interested in joining us.</p><blockquote><em>So we made this theme a problem statement, and divided it into two parts:</em></blockquote><blockquote><em><em><em>1. Discover</em></em></em></blockquote><blockquote><em><em><em>2. Nurture</em></em></em></blockquote><p>As a first step, we pulled out profiles of engineers we hired from Lever (our Application Tracking Service) and found many of them to be active on code-related online digital platforms that reflect their passion for programming.</p><blockquote>We finally knew where to start looking for our needle.</blockquote><p>Our first stop was the most obvious one — Github. Then we went to StackOverflow and finally, Twitter. StackOverflow itself hosts over 10 million developers.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_KbHxqGC8qosP6HE99pLzKQ.png" class="kg-image" alt="Finding Needles in Haystacks"><figcaption><em>StackOverflow Stats</em></figcaption></img></figure><p>There’s a lot of publicly available information on these platforms, so we wrote a bunch of scripts to pull info about developers from Github and StackOverflow. Then we tried to map their skills, contributions, popularity, and activities.</p><p>We wrote custom algorithms for Github and StackOverflow to classify developers as qualified and unqualified, based on the criteria we were looking for. We looked at various signals to check their passion for programming, and they passed a certain pre-defined threshold, we would mark them as qualified.</p><p>Once a candidate is qualified, we needed to categorise them based on skills, experience, location, and other parameters. This step also involved some manual work to clean up the data.</p><p>In order to meet our first objective, we picked around 800 candidates and reached out to them through personalised email campaigns. Since our team was quite comfortable using Python, we used Python on top of PostgreSQL to write the Nurture system to run these email campaigns (despite Python not being part of Gojek’s core tech stack).</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_GHx2ht682c0V23r-Bk5pvA.jpeg" class="kg-image" alt="Finding Needles in Haystacks"><figcaption>The Discover &lt;&gt; Nurture Flow</figcaption></img></figure><h3 id="smelling-success">Smelling success</h3><p>After rigorous follow-ups, we ended up getting a decent number of interested candidates, whom we then contacted for exploratory conversations.</p><p>This was quite the enlightening experience — and we realised Gojek is perceived as a highly tech-oriented company among developers.</p><blockquote>Over 62% of the candidates who submitted the test assignment cleared it, and by the time we finished the first cohort, we ended up hiring 3 devs.</blockquote><p>We exceeded our target by 300%. 🙌</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_rjDDcWnOZeFFDRZdM-FCdQ.jpeg" class="kg-image" alt="Finding Needles in Haystacks"><figcaption>The smile of success</figcaption></img></figure><h3 id="automation-ftw">Automation FTW</h3><p>As we succeeded in demonstrating the viability of our MVP, we had to look at the problem statement again and translate it into a scalable system. Tackling scale has always been a part of Gojek’s journey to #SuperApp status, so we decided to be prepared.</p><p>While scaling the Candidate Discovery Process, we ran into two issues:</p><ol><li>Since the discovery level was managed on spreadsheets, it required a massive manual effort to keep the data unique between each service.</li><li>Getting candidate info from different sources required a lot of data-sharing on multiple platforms. The result — repetitive processes and data duplication. 🤦‍♂️</li></ol><p>Considering these challenges, we divided the process into 3 different layers:</p><ol><li><strong><strong>Service layer:</strong></strong> Contains individual micro-service which has single behaviour — fetch details from a specific source and score, classify, and merge them based on the data available on different mediums about a candidate.</li><li><strong><strong>Messaging layer:</strong></strong> At any point in time, any individual service can connect to other services to fetch more information about the candidate. For instance, while parsing StackOverflow users, we get the user’s website and Github URLs. So, the StackOverflow service will publish candidate’s Github social id and website URL to the Github and WebScrapper services respectively. This information about the candidate is then written to the database.</li><li><strong><strong>Data layer:</strong></strong> It is a centralised MongoDB that stores all the data (even if it’s incomplete) from different sources, which can further be pushed to Nurture once it is verified.</li></ol><figure class="kg-card kg-image-card kg-width-wide"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_Aw3fPTBAj5YMdP5N2zQy9A.jpeg" class="kg-image" alt="Finding Needles in Haystacks"/></figure><p>We also dockerized all these micro-services, integrated monitoring (Prometheus), Slack alerts &amp; logging (<a href="https://github.com/BaritoLog/wiki" rel="noopener">Barito</a> — thanks to our Barito team for offering a powerful logging system).</p><p>With this automated system, we processed over 38,000 tech candidates’ profiles in a very short time, and found around 10,000 qualified candidates who passed our custom criteria.</p><p><strong><strong><em><em>This was our Aha! Moment.</em></em></strong></strong></p><p>With automation, we managed to make 13 offers to developers in a very short span of time, 6 of whom have already joined us.</p><h3 id="launching-fount">Launching Fount</h3><p>So far we had been the customers of our own product. But this needed to be bigger. We needed to get our product out to our internal recruiters to use.</p><blockquote>However, there was one problem.</blockquote><p>The Nurture system was written in Python, and we primarily use Ruby, Go, Java, and Clojure at Gojek. When you rely on tech stack not extensively used by the larger org, you end up building your own tooling systems to test and deploy on the existing infrastructure (which is already stable and working for other teams).</p><p>Therefore, we decided to re-write the Nurture system in Clojure. I had prior experience of writing programs in Common Lisp &amp; Clojure. To my surprise, the team was also excited to try out functional programming (I will soon write a separate article on our experience in building API in Clojure. Pinky promise!).</p><p>There were a few hiccups in getting things moving around the infra and security systems, but that was a given considering we were fairly new to the existing infrastructure. We built the Nurture API in Clojure and a frontend in Reactjs. In 30 days, we were up and running with our product.</p><blockquote>We call it Fount.</blockquote><p>Fount lists all the qualified discovered candidates; leads our recruiters can then follow up on to check their interest and move into our hiring funnel. Currently, a few beta users (our internal tech recruiters) are trying out the system. 🖖</p><p>We have already redesigned Fount and this is how it looks now. Thanks to <a href="https://asphalt.gojek.io/" rel="noopener">Asphalt </a>— our very own design system at Gojek.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_ryHN4fsHSsi0gmiDk64F7w.png" class="kg-image" alt="Finding Needles in Haystacks"><figcaption>AI Powered Candidate Discovery Platform</figcaption></img></figure><h3 id="the-way-forward">The Way Forward</h3><p>This was just the first step in our journey of streamlining recruitment at Gojek. We’re planning to improve our sourcing algorithms, find new sources, improve the candidate verification process, and build new features on Fount.</p><p>We’re also going to attack different tech recruiting problems and bring automation wherever possible in order to hire top developers (and offer up a great candidate experience).</p><p>That’s all from us for now. We’d love to hear your feedback in the comments.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-2.png" class="kg-image" alt="Finding Needles in Haystacks"/></figure><p>For Gojek updates delivered straight to your inbox, <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">sign up for our newsletter!</a></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA.jpeg" class="kg-image" alt="Finding Needles in Haystacks"><figcaption><a href="http://bit.ly/2PZliiS">gojek.jobs</a></figcaption></img></figure>]]></content:encoded></item><item><title><![CDATA[The Road to a Merchant SuperApp]]></title><description><![CDATA[How we tried, failed, and tried again — to build a full-fledged platform for our merchant partners.]]></description><link>https://gojek-ghost.zysk.in/the-road-to-a-merchant-superapp/</link><guid isPermaLink="false">Ghost__Post__5ec2d7d17aa22c4066f83c9a</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 01 Nov 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1.gif" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1.gif" alt="The Road to a Merchant SuperApp"/><p>By Sooraj Rajmohan</p><p>Earlier this year, during a visit to Gojek’s HQ in Jakarta, a few of us from the Gojek Marketing team had a craving to try Indonesia’s famed fried delicacy — <em><em>pisang goreng.</em></em></p><p>Today, fulfilling such food cravings is a simple process. GoFood — Gojek’s food delivery product — lists 400,000+ merchants. You search for the outlet you want to order from, select the item and quantity, check out, and pay either via cash or Gojek’s digital wallet GoPay. Then, you sit back and watch the little Gojek driver partner on the screen zoom their way to the restaurant, and bring you some fried banana goodness. 😍</p><p><strong><strong>Simple. Fast. Reliable.</strong></strong></p><blockquote>Rewind a few years, and things didn’t look so good.</blockquote><h1 id="first-some-context">First, some context</h1><p>When GoFood launched in 2015, expansion and adoption happened rapidly. The orders started piling in, and we were struggling to keep up with demand. Initially, we’d simply list food merchants on our marketplace, send demand their way, and fulfil it through our fleet of driver partners.</p><p>We were building for our consumers and driver partners, but merchants were always a key component of our ecosystem. If Gojek is an iceberg, the consumer-facing Super App is the part above water. In this story, we’ll dive beneath the surface to explore another key component — GoBiz, our merchant SuperApp.</p><blockquote>But before GoBiz, there was GoResto.</blockquote><h1 id="the-merchant-problem">The Merchant Problem</h1><p>If we had ordered ourselves that <em><em>pisang goreng</em></em> in the early days of GoFood, things would have worked very differently.</p><p>You see, merchants were onboarded by the GoFood team by uploading their menus to our systems. We’d look through these menus to find our fried banana of choice, and make an order, which would be relayed directly to a driver partner. This partner would then go to the restaurant and place the order (which is when the merchant partner gets involved in the process).</p><p>So, while our bananas are fried, the driver partner would wait around, and when the order is ready, pay in cash. The problem with this approach was that there was no record of the transaction besides a booking on GoFood and a receipt handed to the driver partner.</p><p>This was an inefficient system, for driver partners, and our customers.</p><blockquote><em><em>Oh, and those merchants? Things weren’t rosy for them either.</em></em></blockquote><p>Let’s assume our <em><em>pisang goreng</em></em> place is a GoFood partner (meaning Gojek collects commissions for the increased demand we send their way), and also part of a larger chain. When we place the order, GoFood will assign it to one outlet of the chain. However, our driver partner may decide to visit another outlet and pick up the order from there.</p><p>At the end of the month, our restaurant partners would be invoiced for commission that was due to us, based on sales as reported by the GoFood app. This meant we were charging some merchants commission for sales their outlet may have never made.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/428/1*-ZP7pyLDGJo31gjM1kbr2Q.jpeg" class="kg-image" alt="The Road to a Merchant SuperApp"/></figure><p><strong><strong>We spent a lot of time and resources addressing merchant complaints. </strong></strong>🤦‍♂️</p><blockquote>Then there was the matter of control.</blockquote><p>If a merchant partner was not open for business on a particular day, wanted to update their menu, or indicate items as out of stock, they had to call Gojek Customer Care. During this time, orders might still be coming in.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/723/1*7mru-w9gwgvBTO-wReUymw.jpeg" class="kg-image" alt="The Road to a Merchant SuperApp"/></figure><p><strong><strong>Let’s just say we weren’t doing ourselves any favours. 🤷🏻‍♂️</strong></strong></p><p>There was a lot that needed fixing here, and it could only be done by integrating merchants more deeply into our ecosystem. So that’s what we did.</p><h1 id="the-birth-of-goresto">The birth of GoResto</h1><p>Towards the end of 2016, a concept was developed for an app that would cater to GoFood merchant partners, and by early 2017 GoResto — which is what we called it at the time — was ready. You can read more about the product research process that went into making GoResto <a href="https://blog.gojekengineering.com/whats-cooking-diving-into-kitchens-for-go-biz-e01051bfdc98" rel="noopener">here</a>).</p><p><strong><strong><em><em>With GoResto, we addressed some of the problems outlined earlier.</em></em></strong></strong></p><h2 id="1-electronic-payments">1. Electronic payments</h2><p>All of Gojek’s driver partners had GoPay e-wallets associated with their accounts. With GoResto, we did the same for GoFood merchants. Transactions between driver and merchant partners would now be wallet-to-wallet, not cash. Gojek would deduct any applicable commission immediately from the merchant wallet. This made the reconciliation process with merchants simpler.</p><h2 id="2-pin-exchange-for-restaurant-verification">2. PIN exchange for restaurant verification</h2><p>To eliminate fraud, driver partners would also need to share a PIN with the merchant while picking up the order. This electronic handshake helped us verify they were indeed picking up the right order from the right outlet.</p><p>It was a decent solution. If all went according to plan, we could breathe easy.</p><blockquote>As you might have guessed, all did not go according to plan. 🙇‍♂️</blockquote><p>In the first iteration, the wallet creation process required collaboration with the GoPay team, which was itself facing bandwidth constraints due to rapid growth (which we’ll talk about a little later).</p><p>Also, the merchant onboarding to GoResto at this point was still a manual process. In our first month, we onboarded only 26 merchants. 😣</p><p>We needed a more scalable solution.</p><p>Here’s a quick note on Gojek company culture. When the chips are down, it’s important for organisations to have core values to guide decision-making. One of our values happens to be:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1326/1*AcfpMzeJqM2bj5x8TedY7A.jpeg" class="kg-image" alt="The Road to a Merchant SuperApp"/></figure><p>This line is an affirmation to all stakeholders to take the best decision for a particular situation based on available information. Such decisions are then respected by everyone else.</p><p>We made two drastic decisions:</p><ol><li>Merchant onboarding was completely frozen until we could build a platform to automate the process.</li><li>Engineers from the Merchants team were embedded within GoPay, building required capacities on GoPay systems while core GoPay engineers continued work on scaling the platform.</li></ol><blockquote>In three months, as summer rolled around, GoResto was back.</blockquote><p>We weren’t out of the woods yet though. All this was happening before Gojek had deprecated its legacy codebase, <a href="https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf" rel="noopener">Stan Marsh</a>, in favour of microservices, so system stability was not exactly excellent. As a result, we still faced sync issues between GoFood and GoResto order management systems. This, in turn, began to reflect on us publicly.</p><p><strong><strong>Our app store rating at this point slid down to 3.2.</strong></strong></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/794/1*tK41Ht4hzRXSuKNR5w2qxA.jpeg" class="kg-image" alt="The Road to a Merchant SuperApp"/></figure><h1 id="make-it-work-then-make-it-better">Make It Work, Then Make It Better</h1><p>We clearly had a long way to go to make GoResto the app our merchants deserved. Things were bad, but as they say — sometimes the only way out is through.</p><p><strong><strong>Challenge accepted. 💪</strong></strong></p><p>First things first, we went about fixing the sync issues by building a second system to replace our unreliable version. Not only was this accomplished, but all onboarded merchants were migrated to the new system, with <em><em>zero downtime. </em></em>Read more about how this was done <a href="https://blog.gojekengineering.com/zero-downtime-traffic-migration-at-go-food-17ba413eb8c2" rel="noopener">in this post</a>.</p><blockquote><em><em>One small win.</em></em></blockquote><p>Now for the real problems, giving merchants the control they needed over how they were represented on GoFood. The first self-serve feature we introduced to GoResto was allowing merchants to update their restaurant status in real time.</p><blockquote><em><em>Another small win.</em></em></blockquote><p>We had unlocked a critical component in product design — empathy for the people you’re building for. The question now was — what can we do that will make life easier for our merchants?</p><p><em><em>Item availability?</em></em> Understood.<br><em><em>Menu updation?</em></em> Got it.<br><em><em>Pricing adjustments?</em></em> Why not.<br><em><em>Add categories? Move items between categories? Update images?</em></em></br></br></br></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/522/1*bRzkmDwhHIrGOEJDz45a1A.jpeg" class="kg-image" alt="The Road to a Merchant SuperApp"/></figure><blockquote>Done, done… and done. ✅</blockquote><p>Our systems were stable, early teething troubles were addressed, we were finally solving the problems that needed solving.</p><h1 id="build-it-right-and-they-will-come">Build It Right, And They Will Come</h1><p>As GoResto grew in functionality, we began</p><p> slowly earning back the goodwill of our merchant community. Soon, our app store rating began to reflect that.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1864/1*j3tGYn7EvCzlh46jk5cyPw.png" class="kg-image" alt="The Road to a Merchant SuperApp"><figcaption>App store ratings reflecting how customer goodwill can be earned back ✌️</figcaption></img></figure><p>We didn’t need to push GoResto to merchants anymore, it was adopted due to the ease of doing business it offered.</p><blockquote><em><em>It was long overdue, but we had accomplished what we had set out to do. There was finally a moment to sit back and enjoy the sunrise.</em></em></blockquote><p>Or so we thought.</p><p>The rest was short-lived. Southeast Asia was abuzz with activity. <a href="https://www.blog.google/documents/47/SEA_Internet_Economy_Report_2019.pdf" rel="noopener">According to this report</a>, the value of the Internet economy in the region tripled in the years since 2015. The Gross Merchandise Value (GMV) projection for 2025 is estimated to be $300 billion.</p><blockquote>To put that in perspective — in 2016, that projection was $100 billion.</blockquote><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/884/1*cntOWzHiq2mS76fgLCSD7Q.jpeg" class="kg-image" alt="The Road to a Merchant SuperApp"/></figure><p>Even as GoResto was being built, there was another behemoth stirring under the rich waters of Indonesia’s digital payments landscape. GoPay, which had been rapidly growing in this favourable environment since its arrival in 2016, was now being used by roughly three-quarters of digital payments users in Indonesia.</p><p><strong><strong>But we wanted more.</strong></strong></p><p>In 2018, GoPay introduced offline acceptance, bringing a whole new category of merchant partners into our ecosystem.</p><blockquote>Our existing solution wasn’t good enough anymore. It was time to evolve.</blockquote><p>Keep watching this space for the continued story charting GoResto’s evolution into our full-fledged merchants platform — GoBiz.</p><hr><p>Want our updates beamed straight to your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[A New Era for Gojek]]></title><description><![CDATA[Nadiem Makarim appointed Indonesia’s Education and Culture Minister; Kevin Aluwi and Andre Soelistyo now Co-CEOs]]></description><link>https://gojek-ghost.zysk.in/a-new-era-for-gojek/</link><guid isPermaLink="false">Ghost__Post__5ec2abae7aa22c4066f83a7d</guid><category><![CDATA[News]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Wed, 23 Oct 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_56JSXYmtxSkZlomUkdWE_A.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_56JSXYmtxSkZlomUkdWE_A.jpeg" alt="A New Era for Gojek"/><p>By Apoorva Babu</p><p>Gojek founder and former CEO, Nadiem Makarim has today been appointed to a role within the Indonesian government as Minister of Education and Culture.</p><p>Nadiem’s departure from Gojek has seen Kevin Aluwi and Andre Soelistyo take over responsibility for running the company as co-CEOs, with a focus on ensuring the long term sustainability of the business. Nadiem, Andre and Kevin have been running the business together for a number of years, which will ensure that this leadership transition will run smoothly.</p><p>Nadiem’s news was communicated in an email to all Gojek staff that was sent today. In the email, he looked back on how the company has grown over the past nine years and also set out his hopes for the future of the business:</p><p><em><em>“We started this company with nothing, other than a deep desire to change things for the better. We saw that the streets of Jakarta were a mess and that there was an informal community of ojek drivers who could easily act as a huge part of the solution to that mess, if only they were organised and working efficiently.</em></em></p><p><em><em>“With just that initial desire to improve life for everyone, as well as a large amount of support from countless friends, partners and stakeholders, we’ve created Gojek. An iconic company that flies the flag for the future of Indonesia and Southeast Asia.</em></em></p><p><em><em>“I will leave Gojek in the capable hands of Andre Soelistyo and Kevin Aluwi as co-CEOs, both of whom have played central roles in moving the company along its path from that office in South Jakarta onto the global stage.</em></em></p><p><em><em>“We got very lucky as we progressed along that path, but I believe that luck in business only really becomes a valuable commodity if you have the brilliant minds needed to take advantage of it. Kevin and Andre have mentored me to be the leader I am today. They are quite simply Gojek’s best. They have been running this company for a number of years and I have complete faith not just in their technical skills and ability to execute flawlessly, but also in their integrity and their desire to do the right thing every step of the way.</em></em></p><p><em><em>“High emotions are involved in running a company like Gojek but Andre and Kevin are always the steady voices of reason, approaching problems with intelligence and compassion. I couldn’t ask for better successors as the Gojek movement begins its next stage of growth.”</em></em></p><p>A joint statement released by Andre and Kevin said: “When a friend and mentor leaves a business you have built together, there is always going to be some sadness, but we are both determined that Gojek will go from strength to strength. We will continue to implement our vision as we focus on what the Gojek of the next ten years is going to be like.</p><p>“This company has changed the lives of so many people in Indonesia and around the region, and our key priority is to ensure that we can continue to act as a positive force in society for the foreseeable future.”</p><p>Under Andre and Kevin’s management, Gojek has grown exponentially, to process over two billion transactions a year. The company’s fundraising efforts have attracted some of the world’s most exciting companies including Google, Tencent, Mitsubishi, Visa, AIA and Astra, with Series F set to raise well over US$2bn. The company has also launched operations in Singapore, Thailand and Vietnam, while the Gojek app has become the most-used on-demand application in Indonesia, where its food and payments businesses have overtaken transport to become the largest businesses within the group.</p><p>With the new structure, Andre will focus on corporate functions and management of capital allocation, international expansion as well as the payments and financial services businesses, while Kevin will focus on the product development elements of the Gojek business as well as marketing, organisational development and the transportation and food delivery businesses.</p><p>Since co-founding Gojek, Kevin has held significant leadership roles across product and functional teams within the organisation. He has used his background in Business Intelligence to pioneer the use of data for decision-making across the Gojek business. He has also assembled deep technology expertise across the data, engineering and product teams, with a focus on enhancing the platform’s overall user experience. Prior to his role at Gojek, Kevin spent time at Zalora Indonesia, Merah Putih Incubator and Salem Partners.</p><p>Similarly, Andre has played a pivotal role in laying a solid foundation for Gojek’s rapid growth. He has overseen over US$4bn of fundraising, which attracted key investors such as Google, Tencent, Astra, KKR and Warburg Pincus. He has also laid the foundation for the company’s business strategy for long term sustainability. Prior to joining Gojek, Andre was an Executive Director at Northstar Group — Indonesia’s largest private equity fund, and was previously the Head of Corporate Finance at Delta Dunia Makmur.</p><hr><h1 id="leading-the-next-phase-of-gojek-a-statement-from-gojek-co-ceos-kevin-aluwi-and-andre-soelistyo"><strong>Leading the next phase of Gojek — a statement from Gojek Co-CEOs, Kevin Aluwi and Andre Soelistyo</strong></h1><p>Gojek’s new co-CEOs Kevin Aluwi and Andre Soelistyo have today released a statement following the announcement that Founder Nadiem Makarim has accepted a position in President Joko Widodo’s new cabinet.</p><p>Andre and Kevin have been running the business along with Nadiem, for a number of years, which will ensure a smooth leadership transition. In addition, it has today been revealed that Gojek commissioner Garibaldi Thohir will become President Commissioner to lead the company’s non-executive board. Nadiem will no longer retain any executive or advisory role in the company.</p><p>Under Kevin and Andre’s management, Gojek has grown exponentially to process over two billion transactions a year. The company’s fundraising efforts have attracted some of the world’s most exciting companies including Google, Tencent, Mitsubishi, Visa, AIA and Astra, with Series F set to raise well over US$2 billion. The company has also launched operations in Singapore, Thailand and Vietnam, while the Gojek app has become the most-used on-demand application in Indonesia, where its food and payments businesses have overtaken transport to become the largest businesses within the group.</p><p><strong><strong>The joint statement said:</strong></strong></p><p>“We would both like to thank Nadiem for his vision and for working with us over the past few years to create something that has become bigger and more impactful than any of us ever imagined. We are very proud and honored that our founder will move on to create impact at a larger scale, benefiting the whole nation.</p><p>“Nadiem leaves after an amazing nine years spent building the company from just an idea, into a multi-billion dollar business that reduces friction in the lives of people throughout Southeast Asia, while providing a source of income for millions. His achievements have been a source of inspiration to everyone at Gojek and he leaves the business at a time when there’s never been more excitement about its future potential. We now have over two million driver partners across Southeast Asia and over 500,000 merchants, all of whom together process over two billion transactions annually.</p><p>“Both of us have been running the Gojek business alongside Nadiem for some time, so there will be no disruption to the day to day operations or the amazing growth we have enjoyed over the years. Andre will focus on corporate functions and management of capital allocation, international expansion as well as payments and financial services, while Kevin will focus on the product development elements of the Gojek business as well as marketing, organisational development and the transportation and food delivery businesses.</p><p>“We are well prepared for the future and this is due in large part to the many outstanding industry leaders that have joined us over the past few years, and the collective vision and execution of the entire Gojek team.</p><p>“We would like to conclude by thanking the government of Indonesia for recognising the significance our business has had on society. We will respect the process the Palace has set out by not going into too much detail before tomorrow’s inauguration. We would also like to wish Nadiem the very best of luck as he embarks on this very important mission.”</p><p>Since co-founding Gojek, Kevin has held significant leadership roles across product and functional teams within the organisation. He has used his background in Business Intelligence to pioneer the use of data for decision-making across the Gojek business. He has also assembled deep technology expertise across the data, engineering and product teams, with a focus on enhancing the platform’s overall user experience. Prior to his role at Gojek, Kevin spent time at Zalora Indonesia, Merah Putih Incubator and Salem Partners.</p><p>Similarly, Andre has played a pivotal role in laying a solid foundation for Gojek’s rapid growth. He has overseen over US$4 billion of fundraising, which attracted key investors such as Google, Tencent, Astra, KKR and Warburg Pincus. He has also laid the foundation for the company’s business strategy for long term sustainability. Prior to joining Gojek, Andre was an Executive Director at Northstar Group — Indonesia’s largest private equity fund, and was previously the Head of Corporate Finance at Delta Dunia Makmur.</p><p>—</p><p><strong><strong>A number of Gojek investors have expressed support for the new arrangement:</strong></strong></p><p><strong><strong>Caesar Sengupta, General Manager and VP, Payments and Next Billion Users, Google</strong></strong> said, “Gojek continues to innovate on behalf of millions of users, and are a leading light in Indonesia’s new economy. We look forward to continuing to partner closely with Andre and Kevin as they take over leadership of this Indonesian champion.”</p><p>—</p><p><strong><strong>Poshu Yeung, Vice President, International Business Group of Tencent</strong></strong> said, “We wish Nadiem all the best as he moves into his new role, and congratulate Andre and Kevin on their new appointment. Gojek has achieved market leadership in the ride-hailing market in Indonesia and is expanding its leadership in various verticals such as food delivery and digital payments. We look forward to partnership with Andre and Kevin, and believe that their leadership will bring Gojek to the next level of development in Indonesia and beyond in Southeast Asia.”</p><p>—</p><p><strong><strong>Jeffrey Perlman, Managing Director, Head of Southeast Asia, Warburg Pincus</strong></strong> said, “Andre and Kevin are exceptional talents and have been playing a key role in driving Gojek’s growth. We have seen firsthand the leadership transition and seamless execution as they have been working closely to grow the business into the size and scale that it is today.</p><p>“I have a lot of respect for Nadiem and would definitely like to applaud him on his mission to improve lives across Indonesia and I am very confident that Gojek will continue to thrive and develop into a true global player in the capable hands of Andre and Kevin.”</p><p>—</p><p><strong><strong>Ashish Shastry, Co-Head of Asia Pacific Private Equity and Head of Southeast Asia at KKR</strong></strong> said, “Gojek has seen phenomenal expansion across verticals both in Indonesia and overseas in recent years, in large part to the company’s impressive management team and deep bench of committed and talented executives. We congratulate Andre, Kevin and Nadiem on each of their new roles within and outside Gojek, and we’re excited to see the company continue to pursue its bold vision for growth under the very capable leadership of Andre and Kevin. On a personal note, I’ve known Andre, Kevin and Nadiem from pre Gojek days and I’m very confident that they will all deliver lasting impact in their new roles.”</p><p>—</p><p><strong><strong>Shailendra Singh, Managing Director, Sequoia Capital (India) Singapore said</strong></strong>, “Andre and Kevin are both dynamic, mission-driven leaders who we have worked closely with for several years; they have played a critical role in driving Gojek’s trajectory and execution. Gojek has made an incredible impact in Indonesia since we partnered with the company in 2015, touching the lives of millions of consumers and adding billions to the country’s economy. We couldn’t be more optimistic about the company’s future and its continued positive impact to Indonesia’s economy and society. We are grateful to Nadiem for his visionary leadership of Gojek since its founding, but we are equally optimistic that Andre and Kevin will lead the company to newer heights.”</p><p><strong><strong>About Gojek:</strong></strong></p><p><a href="https://www.gojek.io/" rel="noopener">Gojek</a> is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, getting a massage and two dozen services. It is Indonesia’s first and fastest-growing unicorn building an on-demand empire across Southeast Asia.</p><p>The Gojek app was launched in 2015, and is now the largest consumer transactional technology group on a GTV-basis in Southeast Asia.</p><p>As of June 2019, the Super App and its ecosystem have been downloaded by more than 155 million users across the region, with more than 2 million driver partners registered, up to 500,000 merchant partners, and over 60,000 service providers.</p><hr><p><strong><strong>For media queries, contact apoorva.babu@go-jek.com.</strong></strong></p></hr></hr>]]></content:encoded></item><item><title><![CDATA[How We Hire Designers at Gojek]]></title><description><![CDATA[Want to be part of Gojek’s design team? Here’s what you need to know before applying.]]></description><link>https://gojek-ghost.zysk.in/how-we-hire-designers-at-gojek/</link><guid isPermaLink="false">Ghost__Post__5ec2ca657aa22c4066f83b70</guid><category><![CDATA[Design]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 27 Sep 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_ioAAVVGoP9Ib1_l7wFS33g.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_ioAAVVGoP9Ib1_l7wFS33g.jpeg" alt="How We Hire Designers at Gojek"/><p>By Claudia Salim</p><p>Being part of Gojek’s Design team is an experience that is at once challenging and rewarding. The goal: Create a cohesive visual language for a #SuperApp that does everything, and help millions understand the brand and its identity.</p><p>The objective of this post is to help aspiring designers who want to join us in accomplishing this mission understand our hiring process better.</p><blockquote>But first, allow us a round of introductions.</blockquote><p>We are a group of about 100 people, spread across two countries; Indonesia (Jakarta) and India (Bangalore). and five teams — Communication Design, Writing, Design Operations, Interaction Design, and Product Design.</p><p>We work very closely with different functions and products in the organisation, and go to great lengths to make sure we deliver a world-class experience to our users.</p><blockquote><em><em>Now that you have some context, let’s get down to business.</em></em></blockquote><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1400/0*n-5IMq-CitcQb8NX.png" class="kg-image" alt="How We Hire Designers at Gojek"><figcaption>A glimpse from a Product Design case study</figcaption></img></figure><p>Our hiring process consists of multiple steps:</p><h1 id="1-connect-with-recruiters"><strong>1. Connect with recruiters</strong></h1><p>One of many things our Design Operations team puts focus on is hiring. We have two channels for applications that you can connect with: <a href="https://www.gojek.io/all-open-positions?d=design" rel="noopener">our website careers page</a>. We receive a number of applications every day, and the ones that catch our attention are the ones that provide a structured portfolio and display a strong motivation to join us. It usually takes 48 hours for us to analyse your profile and get back to you.</p><h1 id="2-a-friendly-telephonic-conversation"><strong>2. A friendly telephonic conversation</strong></h1><p>If we like what we see on your profile, we will invite you for a 15–30 minute phone call with one of our recruiters. This will revolve around the Design Team itself, the opportunity we have available, and our expectation of the role. However, do remember this conversation goes both ways. Besides learning about you and your design experiences, we’d love to hear about your aspirations, and the expectations you have of us.</p><h1 id="3-portfolio-review"><strong>3. Portfolio review</strong></h1><p>This is why having a solid portfolio is paramount. We involve 4–5 of our designers to review it, based on the attributes that we prioritise. This is an important stage, so please make sure you build a structured and detailed portfolio that highlights your approach to arrive at your eventual design. Don’t forget to enclose your designs which are live in production! You can usually expect a response from us within three days in most cases.</p><h1 id="4-portfolio-call"><strong>4. Portfolio call</strong></h1><p>Seeing the designs is one thing, but understanding the thought process behind it is equally important to us. To understand this better, we set up a 60 minute call with 5 of our designers, during the course of which you can take us through your portfolio. <strong><strong>Do pick one or two of your most interesting projects.</strong></strong> Your thinking process and problem-solving capability should be the focus, along with how you measure your design results and the impact it brings.</p><h1 id="5-solving-a-problem-with-the-gojek-design-team-in-a-collaborative-environment"><strong>5. Solving a problem with the Gojek Design Team in a collaborative environment</strong></h1><p>If you pass the portfolio call with a positive result, you will be invited to the Gojek office for a three-hour collaborative problem-solving session.</p><p>This process allows us to give you more context on how we solve problems. For us, the only way to evaluate how good a designer you are is by doing an exercise together. Gojek style — case study session!</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1400/0*xwFfEziJIkWhxpSd.png" class="kg-image" alt="How We Hire Designers at Gojek"><figcaption>A brainstorming session with Gojek Design panels.</figcaption></img></figure><p>The onsite case study session consists of a mini design sprint and brainstorming time.</p><blockquote>Don’t let all this stress you out though, we are not expecting absolute perfection here.</blockquote><p>The idea is to collaborate and solve a problem together. Focus on the problem, not the solution. Drawing a wireframe is easy, but what is the solution and how you approach it is more important to us. Believe in yourself, there are no universal truths here.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1400/1*CxdmTOUmCNR57DLhiZHpcQ.png" class="kg-image" alt="How We Hire Designers at Gojek"><figcaption>Problem-solving in the onsite case study session.</figcaption></img></figure><h1 id="6-bar-raiser"><strong>6. Bar raiser</strong></h1><p>If you’ve reached this stage, you definitely have the skills. Now, it’s time to evaluate how well you fit in at Gojek in general. To evaluate this, you’ll meet our Head of Design. Now that you have gained context from our technical rounds, we will discuss your expectation from us once again.</p><blockquote><em><em>Also, as always, feel free to ask questions.<em> 🙂</em></em></em></blockquote><p>This is our last interview round, so take a breather. We will usually let you know the result in one day. If all goes according to plan, this entire process should be completed within two to three weeks. The last step will involve us making an offer — which means we are ready to have you on the team. Congratulations! 🙌 💚</p><p>So, do we sound like the kind of team you’d like to be a part of? Build your portfolio and apply to our open positions!</p><p>Follow our work <a href="https://www.instagram.com/designatgojek/?hl=en" rel="noopener">Instagram</a> and <a href="https://twitter.com/gojekdesign?lang=en" rel="noopener">Twitter</a>, and read more about how we solve design challenges for Gojek in this blog’s <a href="https://blog.gojekengineering.com/design/home" rel="noopener">Design section</a>.</p><hr><p>For more stories like this delivered to your inbox. <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[From Novice to Code Master]]></title><description><![CDATA[How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.]]></description><link>https://gojek-ghost.zysk.in/from-novice-to-code-master/</link><guid isPermaLink="false">Ghost__Post__5ec2ca6c7aa22c4066f83b74</guid><category><![CDATA[Culture]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 16 Sep 2019 18:17:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_ktwn_4xTyzI4onUAYxZd8Q.png" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_ktwn_4xTyzI4onUAYxZd8Q.png" alt="From Novice to Code Master"/><p>By Ali Qornan</p><p>How does one become a master at something? Let’s take music as an example. It helps to know the theory and to understand the mechanics of your instrument. It also helps to have talent. Having a good partner to watch your back doesn’t hurt either. But there’s more to it.</p><p>Why are <a href="https://en.wikipedia.org/wiki/The_Beatles" rel="noopener">The Beatles</a>, who formed in Liverpool in 1960, considered one of <a href="https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1" rel="noopener">the greatest bands in history</a>? Why doesn’t everyone else achieve the same level of success?</p><blockquote>The difference between master and beginner is the amount of practice.</blockquote><p>The Beatles applied the fundamentals they learned over and over again, using feedback to get better every time. All told, they performed for 270 nights in just over a year-and-a-half. By the time they had their first taste of success in 1964, they had performed live an estimated 1,200 times. Most bands today don’t perform that much in their entire career.</p><h3 id="the-10-000-hours-rule">The 10,000 Hours rule</h3><p>In the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at Berlin’s elite Academy of Music conducted a <a href="http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF" rel="noopener">study</a>. With the help of the Academy, they interviewed twelve expert pianists (8 men and 4 women) and 12 amateurs (7 men and 5 women).</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/912/1*XesRz3d5FMCzIOfm7Yk3hA.png" class="kg-image" alt="From Novice to Code Master"/></figure><p>The amateurs never practiced more than about three hours a week over the course of their childhood, and by the age of twenty, they had totaled two thousand hours of practice. The experts, on the other hand, steadily increased their practice time every year, until by the age of twenty, they had reached ten thousand hours.</p><blockquote><em><em>“To become a chess grandmaster also seems to take about ten years. (Only the legendary Bobby Fisher got to that elite level in less than that amount of time: it took him nine years.) And what’s ten years? Well, it’s roughly how long it takes to put in ten thousand hours of hard practice. <strong><strong>Ten thousand hours</strong></strong> is the magic number of greatness.”</em></em></blockquote><blockquote><em><em>Malcolm Gladwell, in his book “<a href="http://amzn.to/wgo1hw" rel="noopener"><em>Outliers: The Story of Success</em></a><em>”</em></em></em></blockquote><p>The interesting thing about that number, of course, is that ten thousand hours is an enormous amount of time. It’s all but impossible to reach that number all by yourself by the time you’re a young adult. This would require encouraging parents and some measure of wealth, which would avoid the need to hold down additional jobs that would eat into valuable practice time.</p><h3 id="what-happens-in-the-software-industry">What Happens in the Software Industry</h3><p>In the software industry, we take developers trained in theory and throw them straight into the deep-end, working on a project with no real precedent to draw from. It’s like taking a group of kids to fight against the big gang in the town. But that is not an issue because, in software engineering, we do our practicing on the job, and that’s why we make mistakes on the job. But at the end of the day, we want to be great while still managing the objectives. For that purpose, we need to find ways of splitting the practice from the profession. A practice method that is effective and without taking up too much time.</p><blockquote><em><em>This is where CodeKata comes in.</em></em></blockquote><h3 id="the-codekata">The CodeKata</h3><p><a href="https://en.wikipedia.org/wiki/Kata" rel="noopener"><strong><strong>Kata</strong></strong></a> is an exercise in Karate to execute a specified series of a variety of moves, with stepping and turning, while attempting to maintain perfect form. It teaches the student about proper form and position to helped them visualize different scenarios for each motion and technique. Traditionally, kata is taught in stages. Previously learned kata are repeated to show better technique or power as a student acquires knowledge and experience. It is common for students to repeat every kata they have learned but at an improved level of quality.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/670/1*icPku4JdhwTHMvyV7uPLZw.gif" class="kg-image" alt="From Novice to Code Master"><figcaption>Sandy Vs. Spongebob</figcaption></img></figure><p><strong><strong>CodeKata</strong></strong> is an attempt to bring this element of practice to software development. The intent behind CodeKata is similar to Karate Kata. Each is a short exercise. It repeated multiple times, adding little improvements in each cycle. Some involve programming and can be coded in many different ways. Some involve thinking about the issues behind programming and design. These are unlikely to have a single correct answer.</p><blockquote>Remember that the point of the kata is not arriving at the correct answer. The point is the stuff you learn along the way. The goal is the practice, not the solution.</blockquote><h3 id="how-is-this-accomplished-at-gojek">How Is This Accomplished at Gojek?</h3><p>At Gojek, there’s a program for employees called <a href="https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9" rel="noopener">Engineering Bootcamp</a>. Basically, it is weeks of intense hands-on learning designed to unlearn and equip skills needed to be a world-class engineer.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/3840/1*uo6NJ-s_43bjcY2V_JDSPQ.jpeg" class="kg-image" alt="From Novice to Code Master"><figcaption>Core Engineering Bootcamp</figcaption></img></figure><p>At Bootcamp, the way coaches taught us (participants) is similar to CodeKata. We have a code drill session in the afternoon to solve one problem by using Java. After the class ends, we solve the same problem again as homework in the evening using Ruby. There are many things we did in our code drill session, that really helped us develop in CodeKata. Those are:</p><h3 id="1-set-rules">1. Set Rules</h3><p>We have rules called <strong><strong>Non-Negotiable Etiquette</strong></strong>. If you violate one of the rules, you have to <em><em>rm -rf</em></em> your code and start it again from scratch. What is <em><em>rm -rf</em></em>? It is a basic command on Unix system to remove files or directories from the machine forever.</p><h3 id="non-negotiable-etiquette">Non Negotiable Etiquette</h3><p>If you violate one, rm -rf! never love your code &lt;/3</p><hr><ol><li>Indentation and spacing between code constructs (classes/methods/specs) must be consistent.</li><li>Use only spaces (no tabs) for indentation.</li><li>Newlines at end of file.</li><li>Follow accepted naming conventions for your language/framework.</li><li>Follow accepted naming file and Directory structure for your language/framework.</li><li>Use namespaces.</li><li>No comments/Unused Code/Unused file/Unused folder must ever be checked in.</li><li>Runtime environment should be consistent with IDE environment -  i.e there should be no difference in running a build or a spec from your IDE and from the command line.</li><li>Use .gitignore.</li><li>Ensure there is a README.md that includes problem description, dev environment setup, build instructions, and run instructions.</li><li>Test Driven Development (this should show in clear pattern in the commit log - one spec, one code change per commit)</li></ol><p>Can you imagine the feeling when code that we wrote with blood and tears needs to be deleted for one small mistake? Is that acceptable?</p><blockquote>Yes, you must not love your code.</blockquote><p>That small mistake is not tolerable in production and even development. It could cause bugs, errors or other things that may become a bottleneck. But of course, we don’t <em><em>rm -rf</em></em> in work 😂. It’s just a practice so that we don’t get overly attached to the code, remain careful about mistakes, and most importantly — maintain quality.</p><h3 id="2-practise-pair-programming">2. Practise Pair Programming</h3><p>As the name implies, pair programming is where two developers work on one machine. We only have a keyboard and a mouse for each pair. One developer acts as the driver who codes while the other serves as the observer who checks the code being written, proofreads and spell-checks, and also figures out where to go next. These roles can be switched at any time: the driver will then become the observer and vice versa.</p><p>Pair Programming greatly helps us in CodeKata, because:</p><ul><li>It’s harder to procrastinate. Working as a team means you can’t stop and check your email, Slack, Facebook or WhatsApp every few minutes.</li><li>When someone shares a problem you are going through, you feel less defeated and more positive about trying again.</li><li>Increases software quality without impacting much on time to deliver. It will cost only 15% of the development time according to this <a href="https://www.economist.com/technology-quarterly/2001/09/20/agility-counts" rel="noopener">study</a>. But with increased quality comes big savings later in the project.</li></ul><h3 id="3-have-a-short-cycle">3. Have a Short Cycle</h3><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/982/1*14PeUCfZheM8mK7xm6FL8w.png" class="kg-image" alt="From Novice to Code Master"/></figure><p>The point of CodeKata is to get experience from practice. In order to achieve that, we solve the same problem multiple times. We try different approaches and solutions to experience each advantage and disadvantage. While we work on it, we also try to add little improvements for every cycle. But sometimes, we can also treat the cycle as an iteration of solving the problem.</p><p>Because CodeKata is a practicing method and not project development. It’s not supposed to be worked on for the long run. For that reason, we only have 20–30 mins for every cycle (sometimes even shorter).</p><p>After the Mini Retro, we showcase our code to other participants in the class. Why do we need to do it? Even though the whole class is working on the same problem, we may interpret it differently and have hundreds of possible different solutions. Doing a showcase will tell others about progress and approaches. It will trigger a discussion and synchronize the context for everyone. At the end of the day, we will converge at the current best solution.</p><blockquote>It’s similar to Agile Development. You deliver something to the customer as soon as possible to get feedback faster.</blockquote><h3 id="a-few-final-thoughts">A Few Final Thoughts</h3><p>My tips for CodeKata are:</p><ul><li>Find a place and time where you won’t be interrupted.</li><li>Focus on the essential elements of the Kata.</li><li>Remember to look for feedback for every major decision</li><li>If it helps, keep a journal of your progress</li><li>Have discussion groups with other developers, but try to have completed the kata first</li></ul><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/4240/1*53r0Npq_Thb0R0saRF08Rg.jpeg" class="kg-image" alt="From Novice to Code Master"><figcaption>Core Engineering Bootcamp</figcaption></img></figure><p>Thank you for reading this blog! Hope you found it helpful. Cheers! 🙂</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-2.png" class="kg-image" alt="From Novice to Code Master"/></figure><p>If you’d like our updates to reach your inbox directly, <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">subscribe to our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[From Charts to Code]]></title><description><![CDATA[The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.]]></description><link>https://gojek-ghost.zysk.in/from-charts-to-code/</link><guid isPermaLink="false">Ghost__Post__5eb128bef7c7da001effcd90</guid><category><![CDATA[Culture]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Sun, 08 Sep 2019 04:00:00 GMT</pubDate><media:content url="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_KJpSDpPskCA7V82Skkdxjg.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_KJpSDpPskCA7V82Skkdxjg.jpg" alt="From Charts to Code"/><p>By Carlos Arcenas</p><p>Picture this: you’re several months into a position at one of the world’s fastest growing and innovative companies. You know that the work you do helps impact the lives of thousands of people across Southeast Asia. You’re good at what you do — but you’re unsatisfied. On a personal level, the work doesn’t <em><em>excite</em></em> you anymore.</p><p><em><em>You’re looking to hit the restart button on your career.</em></em></p><p>That’s how I felt after a stint as a business analyst. The work and the people were great, but I wasn’t fully satisfied with what I was doing, and wanted to support the company in a different capacity. Luckily, thanks to Gojek’s internal transfer programs, the entire organisation was open to me. From roles in product management in Business Intelligence (<a href="https://www.gojek.io/all-open-positions?d=product&amp;t=product-management&amp;p=40f69246-2821-4a01-a359-64b5b6bf3b02" rel="noopener">they’re</a> <a href="https://www.gojek.io/all-open-positions?d=product&amp;t=product-management&amp;p=e707ab22-f28f-45a7-9130-4c036ca5da91" rel="noopener">hiring</a>!) to product and performance analysis in GoFood, I was definitely spoiled for choice.</p><p>However, thanks to the stream of articles coming from this very blog, I found myself yearning to enter Gojek’s vast Engineering and Product Development (EPD) group. Having that kind of impact across Southeast Asia and getting to work with extremely talented engineers really appealed to me, and I felt I could make a good contribution.</p><p>But before I could make my move, I had to make sure I knew what I was getting into. Was my desire to move rising out of discontent, or something that could be easily resolved? If I could even get into EPD, what would I be working on?</p><p><em><em>Would I even enjoy my new position, or find myself pining for something new again? Would all my efforts have been for naught?</em></em></p><p>This post is for anyone in a similar situation, and lists things to consider before taking the leap:</p><h1 id="discern-your-motivation">Discern your motivation</h1><p>Take time to introspect, and pick apart your motivations. What’s driving your decision to move? Are you unsatisfied with your current job? Do you have issues with your role, your team, your boss? Are you looking for a new adventure in a brand new area? Are you ready to put in time outside of work to train yourself for the new position?</p><p>Asking yourself these pointed questions can help define what you really yearn for, and outline how to get there. Which brings us to the next point.</p><h1 id="find-your-niche"><strong>Find your niche</strong></h1><p>Check your company’s job listings online to understand what they’re looking for. Read them thoroughly to understand the skills you need before applying. Are there <em><em>positions available for entry-level engineers</em></em>? If so, <strong><strong>prioritise these positions,</strong></strong> as they require less programming experience, and provide a springboard for you to supercharge your growth as an engineer.</p><h1 id="talk-to-engineers"><strong>Talk to engineers</strong></h1><p>The biggest advantage of moving internally is you already have access to many of your (potentially) future peers. Have a casual conversation with your company’s developers to understand the expectations of the job. Use this as an opportunity to go beyond the job description — to really understand what it’s like working in your desired position. What technologies do they use on a day-to-day basis? Do they have to work odd hours? What’s the career path like? We don’t bite! (We do love <em><em>bytes</em></em>, though!) ?</p><p>By this stage, I had become confident in my choice to jump to the Engineering division. I decided I wanted a new adventure to head on, established a niche I could aim for, and did the groundwork. But the big challenge lay ahead:</p><p>How <em>would </em>I accomplish the jump? I knew Gojek had (and still has) high expectations for anyone who wants to join the division.</p><p>The comforting factor was that Gojek is incredibly open to anybody who can prove themselves. Many successful engineers in Gojek made jumps like the one I wanted to make, and some of them had no formal training in computer science or software development! If anything, that was proof that anybody who strove and acted had a shot at success.</p><p><em><em><em>Now that you’ve made your choice: here are some tips to help propel you forward in tech as a beginner:</em></em></em></p><h2 id="upgrade-your-skills-"><strong>Upgrade your skills:</strong></h2><p>Now that you know what skills your desired position requires on a daily basis, it’s time to put in the hours training up. There are countless guides on the Internet for every technology under the Sun, so pick one and follow it through! Don’t forget to do the exercises included, and work on pet projects to really hone in on what you’ve just learned. Remember: practice makes perfect!</p><h2 id="join-company-training-programs-"><strong>Join company training programs:</strong></h2><p>Aside from taking up personal projects, look around to see if your company has set up training and development programs. These would be directly aligned with what your company is looking for in engineers, and offer a framework for you to grow with. In Gojek, we’re lucky to have two major programs:</p><ul><li>The Gojek Tech Bootcamp. Designed for fresh grads taking on an entry-level position in EPD across all divisions, the Bootcamp helps accelerate the growth of would-be engineers through full immersion — the philosophy, the practices, the works.</li><li>The GoAcademy program. Intended for anyone in the company looking for a structured way to grow in areas from data analysis and visualisation to personal wellness, GoAcademy sets up tutorials led by experienced engineers, fully contextualised to meet the needs of GoTroops from different teams and fields.</li></ul><h2 id="contribute-to-open-source-"><strong>Contribute to open-source:</strong></h2><p>If you don’t have enough experience to meet the requirements of your desired position, fret not! Look into contributing to <em><em>open-source projects</em></em> to level up. Contributing to open source works very much like contributing to a product team. You’ll be working on real bugs reported by users, or even proposing your own features to implement. The biggest open-source projects have vibrant communities that are very welcoming of newcomers — some even have bugs <em><em>specifically marked for solving by new developers</em></em>!</p><p>The benefits of working on open-source only increases if you can find and contribute to projects launched by your own company. (You can find a list of what Gojek has contributed so far over <a href="https://github.com/gojek" rel="noopener">here</a>.) You’ll get to showcase your collaboration and problem-solving skills to your future fellow engineers — all before sending in an application!</p><p><em><em>Bonus point: should you contribute using GitHub, GitLab, or any public tool, you’ll have a portfolio ready to link to and show around!</em></em></p><h2 id="talk-to-tech-leads-and-product-managers-"><strong>Talk to tech leads and product managers:</strong></h2><p>Much like talking to engineers, speaking with tech leads and product managers will give you a sense of what the job would be like, but on a higher level. Use this opportunity to ask about the current state of the team, the obstacles they’re facing, and future of the product. Position yourself in their eyes as someone who is ready to learn and contribute — you’ll be making your mark before you even have a formal interview!</p><p>As for me, I’m now a Product Engineer, part of Gojek’s Operations Platform, working on our internal service product and helping maintain our customer support platform. It’s been almost a year since I made the decision to switch roles, and I’m glad to say that, even though it took several months to find a role that met my desires and the needs of the company, I’ve found a place where I can grow and contribute to Gojek.</p><p>While my new world is far removed from the spreadsheets and queries of my old one, the skills I honed back then remain incredibly relevant and essential to my new duties. The eye for numbers and detail I developed has been crucial for spotting points of improvement in development. The communication skills I gained from presenting to higher-ups has helped me describe my ideas clearly. My time as a business analyst was not a waste in the least bit — in fact, it helped me towards faster growth and success in my new role.</p><p>If you’re in a similar position and contemplating changing roles, I hope this article has helped in the decision process. ?</p><hr><p>Want our updates to appear in your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[Efficient Experimentation at Gojek]]></title><description><![CDATA[A breakdown of the tool we use to estimate the right audience sample size for our experiments.]]></description><link>https://gojek-ghost.zysk.in/beast-moving-data-from-kafka-to-bigquery/</link><guid isPermaLink="false">Ghost__Post__5eb0fef85524cd001e739246</guid><category><![CDATA[Data]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 02 Sep 2019 04:00:00 GMT</pubDate><media:content url="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_VVhMvfqoGY_h6W0-VW4iMQ.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_VVhMvfqoGY_h6W0-VW4iMQ.jpg" alt="Efficient Experimentation at Gojek"/><p>Experiments are wonderful things. They help us validate our hypotheses without having to involve our entire user base. However, any good experiment first requires the answer to the question — how do we know the right number of people to include in it?</p><p>Let’s break down why this is important. If we target too few, our experiments will not detect smaller effects, leading us to miss legitimate opportunities. If we target too many, we would be wasting resources and potentially hurting our business metrics (if the treatments turn out to be detrimental).</p><p>Previously, we used simple heuristics (and a mysterious formula) to estimate the required sample size. These practices were not very scientific and produced inconsistent experimental results. To compensate, we had to repeat the same experiment multiple times just to validate the results. Sometimes different iterations would conflict with each other, leaving everyone scratching their heads.</p><p>Last year, we ditched those unscientific practices and built a new tool called Sample Size Calculator (yes, imaginative name, we know). This post explains how the calculator helps us find the right number of people to include in experiments.</p><p>Our calculator is based on Frequentist school of statistics. Under the hood, we used both the <a href="https://cran.r-project.org/web/packages/pwr/vignettes/pwr-vignette.html" rel="noopener"><em><em>pwr</em></em></a> package and the base sample size calculation functions in R programming language. This is what the tool looks like:</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1600/0*4kcE2olMNjGN4WFC" class="kg-image" alt="Efficient Experimentation at Gojek"><figcaption><strong>Figure 1.</strong> Screenshot of the Sample Size Calculator used at Gojek</figcaption></img></figure><p>The most important parameters are the type of dependent variable measured, the historical data, and the required sensitivity from the experiment. As you can see in the graph, if we increase sensitivity to allow detection of smaller effects, the required sample size soars, which makes sense.</p><p>Although this is a major step in the right direction, there is a problem if we are interested in a continuous dependent variable for our experiment. This is because the underlying methodology used in the calculator assumes a normal distribution, while most continuous metrics that we care about at Gojek — such as <code>bookings per user</code> — are usually skewed. By ‘skewed’, we mean that most users are light users and only a small percentage are heavy users. This could cause the computed sample size requirement to be wrong because a key assumption was not met.</p><p>We have four options to deal with this problem:</p><ol><li>Use a methodology that doesn’t assume normality. Unfortunately, the available non-parametric methods are complex to implement [<a href="http://www.biostat.jhsph.edu/~ejohnson/regression/Sample%20Size%20Power%20Considerations.pdf" rel="noopener">1</a>] [<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4423589/" rel="noopener">2</a>]</li><li>Transform data to have a normal distribution. This doesn’t always work — some data just can’t be coerced to normal</li><li>Use a larger sample size. Since the worry is lower power than expected, simple multiplication should boost the power, but the multiplier needs to be reasonable. Figuring the right multiplier would be another beast on its own</li><li>Ignore it. <strong><strong>This is the path we took</strong></strong></li></ol><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/350/1*lDXre2rWb6KOp8zOdx7V-Q.gif" class="kg-image" alt="Efficient Experimentation at Gojek"/></figure><blockquote><strong>But but but… that’s not scientific!</strong></blockquote><p><strong><strong>Don’t worry. We tested the robustness of this solution before going ahead with it.</strong></strong></p><p>As you can see in the graph below, we created two right-skewed distributions with known 5% difference in means to serve as our populations. The plan is to continuously sample from this population (equivalent to replicating the same experiment many times) and see how often we can detect this 5% difference (aka what is our “<a href="https://en.wikipedia.org/wiki/Power_(statistics)" rel="noopener">power</a>”).</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1120/0*vJpyQEMT_z3AgDSs" class="kg-image" alt="Efficient Experimentation at Gojek"><figcaption><strong>Figure 2.</strong> Two right-skewed distributions (typical shape for continuous metric at Gojek) with known mean difference (lift) of 5%</figcaption></img></figure><p>The first step is to calculate the required sample size with a power of 80% and minimum detectable effect of 5%. Let’s refer to this sample size requirement as the “exact” size. Then we divide and multiply it by three and call them “less” and “more”, respectively. For each sample size, we sample from the populations, compute the mean difference (typically called “lift”), and repeat this procedure many times.</p><p>The resulting distributions of lifts are shown below. The coloured vertical lines show the average lift of each experimental size, which is also equal to the actual population lift. This is <a href="https://en.wikipedia.org/wiki/Central_limit_theorem" rel="noopener">central limit theorem</a> at work. What is interesting are the relative shapes of the sampling distributions. The “more” group is the safest and most consistent but the “exact” group seems to have good accuracy with only a third of the sample size. In the “less” group, we even see a non-negligible number of lifts that are negative, even though we know the population lift is actually +5%. This is in line with our intuition that larger sample size is generally more trustworthy than a smaller one, all else being equal.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1120/0*Jtrd9syTiZADm04j" class="kg-image" alt="Efficient Experimentation at Gojek"><figcaption><strong>Figure 3.</strong> Sampling distribution of the mean difference from each size group</figcaption></img></figure><p>Since we currently report the statistical significance of our experimental results at Gojek, we will also run t-test for each of our sample here.</p><p>As it turns out, 80.4% of the experiments in the “exact” group have statistically significant results (p &lt; 0.05), which is almost equal to the 80% power we set in the sample size calculator. In layman’s terms, the tool roughly promised that <em><em>if you run the experiment with this sample size, you have 80% chance of detecting a 5% lift (the minimum detectable effect) if it’s there.</em></em></p><p>Since it kept its promise even on non-normally distributed data, we can conclude that the methodology is robust to some degree of violation of the normality assumption. Therefore we can ignore it until otherwise proven.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1120/0*zF3ocylJM9iMEDue" class="kg-image" alt="Efficient Experimentation at Gojek"><figcaption><strong>Figure 4.</strong> Percentage of samples/experiments with statistically significant results (p &lt; 0.05) from each size group</figcaption></img></figure><p>Meanwhile, the “less” group had only ~34% statistically significant results, suggesting that we shouldn’t run an experiment if we cannot fulfil the sample size requirement — since we risk not being able to detect an existing effect. With the “more” group having close to 100% statistically significant results, we again reaffirm that larger sample size is generally a good thing if we can afford it.</p><p>Since it was deployed in mid-2018, many teams across Gojek have adopted the Sample Size Calculator. So far, nearly 1,000 experiments have incorporated this tool in their designs, and it is also a part of <a href="https://blog.gojekengineering.com/introducing-litmus-gojeks-own-experimentation-platform-3803467b6a53" rel="noopener">Litmus, our experimentation platform</a>. The more critical takeaway for us is that the experiments run using the recommended sample sizes have similar results when full-scaled. This fact has enabled us to iterate faster and cut waste while maintaining a high degree of confidence in the experimental results. ✌️</p><p>Did we mention Gojek’s Growth team is hiring analysts? We are a super data-driven team and have helped shape some of the company’s best practices through projects like this. If you are analytical, interested in sharpening your technical chops, and want to have a meaningful impact to Gojek’s hypergrowth, come join us!</p><hr><p>For more updates like this, don’t forget to <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">sign up for our newsletter</a>!</p></hr>]]></content:encoded></item><item><title><![CDATA[How We Manage a Million Push Notifications an Hour]]></title><description><![CDATA[3 million+ orders a day across 20+ products on multiple devices, operating systems, and services. That’s a lot of notifications. 😅]]></description><link>https://gojek-ghost.zysk.in/how-we-manage-a-million-push-notifications-an-hour/</link><guid isPermaLink="false">Ghost__Post__5ec2af987aa22c4066f83ac4</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 29 Aug 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_tEOdkRN79DncrPtPfF8KIA.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_tEOdkRN79DncrPtPfF8KIA.jpeg" alt="How We Manage a Million Push Notifications an Hour"/><p>By Soham Kamani</p><p>Push notifications are an essential tool to inform users about events that require their immediate attention. At Gojek, we handle more than 3 million orders a day across our 20+ products.</p><p>As you can imagine, the number of push notifications we send are proportionally large — about a million every hour to be exact.This post describes the challenges we faced while working with such high notification volumes, and the solutions we developed to solve them.</p><p>Volume is only one part of the problem, many additional challenges were somewhat unique to Gojek:</p><h1 id="1-multiple-applications">1. Multiple applications</h1><p>Gojek isn’t comprised of just a single app. In addition to the Gojek app for customers, we also have GoLife, as well as our driver apps, merchant apps, and service provider apps for GoLife.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/882/1*LydaxXs7dKWE8OvGt7Opnw.png" class="kg-image" alt="How We Manage a Million Push Notifications an Hour"/></figure><p>When one of our systems wants to send a notification, it could be for a specific application of a user (for example, we don’t want to send GoLife booking notifications to the Gojek app), or for all applications (for example, a promotional notification).</p><p>Our system needed to be flexible enough to choose between an option to broadcast the notification to all applications, or to a specific application.</p><h1 id="2-multiple-notification-providers">2. Multiple notification providers</h1><p>Since we support both iOS and Android for our customer applications, we needed to support multiple notification systems.</p><p>For Android devices, we have FCM (Firebase Cloud Messaging) and the deprecated GCM (Google Cloud Messaging) API. For iOS, we have APNS (Apple Push Notification service).</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/962/1*gx05-ArzDJLasMbmiOmiqA.png" class="kg-image" alt="How We Manage a Million Push Notifications an Hour"/></figure><p>Each notification provider has different API keys and tokens for different application IDs. For example, the FCM API key would be different for GoLife as opposed to Gojek.</p><h1 id="3-multiple-devices-per-user">3. Multiple devices per user</h1><p>We allow our users to stay signed in to multiple devices at a time. For us, this also means that any push notification sent to the user must be sent to all of the devices that the user is currently logged into.</p><p>This is also a combination of the previous two problems:</p><ol><li>The user can be logged into multiple applications on a single device (Gojek + GoLife)</li><li>The user may be logged into different devices, where each device requires a different push notification provider. For example, a user can be logged into Gojek on their Android, as well as iOS device.</li></ol><h1 id="4-multiple-services-that-want-to-send-notifications">4. Multiple services that want to send notifications</h1><p>Gojek uses a micro-service architecture, where the services of each of our products need to send notifications to our users.</p><p>We want to make it as easy as possible for any service to be able to send a notification, without worrying about the multiple devices and providers that we discussed.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/501/1*6IaF4_PwdHWk6RowO0OnoA.png" class="kg-image" alt="How We Manage a Million Push Notifications an Hour"/></figure><p>Push notification service architecture</p><p>In order to address the above challenges, and make sure that the API remains as simple as possible, we built our notification system as three components:</p><ol><li><strong><strong>Notification server</strong></strong> — exposes the API to send notifications, and pushes it as a job on our job queue</li><li><strong><strong>Token store</strong></strong> — stores the devices and devices tokens of all the currently logged-in users</li><li><strong><strong>Notification worker</strong></strong> — consumes jobs on the job queue and sends notifications via the notification providers.</li></ol><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1902/1*2Nmx4MeYAXgekpr3uD8dng.png" class="kg-image" alt="How We Manage a Million Push Notifications an Hour"/></figure><p>Each component abstracts away some part of the problems we discussed above. Let’s take a look at each part in more detail:</p><h2 id="1-token-store">1. Token store</h2><p>Once a user is logged into our application, the application makes a call to the token store API with their device token and application ID.<br/></p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/2014/1*UoYZSCamWMlz5DcK7fJ9zQ.png" class="kg-image" alt="How We Manage a Million Push Notifications an Hour"/></figure><p>This entry is then removed when the user logs out.</p><blockquote><em><em>The token store abstracts the process of deciding which devices to send a notification to for each user</em></em></blockquote><h2 id="2-notification-server">2. Notification server</h2><p>This is an HTTP server that exposes an API internally to send notifications.</p><p>In order to make things simple, the API accepts the user ID, and an optional application ID as HTTP headers, and notification information in the request body:</p><p><code>POST http://&lt;base_url&gt;/notification<br>user_id: &lt;user_id&gt;<br>application_id: &lt;application_id&gt;</br></br></code></p><p><code>{<br>	"payload": {},<br>	"title": "You driver is here",<br>	"message": "Please meet your driver at the pickup point"<br>}</br></br></br></br></code></p><p>The server fetches all of the users devices from the token store, and schedules a job for each of the users devices.</p><blockquote><em><em>The notification server abstracts the external interface to the system. Now, other services in Gojek that need to send out a notification just need to call our API with the user ID, and the system takes care of the rest</em></em></blockquote><h2 id="3-job-queue">3. Job Queue</h2><p>We use RabbitMQ as an exchange for our job queues. We have a queue for each application ID and provider type.<br/></p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1832/1*Mg8xAvNt3o_6W7syBRst-w.png" class="kg-image" alt="How We Manage a Million Push Notifications an Hour"/></figure><p>This is important because we want to isolate failures for each application and provider type. For example, if our FCM token expires for <code>com.gojek.app</code>, we don't want to stall the jobs for <code>com.gojek.life</code> or <code>com.gojek.driver.bike</code>.</p><p>4. Notification workers</p><p>The worker processes consume messages from the job queues, and send out messages to the respective notification providers.</p><p>In order to make our code simpler, and to accommodate different service providers if needed, we make use of interfaces to abstract the functionality implemented by each provider:</p><p><code>type PushService interface {<br>	Push(ctx context.Context, m PushRequest) (PushResponse, error)<br>}</br></br></code></p><p>The <code>Push</code> method takes a request object and returns a response object.</p><p>The request structure contains information related to the recipient and additional options about the notification, like expiry time, title and text:</p><p><code>type PushRequest struct {<br>	DeviceID   string <br>	Title      string<br>	Message    string<br>	Payload    map[string]interface{}<br><em><em>//some other parameters omitted</em></em><br>}</br></br></br></br></br></br></code></p><p>The response contains information on whether the notification was sent to the provider’s server successfully:</p><p><code>type PushResponse struct {<br>	Success         bool<br>	ErrorMsg        string<br>}</br></br></br></code><br>We then implement the interface for specific providers. For example, the code for Google FCM provider, and Apples APNS provider looks something like this:</br></p><p><code>type FCMProvider struct {<br>	<em><em>// configuration for our provider, like API token and URL endpoint</em></em><br>}func (p *FCMProvider) Push(ctx context.Context, m queue.Message) (notification.PushResponse, error) {<br>	<em><em>// code to send a notification payload to FCMs server</em></em><br>}type APNSProvider struct {<br>	<em><em>// configuration for our provider, like API token and URL endpoint</em></em><br>}func (p *APNSProvider) Push(ctx context.Context, m queue.Message) (notification.PushResponse, error) {<br>	<em><em>// code to send a notification payload to FCMs server</em></em><br>}</br></br></br></br></br></br></br></br></code></p><blockquote><em><em>The notification worker abstracts the process of selecting the correct provider to send the notification. It selects the correct provider, with the correct API key based on the application ID of the message received from the queue.</em></em></blockquote><h1 id="conclusion">Conclusion</h1><p>By finding common patterns in the challenges we faced, and abstracting them into their own services, we turned a relatively complex problem into a suite of services that are reasonably straightforward and easy to manage on their own.</p><p>Each time we found a point which needed to handle multiple implementations of the same core logic, we put it behind a dedicated service:</p><ol><li>Multiple devices for a user was put behind the token service</li><li>Multiple applications were given a common interface on notification server</li><li>Multiple providers were handled by individual job queues and notification workers</li></ol><p>In the end, we wound up with a system that can comfortably handle <strong><strong>over a million notifications every hour</strong></strong>.</p><hr><p>Want more updates on how we build scalable systems for Southeast Asia’s #SuperApp? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[Gojek featured in Fortune’s 2019 ‘Change the World’ list]]></title><description><![CDATA[GoPay recognised for the acceleration of financial inclusion in Indonesia.]]></description><link>https://gojek-ghost.zysk.in/gojek-featured-in-fortunes-2019-change-the-world-list/</link><guid isPermaLink="false">Ghost__Post__5ec2ab927aa22c4066f83a71</guid><category><![CDATA[News]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Fri, 23 Aug 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_hxz1egdrKc2PKoLvno595g.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_hxz1egdrKc2PKoLvno595g.jpeg" alt="Gojek featured in Fortune’s 2019 ‘Change the World’ list"/><p>By Apoorva Babu</p><p>Gojek, Southeast Asia’s leading on-demand technology platform, once again made it to the annual Fortune <a href="https://fortune.com/change-the-world/2019" rel="noopener">‘Change the World’ list</a>. The recognition is given to companies that do well by doing good and create a wider socio-economic impact.</p><p>This year, Gojek ranked 11th out of 52 international organizations, making a leap from its 17th position in 2017. Gojek is the only Southeast Asian company to make it into this year’s Fortune “Change the World” list, recognized for GoPay’s innovation in accelerating financial inclusion in Indonesia. Gojek is also the only Southeast Asian company to have received this internationally recognised accolade twice.</p><p>Global CEO and Founder of Gojek Nadiem Makarim said, “We are humbled to be recognized by Fortune once again, for accomplishing what we have set out to achieve from day one — empowering lives and solving problems through technology. We are so thankful to all of our driver partners, merchants, customers, business partners, investors, and the government for their continuous support. Our stakeholder support is key to Gojek’s success in evolving into an integrated ecosystem with three Super Apps that move people, things, and money.”</p><p>The prominent global list highlights how GoPay, Gojek’s digital payments platform, has helped drive Indonesia’s digital economy by expanding financial access for millions in Indonesia, where 64% of the population is ‘unbanked’.</p><p>Nadiem added, “At Gojek, it’s always about tackling challenges and enabling a better life for everyone in our ecosystem. From enabling cashless transactions for consumers to ease of payments and business growth for merchants, GoPay has proven that #ThereIsAlwaysAWay to change the world for the better.”</p><p>GoPay CEO Aldi Haryopratomo also expressed his gratitude for the trust placed in GoPay, “We have always focused on the grassroots. Since 2016, GoPay has quickly transformed from a simple way for users to pay for Gojek services to driver partners now being able to use our platform to access mortgages, loans for education, health insurance, and even save for <em><em>Umrah</em></em>. Today, GoPay is the largest consumer digital payments platform in Indonesia and more than 90% of our GoPay merchants are micro, small, and medium enterprises. However, we do not just measure success in terms of current transaction volumes, but rather by how we can create grassroots impact at a global scale.”</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/288/1*ev8_lgKOS4bWD3996a00EQ.png" class="kg-image" alt="Gojek featured in Fortune’s 2019 ‘Change the World’ list"><figcaption><em><em>Note: A merchant who uses GoPay to develop her business. As the biggest digital payments platform in Indonesia, GoPay not only eases payment transactions, but also bridges driver partners and merchants to access various financial services such as KPR subsidies, education savings, health insurance, and Umrah savings.</em></em></figcaption></img></figure><p>In its fifth year running, Fortune’s “Change the World” list is intended to showcase the synergy between business strategy and the creation of positive social impact.</p><p>The assessment of nominees is conducted in partnership with the Shared Value Initiative, a global platform for organizations seeking business solutions to social challenges, and FSG, a non-profit social-impact consulting firm. Fortune’s decision making on this award is based on four criteria: Measurable social impact, Business results, Degree of innovation, and Corporate Integration.</p><p>“GoPay’s strategy is to build an ecosystem with our partners. We believe that by including more people in the formal financial system, we can grow together with our partners which include banks, restaurants, retailers, and many more.</p><p>Much like a coral reef where the more coral and fish enhance the vibrancy of the ecosystem, we believe that the more partners we have, the more families we can help,” Aldi concluded.</p><p><strong><strong>About Gojek Group</strong></strong></p><p>Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, getting a massage and two dozen services. It is Indonesia’s first and fastest growing unicorn building an on-demand empire across Southeast Asia.</p><p>As of 2018, Gojek processed more than $9 billion annualized gross transaction value (GTV) across all markets where it operates — in Singapore, Thailand and Vietnam. The Gojek app was launched in 2015, and is now the largest consumer transactional technology group on a GTV-basis in Southeast Asia.</p><p><em><em>The Gojek app is available for iOS and Android.</em></em></p><hr><p><strong><strong>For media queries, contact apoorva.babu@go-jek.com.</strong></strong></p></hr>]]></content:encoded></item><item><title><![CDATA[Gojek — Southeast Asia’s leading Super App — launches rebrand]]></title><description><![CDATA[New logo marks Gojek’s evolution from Indonesia-based ride-hailing company to Southeast Asia’s leading Super App]]></description><link>https://gojek-ghost.zysk.in/gojek-southeast-asias-leading-super-app-launches-rebrand/</link><guid isPermaLink="false">Ghost__Post__5ec2ab9b7aa22c4066f83a75</guid><category><![CDATA[News]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 23 Jul 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_u4u1wctYlvSt0JVC5RnfFQ.png" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_u4u1wctYlvSt0JVC5RnfFQ.png" alt="Gojek — Southeast Asia’s leading Super App — launches rebrand"/><p>By Apoorva Babu</p><p>Gojek, the Indonesia-headquartered technology company, unveiled a new brand, designed to reflect its position as the leading technology platform in Southeast Asia.</p><p>The rebrand — which begins rolling out today — marks Gojek’s evolution from a Jakarta-based ride-hailing service to Southeast Asia’s leading Super App. It follows after the company recorded 1,100% growth in transactions on its platform over the last three years, from June 2016 to June 2019, on increased demand for Gojek’s integrated services.</p><p>Gojek has also significantly expanded its regional ecosystem since its app launched in 2015, having partnered with over 2 million driver-partners, 400,000 merchant partners and 60,000 service providers across Southeast Asia to-date.</p><p>Over the past three years, Gojek users have given over US$20 million in tips to the platform’s driver-partners and service providers, a testament to their support for and satisfaction with the Gojek brand.</p><p>The rebrand sets the course for Gojek’s next phase of growth, which will include further innovation and the strengthening of its integrated ecosystem of over 20 on-demand services — the region’s largest array of such offerings on a single platform.</p><p>The new logo, a nearly-rounded ring encircling a dot, is designed to be easily recognisable and versatile. It can be interpreted in a number of ways: a map pin, the bull’s eye, an aerial view of a motorcyclist, or a power button. This reflects Gojek’s Super App proposition, with its multitude of offerings, which range from transport, payments and food to logistics, entertainment and lifestyle.</p><p>In Indonesia, Gojek has built three Super Apps: one each for consumers, driver-partners, and merchant partners. Each app provides its respective users with services and features designed to make life better and help them to excel. For example, the app for driver-partners is equipped with several functions that support financial planning, while the merchant app includes features that help with business expansion, including logistics and inventory management.</p><p><strong><strong>Kevin Aluwi</strong></strong>,<strong><strong> Co-founder of Gojek Group</strong></strong>, says: “Today, we introduce a new brand that represents the evolution of Gojek from a transport company in Jakarta to a leading tech company in Southeast Asia. We have been on an extraordinary journey over the past four years and the new brand is designed to embody everything that has been achieved throughout that period.</p><p>“We are humbled that driver-partners, merchants, consumers and our employees have had such faith in our brand and our company as we’ve grown. They are the ones who have built this business into what it is today. Gojek is now many things to many people — and our new logo reflects that. Even so, we remain committed to our founding principle and ethos of improving people’s lives through the use of technology.”</p><p><strong><strong>Andre Soelistyo</strong></strong>,<strong><strong> President of Gojek Group</strong></strong>, adds: “With the rebrand, we look forward to the next chapter of our growth, not only in Indonesia — where we have the highest number of monthly active users compared to other on-demand platforms — but across the other Southeast Asian markets that we have expanded to over the past year. In each of those markets, our entry has been warmly received, a testament to our technology and in-depth local knowledge, and the benefits that we have delivered to local users.</p><p>“Our goal has always been to create a great offering in each of our markets that makes life easier for consumers, while delivering a positive social impact throughout Southeast Asia.”</p><hr><p><strong><strong>For media queries, please write to apoorva.babu@go-jek.com.</strong></strong></p></hr>]]></content:encoded></item><item><title><![CDATA[The Final Chapter — How GOJEK Went International]]></title><description><![CDATA[Changing markets, resource crunches, looming deadlines; everything played a part in GOJEK’s newest international launch — Thailand.]]></description><link>https://gojek-ghost.zysk.in/the-final-chapter-how-gojek-went-international/</link><guid isPermaLink="false">Ghost__Post__5ec2d7e77aa22c4066f83caa</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 18 Jul 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/4.gif" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/4.gif" alt="The Final Chapter — How GOJEK Went International"/><p>By Sooraj Rajmohan</p><p>You are reading the final part of a three-part series documenting GOJEK’s expansion beyond Indonesia’s borders, and how one team helped make it possible.</p><p>Part one of this series, which documents the business and technical decisions made for international launch, can be found <a href="http://bit.ly/2XTN6WK" rel="noopener">here</a>. Part two, which chronicles the journey of GOJEK’s Vietnam launch under the GO-VIET brand, is <a href="http://bit.ly/2Rm2cSC" rel="noopener">here</a>.</p><p>On to part three then:</p><h1 id="part-3-3-accomplishment">Part 3/3 | Accomplishment</h1><p>The atmosphere in Vietnam was celebratory. The GO-VIET launch had gone better than anticipated, and our attempt to build robust, scalable systems looked to have paid off. Ride and Send services were live in Vietnam, and engineers from GO-FOOD had already started working with Trifecta — the team spearheading GOJEK’s international moves — to launch our food product in Vietnam (FYI, it’s live now).</p><p>In the months following Vietnam launch, Trifecta focused on setting up cadences with different GOJEK product teams to streamline development and release cycles for GO-VIET. Everything was up and running.</p><p><strong><strong>Now, for the next stage — Thailand.</strong></strong></p><p>The launch plan for Thailand was similar to what had been executed in Vietnam, including the products made available at launch (Ride and Send). <strong><strong>In Thailand, the brand would launch under the name GET.</strong></strong></p><blockquote>We had proven it could be done. Now it was time to do it again. Easy, right?</blockquote><p><em><em>As would soon become apparent, not really. This ride had a few last twists left.</em></em></p><h1 id="a-different-method">A Different Method</h1><p>While our Thailand operation would be similar to Vietnam on the infrastructure front, to say we could just replicate the model as is would be an oversimplification. For starters, Thailand’s currency, the Thai Baht, was not a depreciated currency like Indonesian Rupiah or Vietnamese Dong.</p><blockquote><em><em>Here’s some context:</em></em></blockquote><blockquote><em><em>1 Indonesian Rupiah (IDR) = 0.0049 INR</em></em><br><em><em>1 Vietnamese Dong (VND) = 0.0030 INR</em></em><br><em><em>1 Thai Baht (THB) = 2.2 INR</em></em></br></br></blockquote><p>Incorporating this change would require some additional work from the team. On top of this, the ride sharing market in Thailand is regulated by the Thai government. Existing bike taxis (locally called WIN taxis) are licensed by the government to serve as an effective mode of transportation. GOJEK’s entry into the market provided an opportunity for WIN drivers to leverage the online platform, while giving customers easy access to transportation</p><p>This arrangement required some work as well, as existing WIN drivers onboarded to GET would need to be prioritised initially while our own onboarding and training happened in parallel. All this meant that the launch model needed some tweaking, but nothing the team would need to sweat over too much.</p><p><strong><strong>Talks were completed, local business teams were built, and a deadline was agreed upon with the Thai government to launch GET.</strong></strong></p><blockquote>We should have known; rarely do companies building, scaling, and expanding at GOJEK’s pace experience such smooth sailing.</blockquote><h1 id="the-singapore-swing">The Singapore Swing</h1><p><strong><strong><em><em>Works, meet spanner.</em></em></strong></strong></p><p>Due to the seismic shift in the ride-sharing business landscape of Southeast Asia in early 2018, GOJEK was also prepping for launch in Singapore on an accelerated timeline. Now was a good time to enter the lucrative market — the most developed in the region. GOJEK already enjoyed brand recognition thanks to the amount of business travel between Jakarta and Singapore. By May 2018, a few months before GO-VIET went live, the launch teams for Singapore had already been formed.</p><blockquote><em><em><em>Keeping with Singapore’s iconic lion motif, we named these teams Simba and Mufasa. Stay tuned to this blog for their story, coming soon. 🦁</em></em></em></blockquote><p>As 2018 drew on and all teams worked to hit their deadlines, the situation felt a lot like the storms GOJEK weathered in its infancy. Multiple teams were dependent on the same resources as we lined up back-to-back country launches. To top it all, holiday season — one of the busiest times of the year — was also kicking off.</p><!--kg-card-begin: html--><iframe src="https://giphy.com/embed/2oj7STwCx7wAM" width="480" height="346" frameBorder="0" class="giphy-embed" allowFullScreen=""/><p><a href="https://giphy.com/gifs/2oj7STwCx7wAM">via GIPHY</a></p><!--kg-card-end: html--><p>While Trifecta had built much of the infrastructure framework required for launch, there were still dependencies on key GOJEK teams that were currently building for Singapore. This threatened to slow down what was an otherwise straightforward development timeline.</p><p>There was also that commitment of a launch date to the Thai Government to think about. The stakes were not trivial.</p><blockquote>The team could not afford to lose more time. Time for desperate measures.</blockquote><p>With just about a month left for launch, the team members — distributed across multiple locations — convened at the GOJEK Bangalore office. All the documentation done during the pre-Vietnam launch phase meant that everyone had a fair idea of what needed to be done. Launching Singapore and Thailand without delay was critical to business, and we could not afford delays.</p><p>With this in mind, tough decisions were made. The Trifecta team decided to roll up their sleeves and take full ownership of Thailand, freeing up the GOJEK Transport team to dedicate more resources to Singapore. Trifecta team members flew in to Thailand to coordinate the work there, and the project slowly picked up steam once again. All the legwork done at the beginning of this exercise had come to fruition.</p><p>The team now had enough context about GOJEK services, and as the days to launch ticked away, so did the items on the pre-launch checklist.</p><p>It took some doing, with the environment and frameworks built and stabilised while activities like driver onboarding and early alpha testing happened in parallel.</p><blockquote>The going was not easy, but this wasn’t our first rodeo.</blockquote><p>Trifecta Tech Lead Sumit Gupta, who was around in early 2016 during GOJEK’s frantic growth as well, mentions how everyone was more confident this time around. Thanks to to the team deciding to build a fast and scalable container-based architecture for Vietnam and Thailand, they were sure the system would function reliably. 💪</p><h1 id="the-home-stretch">The home stretch</h1><p>Despite the apprehensions, Trifecta managed to pull through. What had been a system unfit for launch just a few weeks before the stipulated date, was up and running with a couple of days to go. The team’s faith was well-rewarded. As launch day came around, nothing broke.</p><p>Bagus Santoso and Ardi Priono, QAs on the Trifecta team, recall how everyone present gathered outside the GET office on the day of the soft launch, and prayed.</p><blockquote>People of different nationalities, faiths, and professional backgrounds, united in a moment of reflection and hope for something they had built together.</blockquote><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/1280/1*i1ajp_gHLnIOoJQHIbmCKg.jpeg" class="kg-image" alt="The Final Chapter — How GOJEK Went International"><figcaption>The day of the soft launch.</figcaption></img></figure><p>On November 29, 2018, the GOJEK app successfully went live in Singapore. The next month, December 18 to be precise, GET’s fluorescent colours lit up Bangkok. <strong><strong>We were officially live in Thailand. </strong></strong></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/3456/1*9Ir2dOX2x0ODxVIhdl85gA.jpeg" class="kg-image" alt="The Final Chapter — How GOJEK Went International"><figcaption>Riding off to new horizons.</figcaption></img></figure><blockquote><em><em>Our SuperApp had ventured beyond home. Team Trifecta had accomplished the task it had been set.</em></em></blockquote><blockquote>Looking back, this had been an ambitious endeavour. Setting up new environments, using the learnings from scaling GOJEK to build improved infrastructure, and launching two new brands.</blockquote><p>If there was one thing this exercise taught us, it was to reduce dependencies. Today, each GOJEK team is responsible for maintaining their product features and services wherever they may be deployed.</p><p>In service of this decision, Trifecta started the exercise of imparting all the knowledge, tools, and documentation gathered over the year to the relevant teams within GOJEK. Hands-on sessions and workshops were held, and learnings transferred. The goal now was to provide each team the tools and autonomy required to not face such roadblocks again.</p><blockquote>Once this process was complete, their task done, the fellowship that steered GOJEK to foreign lands was disbanded.</blockquote><p>Armed with new experience, the GOJEK engineers left Trifecta and joined other product teams. As for that specialist team that was brought in at the beginning of this story, the valuable experience they brought to the table would always be useful to a company that is taking on challenging projects. They moved to GOJEK’s newly-formed Kernel team, to help take on one of our biggest challenges yet.</p><p><strong><strong>But that is a story for another day.</strong></strong></p><p>This series was a snapshot of how we do things at GOJEK. Even as you read this, there are many more such stories developing. Keep watching this space!</p><p><strong><strong><em><em>Or better yet, </em></em></strong></strong><a href="http://bit.ly/2Lubjke" rel="noopener"><strong><strong><em><em>join us</em></em></strong></strong></a><strong><strong><em><em> and become a part of the story. There’s plenty to do and much to learn.</em></em></strong></strong></p><p>Thanks for reading! 🙌</p><hr><p>Want more where that came from? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter</a> and we'll send our latest updates straight to your inbox!</p></hr>]]></content:encoded></item><item><title><![CDATA[Beast: Moving Data from Kafka to BigQuery]]></title><description><![CDATA[Gojek's open source solution for rapid movement of data from Kafka to Google BigQuery]]></description><link>https://gojek-ghost.zysk.in/beast-moving-data-from-kafka-to-bigquery-2/</link><guid isPermaLink="false">Ghost__Post__5eb0ff055524cd001e73924a</guid><category><![CDATA[Data]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 11 Jul 2019 04:00:00 GMT</pubDate><media:content url="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dc5zljnB3Xzp17C7sZ3d-Q.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dc5zljnB3Xzp17C7sZ3d-Q.jpg" alt="Beast: Moving Data from Kafka to BigQuery"/><p>by <a href="http://medium.com/@rajat404" rel="noopener">Rajat Goyal</a> and <a href="https://medium.com/@maulik.soneji" rel="noopener">Maulik Soneji</a></p><p>In order to serve customers across 19+ products, GOJEK places a lot of emphasis on data. Our <a href="https://en.wikipedia.org/wiki/Data_warehouse" rel="noopener">Data Warehouse</a>, built by integrating data from multiple applications and sources, helps our team of data scientists, as well as business and product analysts make solid, data-driven decisions.</p><p>This post explains our open source solution for easy movement of data from Kafka to BigQuery.</p><h1 id="data-warehouse-setup-at-gojek">Data Warehouse setup at GOJEK</h1><p>We use <a href="https://cloud.google.com/bigquery/" rel="noopener">Google Bigquery</a> (BQ) as our Data Warehouse, which serves as a powerful tool for interactive analysis. This has proven extremely valuable for our use cases.</p><p><em><em>Our approach to push data to our warehouse is to first push the data to Kafka. We rely on multiple Kafka clusters to ingest relevant events across teams.</em></em></p><p>A common approach to push data from Kafka to BigQuery is to first push it to GCS, and then import said data into BigQuery from GCS. While this solves the use case of running analytics on historical data, we also use BigQuery for near-real-time analytics &amp; reporting. This analysis in-turn provides valuable insights to make the right business decisions in a short time frame.</p><h1 id="the-initial-approach">The initial approach</h1><p>Our original implementation used an individual code base for each topic in Kafka and use them to push data to BQ.</p><p>This required a lot of maintenance in order to keep up with the new topics and new fields to existing topics being added to Kafka. Such changes required the manual intervention of a dev/analyst to update the schema in both code and BQ table. We also witnessed incidents of data loss on a few occasions, which required manually loading data from GCS.</p><h1 id="the-need-for-a-new-solution">The need for a new solution</h1><p>New topics are added almost every other day to the several Kafka clusters in the organisation. Given that GOJEK has expanded its operations to several countries, managing the agglomeration of individual scripts for each topic was a massive ordeal.</p><p>In order to deal with scaling issues, we decided to write a new system from scratch and take into account learnings from our previous experiences. Our solution was a system that could ingest all the data pushed to Kafka and write it to Bigquery.</p><p>We decided to call it ‘<strong>Beast’</strong> as it has to ingest all data that is generated in GOJEK.</p><p>Before starting with development, we had the following requirements to take care of:</p><ul><li><strong><strong>No data loss: </strong></strong>Every single message should be pushed from Kafka to BQ at least once</li><li><strong><strong>Single codebase: </strong></strong>A single repository able to handle any proto schema, for any topic, without any code changes</li><li><strong><strong>Scalability:</strong></strong> The app needs to be able to handle substantially high throughput</li><li><strong><strong>Observability:</strong></strong> A dev should be able to see the state of the system at any given point of time</li><li><strong><strong>Painless upgrades:</strong></strong> Updating the schema for a topic should be a simple operation</li></ul><h1 id="architecture">Architecture<br/></h1><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1373/1*MlBXLLD33_MwOyILGivskg.png" class="kg-image" alt="Beast: Moving Data from Kafka to BigQuery"/></figure><p>Beast takes inspiration from <a href="https://blog.gojekengineering.com/sakaar-taking-kafka-data-to-cloud-storage-at-go-jek-7839da20b5f3" rel="noopener">Sakaar</a>, our in-house solution for pushing data from Kafka to GCS. Like Sakaar, Beast utilises Java’s blocking queues, for consuming, processing, pushing and committing the messages. Blocking queues allow us to make each of these stages independent of the other, letting us optimise each stage in and of itself.</p><p>Each Beast instance packs the following components:</p><ul><li><strong><strong>Consumer:</strong></strong> A native Kafka consumer, which consumes messages in batches from Kafka, translates them to BQ compatible format, and pushes all of them into two blocking queues — Read Queue and Commit Queue.</li><li><strong><strong>BQ Workers: </strong></strong>A group of worker threads which pick messages from the read queue, and push to BigQuery. Once a message batch is pushed successfully, the BQ worker adds the committed offset of the batch to the Acknowledgement Set. This offset acts as an acknowledgement of the batch being successfully pushed.</li><li><strong><strong>Kafka Committer:</strong></strong> A thread which keeps polling the head of the commit queue, to get the earliest message batch. The committer looks for the commit offset of that batch in the Acknowledgement Set. If the acknowledgement is available (implying that the batch was successfully pushed to BQ), then the offset of that batch is committed back to Kafka, and it’s removed from the commit queue.</li></ul><h1 id="salient-features">Salient Features</h1><p>Beast is entirely cloud native, thus scaling it is a piece of cake.</p><p>For high throughput topics, all we need to do is spawn more pods. Since Beast relies on Kafka consumers, we can have as many consumers as the number of partitions, and as long as they have the same consumer group, Kafka will ensure that all the consumers receive unique messages.</p><p>Beast takes a proto-descriptor file, which defines the details of all the protos in the registry. It then simply picks the details of the proto, specified in the configuration. This allows us to use the same codebase for all deployments, and also makes the upgrades a breeze.</p><h1 id="beast-is-open-source-">Beast is open source ? ?</h1><p>Beast is now part of the open source domain. Do give it a shot!</p><p><strong><strong>You can find Beast here: ?</strong></strong></p><p><a href="https://github.com/gojek/beast">https://github.com/gojek/beast</a></p><p>Helm chart for the same can be found <a href="https://github.com/gojektech/charts/tree/master/incubator/beast" rel="noopener">here</a>.</p><p>Contributions, criticism, feedback, and bug reports are always welcome. ?</p><hr><p>If you like what you read and want our stories delivered straight to your inbox, <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter">sign up for our newsletter</a>. </p></hr>]]></content:encoded></item><item><title><![CDATA[The Story of My Gojek Internship]]></title><description><![CDATA[What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.]]></description><link>https://gojek-ghost.zysk.in/the-story-of-my-gojek-internship/</link><guid isPermaLink="false">Ghost__Post__5ec2ca737aa22c4066f83b78</guid><category><![CDATA[Culture]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 04 Jul 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_8RjlIWbn2EYI3fdzy-8HqA.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_8RjlIWbn2EYI3fdzy-8HqA.jpeg" alt="The Story of My Gojek Internship"/><p>By Abhishek Kumar</p><h1 id="prologue">Prologue</h1><p><strong><strong>August 2018</strong></strong></p><p>I had just completed my first semester at IIM Ahmedabad. As the Summer Placements semester got going in full swing, I decided to pursue an internship in the Product Management domain.</p><p>When someone asked me: “Which is your dream company?”, I was not sure. I realised that although there were renowned names coming on campus, for some reason, I wanted something more exciting.</p><p>After days of pondering, I decided to apply off campus. A list was compiled, and the options trickled down to three: Google, LinkedIn and Gojek! Thankfully, Gojek had a PM internship opening. I applied, interviews went well and I was extended an offer at the Bangalore office.</p><h1 id="chapter-1-documentation">Chapter 1: Documentation</h1><p><strong><strong>1st April 2019</strong></strong></p><p>I reached the office full of enthusiasm, ready to make a mark of my own. The whole day went in different formalities and it was almost evening when I got to meet my team. To my surprise, by the end of the day, I was part of all relevant communication channels, team drives and had clarity on what I would work on for the next four weeks.</p><p>I just loved the agility shown by my manager to enable me to embark on my journey. In the process, I also realised why my undergrad friends working at Gojek used to say that if you love speed, this is the place to be.</p><p>The next few days were spent understanding the product, people, and culture. I was surprised by the volume and quality of the documentation done at the company. For a company which prides itself in being one of the fastest growing startups in the world, this kind of emphasis on documentation was something unheard of. And because of these hundreds of beautifully crafted documents, by the end of the first week itself, I was participating in their BAU (Business As Usual) meetings. (How many interns can claim this? 😜)</p><h1 id="chapter-2-reading">Chapter 2: Reading</h1><p><strong><strong>15th April 2019</strong></strong></p><p>I was no longer a newbie in the company. I was having 1:1s with different stakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and working tirelessly on my dedicated projects.</p><p>During the course of these all, one day I reached out to my mentor for suggestions on how to prioritise among different features. This was his response:</p><blockquote>“Read Abhishek, Read. What differentiates a good Product Manager from an average one is his/her willingness to learn, and reading is the first and most important step there.”</blockquote><p>He gave me different links to read, (37 to be precise) which ranged from Product Prioritization, Product Design, Product Critique, Design Heuristics and even the Psychology involved in product success. As I pored through them, I realised Product Management is not as random as it seems from outside. In fact, it is a fine cocktail of art and science mixed in just the right proportion.</p><h1 id="chapter-3-inclusion">Chapter 3: Inclusion</h1><p><strong><strong>23rd April 2019</strong></strong></p><p>By this point, I had completed my first project, got positive feedback, and was about to finish the second. In the meantime, being a part of so many BAU meetings had boosted my confidence and now I was chipping in with suggestions.</p><p>During one such meetings, I raised a point in contradiction to what the other team was saying. I tried to explain my point of view but we were not able to come to an agreement. When I came out, I realised that I should have dealt with the situation differently. I went to my mentor and explained as much.</p><blockquote><em><em>To this, he said: “Sometimes it’s not only about how you or your team is looking at things. You also have to look at what is the value proposition of other teams involved”</em></em></blockquote><p>This was the second important lesson which I learnt: <strong><strong>being a PM your job is to first bring everyone at the table to a common ground before pushing any agenda.</strong></strong> Whether it is inter-team or intra-team, to get the job done, you have to bring people to your side by understanding what they want and why they want it.</p><h1 id="chapter-4-relevance">Chapter 4: Relevance</h1><p><strong><strong>30th April 2019</strong></strong></p><p>I had just finished my second project when I met a senior engineer while passing through the pantry area. He asked how it’s going and what I was working on. I, with full excitement, told him many ideas I came up with.</p><p>And then he said: “Man, it doesn’t matter how cool the ideas are or how great they sound. Judge them on their relevance. Are they correctly solving the problem intended? Are they adding value to the lives of relevant stakeholders?” And then he gave me a set of 10 similar questions and said that if after answering these 10 questions, you still believe you should implement the idea, <em><em>then</em></em> it matters.</p><h1 id="chapter-5-impact">Chapter 5: Impact</h1><p><strong><strong>7th May 2019</strong></strong></p><p>I had started understanding the nitty-gritty of product management and was raring to pick a more challenging project. And then I got this mail from my manager:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1212/1*EmNFi0hTp_OczKryjJuYoQ.png" class="kg-image" alt="The Story of My Gojek Internship"/></figure><p><strong><strong><em><em>Really??? After such nice product &amp; strategy based projects, this is what you want me to do!!</em></em></strong></strong></p><blockquote>But again, that was my inexperience talking.</blockquote><p>During the course of the next week, I learnt one more valuable lesson: “Look at the impact of your work, not how cool it sounds. Being a PM, the world is your domain and processes are as important as the product itself. If you want your product to succeed, you need to oil the whole machinery.”</p><p>Recently, I came to know that a senior PM found the document to be super good and now it is being used across the substreams to onboard new hires. (I’m allowed one humblebrag right? 😅)</p><h1 id="chapter-6-communication">Chapter 6: Communication</h1><p><strong><strong>21st May 2019</strong></strong></p><p>The changing weather of Bangalore had hit me hard and I had to take a leave owing to ill health. I sent a message each to my manager and mentor regarding the same. My mentor replied asking me to inform the whole team, which I missed and read quite late. When I did, I figured I am an intern anyway, and don’t have any current projects with the team. Even if I don’t send the mail to them, it doesn’t matter much.</p><p>When I met my mentor the next day, he asked why I didn’t send the mail, and I explained why. He said: “Abhishek, it doesn’t matter whether you have a current project with the team or not. Being a PM, one of the most important skills is being very clear in communication. There might be situations where you wouldn’t even know and people would be waiting for you. Not only in this case, but in every everything you do, a PM needs to be a clear and careful communicator.”</p><h1 id="chapter-7-ownership">Chapter 7: Ownership</h1><p><strong><strong>24th May 2019</strong></strong></p><p>My internship was nearing it’s end, and I reached out to my mentor for some suggestions on the last project I was working on. During our conversation, he asked if my previous one had gone live in production. I said no, but clarified that my part is done and it is stuck on other collaborating teams.</p><p>That’s when I realised I had one last lesson left to learn:</p><blockquote><em><em>“Being a PM it’s your job to get it from conception to production. If there are blockers, you have to proactively reach out to remove them. Being a PM is a tricky job, once you have dirtied your hand, the onus comes on you to get it to completion.”</em></em></blockquote><blockquote>“Once you have picked up something — It’s All Yours.”</blockquote><h1 id="epilogue">Epilogue</h1><p>Today, when I look back, my internship at Gojek was a short, but sweet journey which taught me many lessons. As I go back for my second year at IIMA, I am much more confident when it comes to Product Management.</p><hr><p><em><em>Special thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit Srivastava, and all the members of the Transport team who were always ready to help me during the course of my journey.</em></em></p><hr><p>Want more updates on how we build scalable systems for Southeast Asia’s #SuperApp? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a><br/></p></hr></hr>]]></content:encoded></item><item><title><![CDATA[Good Morning, Vietnam — How GOJEK Went International]]></title><description><![CDATA[From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.]]></description><link>https://gojek-ghost.zysk.in/good-morning-vietnam-how-gojek-went-international/</link><guid isPermaLink="false">Ghost__Post__5ec2d7e47aa22c4066f83ca4</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 18 Jun 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/3.gif" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/3.gif" alt="Good Morning, Vietnam — How GOJEK Went International"/><p>By Sooraj Rajmohan</p><p>You are reading part two of a three-part series chronicling GOJEK’s entry into international markets, and the team that helped make it possible. If you haven’t read part one, get up to speed here.</p><h1 id="part-2-3-initiation">Part 2/3 | Initiation</h1><p>When we left Trifecta — the team responsible for charting GOJEK’s international expansion — in the last part of this series, the team was working on setting up a new environment for launch in Vietnam. But now, there were new problems to tackle.</p><p><strong><strong>Problem #1: Configuration drift</strong></strong></p><p>Until this point, GOJEK had always operated within Indonesia, but Trifecta was now in unmapped territory, building a completely new environment for GOJEK’s services in Vietnam. The services now needed to be configured separately across geographies, and there was no central location to manage these configurations effectively. This meant there was a chance of configuration inconsistencies creeping in over time (hence the term ‘drift’).</p><p><strong><strong>Problem #2: Deployment drift</strong></strong></p><p>Even if the team hacked a solution for the first problem, deploying the code would pose another one. It was imperative that the same version of code run on all the environments (the existing one in Indonesia, the one being built for Vietnam, and any future ones). Failing this, supporting services across countries would be a nightmare.</p><blockquote><em><em>That wasn’t the kind of risk a startup that expounds lean engineering could afford to take.</em></em></blockquote><p><strong><strong>Problem #3: A logging and monitoring solution for the Kubernetes cluster.</strong></strong></p><p>As this was the first time containers were being used by GOJEK, a new logging solution would be required for future debugging needs.</p><p><em><em>Much time had been lost already, it was time to bring in the big guns.</em></em></p><p>Even as the team dodged obstacles and took detours, making the best use of available resources, Project Managers Sourabh Gupta and Sanchit Juneja had been communicating with other teams for backup. They had found some ad-hoc support, but to see this journey through would need more seasoned soldiers.</p><p>Finally, this effort came to fruition.</p><h1 id="trifecta-v2-0">Trifecta V2.0</h1><p>After some negotiation, the team got the go-ahead for Sumit Gupta, another GOJEK veteran, to make the transition from GOJEK’s Atlas team to join Trifecta full time. Sumit had led GOJEK’s scaling efforts back in 2015, when the company was in constant firefighting mode, and knew a thing or two about dealing with the kind of situation the team was in. He would now assume the role of Trifecta’s Tech Lead.</p><p>With a renewed sense of purpose, the team looked back at the roadmap and reassessed priorities. This would be a challenging project. <strong><strong>Daunting, yes. Insurmountable? Not quite.</strong></strong></p><blockquote><em><em><em>If you’ve read </em><a href="https://blog.gojekengineering.com/the-go-jek-reading-list-1088712ccc14" rel="noopener"><em>GOJEK’s essential reading list</em></a><em>, you may have noticed that </em>The Mythical Man Month<em> is one of the books we swear by, and one of its core tenets is: “Adding more people to a late software project makes it later.”</em></em></em></blockquote><blockquote>We added four more engineers to the team.</blockquote><hr><h1 id="dimensions-and-distant-visions">Dimensions and distant visions</h1><p>GOJEK did not have previously devised solutions for the drifts it was dealing with. It needed new ones.</p><p><strong><strong>Tackling configuration drift.</strong></strong></p><p>It would now be Trifecta’s job to create a location within which services for different environments could be configured and accessed.</p><p>The solution was a service that used a new API to update configurations across geographies. These were then migrated to a configuration store.</p><p>This store was named Yggdrasil, the mythical Norse tree that connects the nine realms. Even in the frenzied sprint to accomplish a daunting task, we could never resist the temptation of poetic nomenclature. 😅</p><blockquote>Yggdrasil changed how configs were stored and managed in GOJEK.</blockquote><p><strong><strong>Tackling deployment drift</strong></strong></p><p><em><em>Code</em></em>.</p><p>Code fuels GOJEK, and ensuring that updated code is running in sync is one of the primary objectives of any team. Trifecta was no different — except for scale.</p><p>The team needed to figure out a way to ensure that the same version of code ran across multiple, disconnected environments. It was time to forge a new accessory.</p><blockquote>A Palantir — a seeing stone.</blockquote><p>When new versions of an application are released, there is a need to deploy the same version on all countries for the given environment. Palantir would take care of figuring out which countries the given deployment should go to.</p><p>The team also built a UI for Palantir, which gave a view of what version of a service was deployed in which cluster and sent alerts when there was a drift.</p><p><strong><strong>Tackling the logging problem</strong></strong></p><p>As launch date drew closer, this particular problem required non-linear thinking. Trifecta implemented an out-of-the-box solution using Stackdriver to unblock themselves for the launch. This was not optimal, but it provided enough breathing room to get through launch (post which specific tooling for logging on containers could be created).</p><p>Once again, the destination appeared near. With Yggdrasil keeping the services stable and Palantir keeping watch on code, GO-VIET was no longer a wistful dream, it was a visible apparition.</p><hr><h1 id="run-with-red">Run with Red</h1><p>If you visit Indonesia, chances are you’ll see bright flecks of green amidst the traffic.</p><blockquote><em><em>Green jackets, green helmets, green… everywhere. Green is now part of GOJEK’s identity in Indonesia, it is instant mental recall for the brand.</em></em></blockquote><blockquote><em><em>But this was not Indonesia.</em></em></blockquote><blockquote>GO-VIET, it was decided, would be born in red.</blockquote><p>A local leadership team was put together in order to assemble other teams required for launch. This team was also flown to Jakarta to understand GOJEK’s values and how it works. These would serve as the core values for GO-VIET as well, with the leadership adapting things as required to suit Vietnam.</p><p>Meanwhile, Trifecta was stabilising the launch environment, collaborating with the newly-minted team in Vietnam, and working with multiple GOJEK teams.</p><p>By June of 2018, the backend was ready. A working driver and consumer app, as well as on-boarding portals for driver partners had been set up, along with crucial business-related teams like BI and Fraud. GO-VIET was taking shape right in front of its makers’ eyes.</p><blockquote>Now for the testing:</blockquote><p>Over the next one month, the app, and by extension, the new environment and assorted services, were put through the wringer. First, employees mocking as drivers tried it in a staging environment, then the actual on-boarded drivers were given a shot, so the team could record their feedback.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/2592/1*dTinrKKxi8iegPBzQWP9Hg.jpeg" class="kg-image" alt="Good Morning, Vietnam — How GOJEK Went International"/></figure><p>Testing then moved to the production environment. It was time for the real deal. The dry runs began, and in the final phase of testing, early adopters were given access to try out the alpha version of the app.</p><p>Finally, it was done. The environment, the services, the app, the operations, the tree, the stone… they had all survived.</p><blockquote>GO-VIET was ready.</blockquote><hr><h1 id="the-final-push">The final push</h1><p><strong><strong><em><em>July 31, 2018 — Vietnam Beckoned</em></em></strong></strong></p><p>The environment was ready, everything was up and running. The app was live, with configurations changed so drivers would not be visible to anyone who downloaded it.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/4032/1*qskOob8GzQG4dfQNtb6__Q.jpeg" class="kg-image" alt="Good Morning, Vietnam — How GOJEK Went International"><figcaption>Gearing up for launch.</figcaption></img></figure><p>At 11.30 pm, the toggle was switched and test bookings were made on production with actual drivers and employees. The GO-VIET COO took the first ride. All was good.</p><p>Excitement was running high, and even GOJEK CEO Nadiem Makarim was in Ho-Chi Minh City (the first of GO-VIET’s operation centres) for the launch.</p><p>As the clock struck midnight, Trifecta hit the button, and specks of red lit up on the map within users’ GO-VIET apps. A few driver partners present at the launch venue confirmed that everything was working according to plan. It was done, we were live.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/1280/1*rGFDGc901ooLhdNl_GL7gw.jpeg" class="kg-image" alt="Good Morning, Vietnam — How GOJEK Went International"><figcaption>Celebrating a job well done.</figcaption></img></figure><blockquote>GOJEK had gone international.</blockquote><p><em><em>Cheers, high fives, applause, congratulations, the pop of celebratory drinks.</em></em></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/2592/1*dhwgBni28DIMJSGDuGr_vQ.jpeg" class="kg-image" alt="Good Morning, Vietnam — How GOJEK Went International"><figcaption>Vietnam, we’re here!</figcaption></img></figure><p>Rumour has it, everyone present tried to guess how many orders GO-VIET would garner on its first day. Expectations were exceeded. The brand new service did &gt;2,500 orders on day one, more than what GOJEK achieved on its first day in Indonesia.</p><p>It had been a long journey of planning and learning. The job was done; the path to Vietnam was charted. In the month of September, a formal launch was held, adding Hanoi to the list of cites the service operated in.</p><p>GOJEK, Indonesia’s first unicorn, had finally left home to find its place in the world. Now, all eyes turned to Thailand. Read what awaited us there in the <a href="http://bit.ly/2SmYCZ3" rel="noopener">part three</a> of this series.</p><hr><p>Liked what you read? Have our updates delivered straight to your inbox. <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p></hr></hr></hr></hr>]]></content:encoded></item><item><title><![CDATA[Gojek acquires AirCTO, expands operations in India]]></title><description><![CDATA[The AirCTO team will aid GOJEK’s hiring efforts. The company also announced its first office in Gurgaon with the intent to hire 100 employees.]]></description><link>https://gojek-ghost.zysk.in/gojek-acquires-aircto-expands-operations-in-india/</link><guid isPermaLink="false">Ghost__Post__5ec2aba47aa22c4066f83a79</guid><category><![CDATA[News]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Wed, 12 Jun 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_pv9f5vZHkiQGWL-ymwtzgA.jpeg" medium="image"/><content:encoded><![CDATA[<ul><li><em><em>GOJEK acquires AirCTO, a Bangalore-based company that uses AI tools to accelerate recruitment</em></em></li><li><em><em>GOJEK also opens office in Gurgaon, to hire 100+ people and expand operations</em></em></li><li><em><em>Plans to acquire companies to add to the existing talent pool</em></em></li></ul><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_pv9f5vZHkiQGWL-ymwtzgA.jpeg" alt="Gojek acquires AirCTO, expands operations in India"/><p><strong><strong>GURGAON:</strong></strong> <a href="https://www.gojek.io/" rel="noopener">GOJEK</a>, the Super App of Southeast Asia, acquired AirCTO, a Bangalore-based Artificial Intelligence recruitment platform, and opened its second engineering and product development centre in Gurgaon.</p><p>As part of the deal, the AirCTO team will be joining GOJEK with immediate effect and will be looking into building products that accelerate the recruitment of talent for GOJEK. The acquisition aligns with GOJEK’s focus on hiring premium talent to support the development of its ‘<a href="https://www.gojek.io/superapp/" rel="noopener">Super App</a>’. Terms of the deal were not disclosed.</p><p>The company has also announced the opening of a new office in Gurgaon, for which GOJEK plans to hire 100 employees aiming to reach a total headcount of 500 in India by the year-end. As part of its expansion plans, the company is also considering further acquisitions in India.</p><p><strong><strong>The Indonesian-headquartered company is actively interested in companies with complementary expertise in engineering, design and product management.</strong></strong></p><p><strong><strong>Quotes:</strong></strong></p><p>“Our investment in Gurgaon underlines our commitment to growing the GOJEK India story. We have looked at multiple ways to expand our operations and concluded that Gurgaon is a logical destination to set up shop, not least because of the amazing talent we have found in the area. GOJEK recorded an annualized Gross Transaction Value (GTV) of US$9 billion as of 2018, and the hyper-growth journey we’ve been on demands talent who are willing to take risks, fail, learn and continue to scale a company that aims to solve everyday problems for Southeast Asia. With operations underway in Singapore, Thailand and Vietnam, we will now consider whether further acquisitions are needed as we seek to bring in entrepreneurial teams who can help us further develop the multi-service business model that makes GOJEK a leader in Southeast Asia,” said <strong><strong>Sidu Ponnappa, MD India at GOJEK.</strong></strong></p><p>On the acquisition of AirCTO, <strong><strong>Sidu </strong></strong>added, “I’m super thrilled to have AirCTO’s talented team join us. The team will use technology to help us scale up our hiring processes. Finding quality talent is always a challenge, and Atif and team are here to find technology-based solutions that will help us to overcome this challenge.”</p><p><strong><strong>Atif Haider, Founder, AirCTO,</strong></strong> said, “At AirCTO we’ve focused on the pain points technology firms experience as they seek to find talent that fits their requirements. We believe that recruiting as an industry needs a major upheaval, and we started AirCTO with this in mind. Over the past three years, we’ve helped a range of startups and corporates source qualified candidates for critical technology roles. We were in talks with a number of other tech giants, but we found GOJEK to be the best fit, as we share similar DNA — something that’s really important for us. We intend to use our prowess in recruitment to contribute to the hyper-growth GOJEK is currently experiencing across Southeast Asia.”</p><p>Located at DLF CyberHub, Gurgaon, the 18,000+ sq.ft office is equipped to seat around 150+ employees. The centre offers all amenities including a 24/7 office with a cafeteria. The interiors reflect GOJEK’s signature combination of green and white with a touch of wood. The office will be a combination of open spaces, breakout areas for discussions, meeting rooms and coder caves.</p><p>The GOJEK Bangalore office recently won an Institute of Indian Interior Designers (IIID) award for the ‘Best Design’ category.</p><p>As part of the expansion, GOJEK’s largest India-based product team, GO-FOOD, will setup product divisions in the Gurgaon office. GOJEK is the largest single-market food delivery app in the world outside of China. It is the largest food delivery app in SoutheastAsia with over 400,000 merchants — 85% of these are small micro-entrepreneurs that rely heavily on GO-FOOD for revenue.</p><p>Working at GOJEK gives an opportunity to solve real challenges and transform lives across Southeast Asia. Earlier this year, <a href="https://twitter.com/gojektech/status/1095372174070665216" rel="noopener">Melinda Gates, Co-Chair of the Bill &amp; Melinda Gates Foundation</a>, called out GOJEK’s use of technology as a case study on how digital tools can help increase growth and inclusion. The company’s vision has fuelled the culture of ‘Social Impact’ and its deep narratives that can help the lives of millions.</p><p>GOJEK currently runs one of the largest JRuby, Clojure, Java and Go clusters in Asia. Its robust tech-infrastructure is built and managed by just 350+ engineers positively impacting millions in Indonesia, Singapore, Thailand and Vietnam.</p><p>At the beginning of the year, GOJEK announced the first closing of its ongoing Series F funding round led by Google, JD.com, and Tencent, along with Mitsubishi Corporation and Provident Capital. For more information click <a href="https://www.gojek.io/google-jdcom-and-tencent-lead-first-closing-of-gojeks-series-f-funding-round/" rel="noopener">here</a><strong><strong>.</strong></strong></p><hr><p><strong><strong>For media queries, contact apoorva.babu@go-jek.com.</strong></strong></p></hr>]]></content:encoded></item><item><title><![CDATA[A Tale of Two Designs]]></title><description><![CDATA[A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.]]></description><link>https://gojek-ghost.zysk.in/a-tale-of-two-designs/</link><guid isPermaLink="false">Ghost__Post__5eb11d87f7c7da001effccc0</guid><category><![CDATA[Design]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 16 May 2019 04:00:00 GMT</pubDate><media:content url="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/3.gif" medium="image"/><content:encoded><![CDATA[<img src="https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/3.gif" alt="A Tale of Two Designs"/><p>By Fatema Raja</p><p>This is the final part of a three-part series documenting the redesign of GoFood’s Checkout experience.</p><p><strong><strong>The story so far:</strong></strong> The GoFood redesign started by showing some much needed love to the ‘Checkout’ flow (read about the problems in <a href="http://bit.ly/2U8mm7s" rel="noopener">part 1</a> of this series). We moved from an overwhelming single page with too much information, to a more intuitive two-step design with a hope that the new design will help our users navigate the flow better (detailed in <a href="http://bit.ly/2FUiYDo" rel="noopener">part two</a>).</p><p>We rolled out the design to beta on August 12, 2018.</p><p><strong><strong>This is what our redesigned flow looked like?</strong></strong></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1434/1*wC6FYnnJilFxFkYwab1kLw.png" class="kg-image" alt="A Tale of Two Designs"/></figure><h2 id="one-week-later-">One week later:</h2><p>A 10% drop in our orders!!?</p><p>That… did not go according to plan. ?</p><p>But here’s the fun part: <strong><strong>The app worked, and the bookings went through.</strong></strong> No major out-of-whack tech issues. Yet, there we were, steadily losing orders.</p><p><em><em>Bugs? No.</em></em></p><p><em><em>Server issues? Nope.</em></em></p><p><em><em>Downtime, then? Nuh-uh.</em></em></p><p>After many such questions and no answer, we were left with just one conclusion. ?</p><p><strong><strong>The design change had made things worse.</strong></strong></p><p>Just when I thought my job was done, I realised it was only the beginning. For I knew, no solution was good enough until users were <strong><strong><em><em>successfully</em></em> </strong></strong>using it.</p><h1 id="strap-in-we-re-in-the-endgame-now-">Strap in, we’re in the Endgame now ?</h1><p>Prior to launch, we had rallied the team around a common definition of success — one that was quantifiable and easily measured. 10% drop in our orders did seem tragic, but we knew looking at a single metric wasn’t going to give us the full story.</p><p>Hence along with defining success metrics for our overall conversions, we also defined and tracked metrics for the smaller tasks, tasks that led the user to the final goal. This helped us monitor whether users were navigating through the flow as intended. As a designer it was important to not restrict myself to just wireframes and workflows, but participate and know these numbers inside out.</p><p>“Designers who are involved in setting success metrics are far better at driving impact than designers who are not”</p><p>— Julie Zhuo</p><h1 id="focusing-on-post-launch-productivity-">Focusing on post launch productivity ?</h1><p>When the overall booking rate dropped, we started digging deeper to find where the frictions were in the flow. We started sifting through the finer details and closely analysed the smaller tasks, the results were a bit surprising.</p><ul><li>By moving the location card to the top, our cancellation rate for <code>wrong address selected</code> dropped by 2% —<strong><strong>First win</strong></strong>☝️</li><li>There was no significant drop in the notes or dishes added to the cart. Much to our relief, the new interface was intuitive, users were able to locate the notes button and other dish details— <strong><strong>Second win</strong></strong> ✌️</li><li>Similar affirmative results with our payments and location card designs too — <strong><strong>More wins! ?</strong></strong></li><li>But, there was one issue. Most users who abandoned the flow, left it on the first step itself. Which meant nearly 8% of users did not even land on the second step of the redesigned flow<strong><strong><em><em> — </em></em>Big Loss<em><em> </em></em>?</strong></strong></li></ul><p>Our sanest conclusion was to wait, and give our users some time to get a hang of the new designs. <strong><strong>After all, old habits die hard</strong></strong>. Thousands of our users who were previously used to a single step now had to break a solid habit.</p><p>Yes, the old design was unacceptable (well, in the designer world at least ?). The new design — despite featuring enhanced UX — broke some habits for our users.</p><p><strong><strong><em><em>A week passed… then two…</em></em></strong></strong></p><p>Nothing changed. ️</p><p>After shuffling through tons of data, we found ourselves with a bunch of questions. W<em><em>ho were the users who abandoned their food at checkout? What were they thinking? Why would they do this?</em></em></p><p>To get these answered we coupled our quantitative data with some qualitative research — below are some crude user thoughts ?</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/3300/1*cv8FcC0pl0SQe4YkF8LHLQ.png" class="kg-image" alt="A Tale of Two Designs"/></figure><p><strong><strong>There were two major problems:</strong></strong></p><ol><li>Previously used to a single step, users weren’t prepared for a step 2.</li></ol><p>2. Most users added only 1–2 dishes, and for them the blank white space meant loading. Resulting in high uncertainty and agitation ?</p><p>Hence, most of them were reluctant to click on <code>NEXT</code> with the fear of placing the order — without them knowing the payment method or location ?</p><p>We were evidently drowning, but before we called for the lifebuoy, we tried to swim up ourselves. Not ready to give up on our precious designs, we decided to bring down the uncertainty by changing the copy on the button to <code>Proceed To Pay</code>. We hoped this would nudge users to realise there is a step 2 containing payment information.<br/></p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/1275/1*2FPbepaD2x3qVwjjFlUM8g.png" class="kg-image" alt="A Tale of Two Designs"><figcaption>The Hail Mary play.</figcaption></img></figure><p><strong><strong><em><em>Did it work? Did the uncertainty drop?</em></em></strong></strong></p><p><strong><strong>Much to our despair…nothing changed, no major impact.</strong></strong> Neither were we able to bring down the booking time, nor were we able to increase the conversion rate. Not even close to what we anticipated.</p><h1 id="murder-your-darlings-">Murder your darlings ??</h1><p>We had to be more open minded. If most of our users seemed unhappy with the design. we simply had to change it, Period ✋. It was time to hit the dashboards, analyse the problems, and form new ideas for improvements. With the growing numbers, one thing was clear, users wanted to <strong><strong>bring back the single page.</strong></strong></p><p>For our final solution we shifted from logic to emotion, focusing more on user’s thoughts and feelings at the time of ordering.</p><p>I asked myself, if I were a user and I had to know three things about my order, what would those be? ? — Card sorting came in super handy</p><ul><li><strong><strong>Location Card</strong></strong> — I want my food to come to me<strong><strong>. </strong></strong>I am hungry and the last thing I want is my food going to someone else ?. With a drop in the cancellation rate for<code>wrong address selected,</code> we knew retaining location card at the top worked like magic.</li><li><strong><strong>Dish Card — </strong></strong>If I am craving for a pizza, I better order the right pizza.<strong><strong> </strong></strong>Right below the location card was the<strong><strong> </strong></strong>dish card, helping users easily double check the dishes they added ?</li><li><strong><strong>Total amount and mode of payment — </strong></strong>Once I get my pizza, I don’t want to run around looking for cash. By sticking the total amount and payment method with the order button at bottom of the screen, we saved our users a long scroll. This also created a neat space to surface discounts and savings ?</li></ul><p><em><em><strong><strong>The final design was a single page with all three important fields (location, dish and payment) above the fold and easily accessible. An example of how it worked </strong></strong>?</em></em></p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/2808/1*P-Z4jTY31hMIs6FSqnLTmw.gif" class="kg-image" alt="A Tale of Two Designs"/></figure><p>These lightweight and progressive changes, helped our users cultivate new habits slowly and steadily, making the redesign bearable for them ?</p><h1 id="shipping-climbing-back-onto-the-boat-">Shipping — Climbing back onto the boat ?‍♀️</h1><p>We were finally ready to roll, no leap of faith this time!</p><p>On September 5, 2018. We rolled out our final solution to ~50k users, without rolling back any of the previous designs. We now had <strong><strong>three designs live </strong></strong>with three different user groups.</p><ul><li>Group 1 — Control Group (users with existing designs i.e. long scroll)</li><li>Group 2 — Two-step checkout redesign</li><li>Group 3 — Single step redesign</li></ul><p>Such a meaty chance to dissect and compare quantitative results. ? It helped me study and analyse the impact of all three designs against each other.</p><p><em><em>A day passed…</em></em></p><p><em><em>Then two…</em></em></p><p><em><em>Then a week or three later</em></em></p><p>We checked the data, ran the numbers, and validated our original hypothesis.</p><p>It had worked ?</p><p>The simplified single page was stabilising the order graph.<strong><strong> Soon, our booking rate was moving north (obviously not in a dramatic way), but it had gone up by ~5% and we saw a significant drop in the booking time.</strong></strong></p><p><br>These lightweight and progressive changes, helped our users cultivate new habits slowly and steadily, making the redesign bearable for them ?</br></p><h1 id="shipping-climbing-back-onto-the-boat--1">Shipping — Climbing back onto the boat ?‍♀️</h1><p>We were finally ready to roll, no leap of faith this time!</p><p>On September 5, 2018. We rolled out our final solution to ~50k users, without rolling back any of the previous designs. We now had <strong><strong>three designs live </strong></strong>with three different user groups.</p><ul><li>Group 1 — Control Group (users with existing designs i.e. long scroll)</li><li>Group 2 — Two-step checkout redesign</li><li>Group 3 — Single step redesign</li></ul><p>Such a meaty chance to dissect and compare quantitative results. ? It helped me study and analyse the impact of all three designs against each other.</p><p><em><em>A day passed…</em></em></p><p><em><em>Then two…</em></em></p><p><em><em>Then a week or three later</em></em></p><p>We checked the data, ran the numbers, and validated our original hypothesis.</p><p>It had worked ?</p><p>The simplified single page was stabilising the order graph.<strong><strong> Soon, our booking rate was moving north (obviously not in a dramatic way), but it had gone up by ~5% and we saw a significant drop in the booking time.</strong></strong></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1233/1*jkIWit9XBQlFoqCjZEn2OA.png" class="kg-image" alt="A Tale of Two Designs"/></figure><p>After enough validation, we incrementally rolled back the previous designs and moved all our users to the new designs one group at a time. And finally, the first piece of the GoFood redesign pie, was baked to perfection. The sweet taste of success! (We like food puns, it can’t be helped! ??‍♀️)</p><p><strong><strong>One part was over, designs were done!</strong></strong></p><p><em><em>Or were they?</em></em></p><p>GoFood is a fast-growing product, either adding features or enhancing current experience. Not a lot of time had passed after the design rollout, that the team decides to up-sell dishes on the checkout screen. It is interesting how (<a href="https://medium.com/u/b1f28485b3fa?source=post_page-----8c6a57fbfe05----------------------" rel="noopener">Sajesh Jose</a> and <a href="https://medium.com/u/1414f939f610?source=post_page-----8c6a57fbfe05----------------------" rel="noopener">Sugam Anand</a>) are trying to fit yet another component on the checkout screen, here’s a glimpse?</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/3137/1*y23YjUSmlBR0HNbU7sSPbg.png" class="kg-image" alt="A Tale of Two Designs"/></figure><p>Design is a journey, not a destination ❤️</p><p>The idea is to keep measuring, learning and evolving, whether it is adding a feature or enhancing the current experience.</p><p>Design is in fact a continuous feedback loop that cajoles you into believing there’s such a thing as product perfection.</p><p>This series was a way to disseminate my most important learnings from the GoFood redesign. I’ll leave you with a few key lessons learnt along the way:</p><p><em><em>If you fail: question it and fix it.</em></em></p><p><em><em>If you succeed: question it still, and make it better.</em></em></p><p><strong><strong><em><em>Iterate. Release. Validate. Repeat.</em></em></strong></strong></p><p>Fin.</p><hr><p>(Special shoutout to <a href="https://medium.com/u/65fccde63fdf?source=post_page-----8c6a57fbfe05----------------------" rel="noopener">Debayan Sen</a>, <a href="https://medium.com/u/29aa9cd53075?source=post_page-----8c6a57fbfe05----------------------" rel="noopener">Parveen Suhag</a> and <a href="https://medium.com/u/6549243f2318?source=post_page-----8c6a57fbfe05----------------------" rel="noopener">@geppegalih</a>).</p></hr>]]></content:encoded></item><item><title><![CDATA[To New Frontiers — How GOJEK Went International]]></title><description><![CDATA[The story of how GOJEK ventured beyond Indonesia— and the team that charted our course.]]></description><link>https://gojek-ghost.zysk.in/to-new-frontiers-how-gojek-went-international/</link><guid isPermaLink="false">Ghost__Post__5ec2d7d87aa22c4066f83c9e</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 02 May 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/2.gif" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/2.gif" alt="To New Frontiers — How GOJEK Went International"/><p>By Sooraj Rajmohan</p><h1 id="part-1-3-uncertainty">Part 1/3 | Uncertainty</h1><p>Indonesia — a constellation of 17,000 islands sprinkled between two oceans. A melting pot of ethnicities and cultures, home to the fourth largest population in the world, and ripe with business opportunity. This dazzling island nation is where GOJEK was born. Its chaotic streets were the playground where a scrappy young startup grew, and the love of its people saw GOJEK grow into a Super App.</p><blockquote><em>For GOJEK, Indonesia is home. Comfortable. Familiar. Safe.</em></blockquote><p>The story of a Super App, however, is about more than one country. It is about growing up, stepping out the door, and journeying into the unknown. This three-part series details GOJEK’s journey beyond Indonesia’s borders, and the story of the team that guided it through roads untraveled.</p><h1 id="the-mandate-the-madness-"><strong>The mandate. The madness.</strong></h1><p>In late 2017, at a meeting of product leads at GOJEK’s Jakarta HQ, then COO Rohan Monga confirmed the rumour that had been floating around hallways.</p><blockquote><em><em>We were going abroad.</em></em></blockquote><p>On paper, the idea was simple: GOJEK was targeting new markets in Southeast Asia — starting with Vietnam, Thailand and Philippines.</p><p>The reason for choosing these geographies went beyond the obvious (proximity). These countries have similar dynamics to pre-GOJEK Indonesia. The population numbers are in the same ballpark, broadband Internet penetration is high (and growing rapidly), the food delivery market is nascent, and there was no dominant player in the digital wallet space.</p><blockquote><em>The conditions were ripe for disruption.</em></blockquote><p>The plan was to launch swiftly and stealthily, and take competition by surprise. Each targeted geography even got its own codename. Vietnam was nicknamed Vogue, Thailand dubbed Tatler, and Philippines — Fortune (notice a pattern? 😋)</p><p>This was only the beginning, however. The plan was more elaborate.</p><p>It was important to recreate this feeling of pride in the brand in the new markets as well. To achieve this, it was decided to launch the new offerings with completely new branding — GO-VIET in Vietnam, and GET in Thailand. Everything about these new local brands was devised to emphasise the values of that country.</p><p>The goal: to build a local champion — one that the people, as well as commercial and regulatory agencies — could get behind. The vision was solid. Everyone was pumped.</p><p>But there was a problem:</p><blockquote><em>Our existing tech stack was already buckling under the strain of ever-increasing demand, and would not be able to handle new geographies.</em></blockquote><p>We would need a different solution. GOJEK had crossed the borders of the familiar, into the unknown.</p><p>One of the options that made sense was to decouple from Indonesia and create new environments for the new countries. This way, the scaling issues affecting Indonesia would not affect the new geographies, and GOJEK developers also got greater flexibility to customise and localise the app and products for the new markets.</p><p>But creating new environments/clusters (read mini-GOJEKs) came with its own set of complexities. This process also needed to be repeated in quick succession in each country.</p><p>The answer to this problem was using automation for cluster creation… but not on VM’s. To do something new, new technologies would have to be adopted. The path chosen was to use Kubernetes to automate cluster creation and service deployment on containers.</p><p>Unfortunately, no one at GOJEK had the insights or the bandwidth required to do this at the time. We had the vision. We knew what needed to be done.</p><blockquote><em>We needed the right people.</em></blockquote><h1 id="enter-team-trifecta"><strong>Enter Team Trifecta</strong></h1><p>It all started with a Product Manager, who was tasked with putting together a group of people to accomplish the task ahead. About a week in, three QAs joined, followed in another week by an eight-member crack team who would develop the initial Proof Of Concept (POC). The members of this team were cherry-picked from across GOJEK product teams (with a fair bit of negotiation and bargaining involved 😅).</p><p>It would be this team’s duty to first run an efficient proof-of-concept (POC) for the launch, and then develop frameworks, create playbooks, do product customisation and automate infrastructure creation and deployment. The idea was to create a scalable model and replicate it in any new country GOJEK wanted to launch in.</p><p>International expansion was a big deal though, and an exciting challenge. As Trifecta’s work picked up steam, more people would put up their hands to work on this exciting new project, over and above their existing responsibilities.</p><p>While the core Trifecta team went about its business to create a POC, a specialist four-person team was brought in. Their job was to work in parallel on our big play — automate cluster creation.</p><blockquote><em>We had a fellowship. It was time for the journey.</em></blockquote><p>Trifecta’s first task was to figure out all the changes that had to be made to build a new app for each country. As soon as this project started, it became apparent that a long uphill climb lay ahead.</p><p>For starters, the driver app was never built in a way to support any other language besides Bahasa Indonesia. This had to be re-engineered so it could support localisation/i18n.</p><p><strong><strong>And then there was Stan Marsh.</strong></strong></p><p><a href="https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf" rel="noopener">Stan Marsh</a> is a legendary name in the GOJEK mythos. It refers to our late legacy codebase. Stan Marsh was the beast of burden that carried GOJEK through the early years, and each new commit made to it was often a desperate attempt to douse a fire and keep GOJEK up and running. Understandably, a lot of legacy services and Stan Marsh were not designed to support GOJEK’s journey into new geographies.</p><p>Trifecta members found stumbling blocks everywhere — there was no provision for new currencies and time zones, for example. The pack mule was struggling to keep up with the party.</p><p>One thing was obvious — GOJEK’s entire mobile codebase had to be re-architected to be able to efficiently build multiple apps and designs on top of it.</p><blockquote><em>Automation on Kubernetes would have to wait.</em></blockquote><blockquote><em>We had a detour to take.</em></blockquote><h1 id="descending-into-the-mines"><strong>Descending into the mines</strong></h1><p>First things first — Trifecta needed an environment to play around in and do the testing without affecting the BAU. The team dusted off an old User Acceptance Testing (UAT) environment, which was not in use at the time, and proceeded to do experimentation and development within it. Slowly, the GOJEK app was dismantled and rebuilt into a new avatar that would service new markets.</p><p>This turned out to be a lot more complicated than it first sounded (which is a common plot point throughout this story, as you will see 😐). Major changes needed to be made to the driver onboarding portal, for instance, and the team needed to figure out ways to transfer money from the wallets of driver partners into their bank accounts.</p><p>GOJEK was always used to having multiple support teams, and well-established bank integrations to help with such matters. In this new territory, it all needed to be figured out from scratch. Add to the fact that GOJEK itself was rapidly evolving, making it difficult for the team to figure out which services should be transitioned and which would soon be deprecated, and the job became more complex. As Trifecta PM Sourabh Gupta puts it:</p><blockquote>“It was like changing wheels on a moving car.”</blockquote><p>While the main team focussed on transforming existing services and mobile architecture to build a working POC, a parallel team undertook the long and painful journey to understand inter-service dependencies that would need to be tackled.</p><p>Ironically, they were themselves depending on multiple GOJEK product teams to understand the dependencies of over 400 microservices. This was crucial in order to chart out a plan for automating the deployments and cluster creation.</p><p><strong><strong>Hours turned into days…</strong></strong></p><p>Documentation was scarce, and the team had to undertake the painstaking process of talking to service owners, and map out configurations. This also meant many GOJEK team members had to take time out of their daily routines to spend on knowledge transfer.</p><p><em><em>Identify, document, dismantle, develop. Over and over.</em></em></p><h1 id="an-emergence-a-transformation-"><strong>An emergence. A transformation.</strong></h1><p>It took some doing, but finally, there was a glimmer at the end of the tunnel. Trifecta emerged into the light of a new day with a finished POC. A relatively complete driver and consumer app that were worthy of upload to the Play store.</p><p><em><em>The deadline the team had given itself was three months.</em></em></p><p><strong><strong><em><em>It had only taken two-and-a-half.</em></em></strong></strong></p><p>Trifecta’s eight-member crack team had accomplished what it set out to do, and built a working POC. Their role in this journey was at an end, and so they disbanded and went back to their product teams. The original fellowship was no more.</p><blockquote><em>The team working on dependencies however, was facing rough weather.</em></blockquote><p>Sifting through those 100s of microservices was taking longer than expected, and the knowledge transfer meetings were slowly losing attendance. Progress was imbalanced, and the parallel approach was not yielding results. There was only one move that made sense: absorb the engineers into the core Trifecta team.</p><blockquote><em><em>The birth of a new party for the next stage of the journey.</em></em></blockquote><p>The constitution of the team had changed, but the goal remained the same. The first months of 2018 saw Trifecta work tirelessly to untangle the intricate dependency map of GOJEK’s microservices. The process was tedious, but it did have a silver lining. We now had a ton of documentation about GOJEK’s product and service architecture — a path had been cut through the woods for others on similar journeys.</p><p>Finally, a clear picture emerged.</p><p>It… looked a little like this:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/3456/0*DPnYDJeeyJxE8uSI" class="kg-image" alt="To New Frontiers — How GOJEK Went International"/></figure><p>Months of work, depicted in a single image. Complicated as it looks, this was a major breakthrough. The key to the codex.</p><p>Initially, it was estimated that in order to launch with two key products (GO-RIDE and GO-SEND) GOJEK would need to deploy 40 microservices for the new clusters. With each new dependency unearthed, that number kept inflating. Integration of GO-PAY services (which were required for maintaining a driver wallet, and to handle incentives and subsidies) brought its own set of complexities, as its services and tech architecture was modelled differently from the rest of GOJEK.</p><p>As the launch timeline drew closer, there were over 100 microservices to deploy. Not an easy task, but the team finally knew what needed to be done.</p><p>The fog of war was finally parting. Now, to build a working environment.</p><h1 id="gunning-for-the-finish-line"><strong>Gunning for the finish line</strong></h1><p>The work on automation and deployment scripts now continued as originally planned. The wheels were in motion again, and passing through terrain GOJEK knew well. It was time to build stuff.</p><p>OpsTech, Transport, GO-SEND, Marketplace, Driver Platform, GO-PAY and Platform teams provided backup, and the products for Vietnam launch were developed (we would launch with GO-RIDE and GO-SEND). The team was working efficiently, and as the cool grip of winter began to give way to the warm summer months, a basic environment was up for app development.</p><blockquote>Then came the next wave of trouble.</blockquote><p>As the environment took shape, our inexperience in dealing with new geographies came back to haunt us. Configuration mismatch across clusters and deployment drift reared their heads. Suddenly, there were more questions that needed answering:</p><blockquote><em><em>1.Where would we manage configuration of services for all the new markets?</em></em></blockquote><blockquote><em><em>2. How would we deploy on containers and ensure that the same version of code was running on all environments?</em></em></blockquote><blockquote><em><em>3. What about logging and monitoring?</em></em></blockquote><p>The goal seemed an eternity away, again.</p><p>Chaos ensued.</p><p>For the continued story of how GOJEK grappled with the challenges brought on by a new geography, read <a href="http://bit.ly/2Rm2cSC" rel="noopener">part 2</a> of this 3 part series.</p><hr><p>Want our updates beamed straight to your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter" rel="noopener">Sign up for our newsletter!</a></p></hr>]]></content:encoded></item><item><title><![CDATA[The Big Design Fix (And Miss)]]></title><description><![CDATA[A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 2 of 3) | The new redesign]]></description><link>https://gojek-ghost.zysk.in/the-big-design-fix-and-miss/</link><guid isPermaLink="false">Ghost__Post__5eb11d7af7c7da001effccbc</guid><category><![CDATA[Design]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 04 Apr 2019 04:00:00 GMT</pubDate><media:content url="https://res-4.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part2.gif" medium="image"/><content:encoded><![CDATA[<img src="https://res-4.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part2.gif" alt="The Big Design Fix (And Miss)"/><p>By Fatema Raja</p><p>You are reading part two of a three-part series. Wondering how we got here? <strong><strong><em><em>Here’s the story so far:</em></em></strong></strong> we were redesigning the checkout experience for Gojek’s food delivery product — GoFood.</p><p><strong><strong>Why did we do a design change?</strong></strong> Because nearly 20% of our customers abandoned food in the cart at the ‘Checkout’ page. ?</p><p><strong><strong>What’s the reason for that? </strong></strong>There’s a dozen of them! Read the first piece in this series for details on how we went about our research to understand users’ pain points.</p><blockquote><em><em>Clearly, our original flow had issues. We had to change the structure to not only support the complexity of the page, but also make it seem easier and intuitive to use.</em></em></blockquote><p><strong><strong>This piece is about solutions. Our ephemeral moment of joy. </strong></strong>??</p><p>Once everyone understood the problems, it was time to point the team towards a common vision. We knew that the main issue sprung from the user needing to perform multiple actions and verifications — on a single page.</p><p>To illustrate, below are the five components chopped from our old checkout page (that required three scrolls to navigate through).</p><figure class="kg-card kg-image-card kg-width-full"><img src="https://miro.medium.com/max/9621/1*oG0g_9vKuFvO3q59qk7Juw.png" class="kg-image" alt="The Big Design Fix (And Miss)"/></figure><p>Numerous iterations (in double digits if I had to recall the number), countless paper sketches, and feedback sessions followed. It took us another month to finally find and roll out the solution. Safe to say we kept the proverbial midnight oil burning.</p><h1 id="the-ideal-solution-here-we-go-">The ideal solution, here we go.. ?</h1><p>As described in <a href="http://bit.ly/2U8mm7s" rel="noopener">the last post</a>, we had identified five distinct problems with our old Checkout flow that frustrated around 20% of users enough that they abandoned their order. For each one of the problems we identified, we came up with a corresponding solution:</p><h2 id="solution-1-simplify-information">Solution 1 — Simplify Information</h2><p><em><em>(Problem: Verbose Information)</em></em></p><p>It was time to be brutal and cut down on information density. We started off by asking a few questions:</p><p><strong><strong><em><em>What goes with what? Do we really need this, or that? </em></em></strong></strong><em><em>— </em></em>This approach helped us group similar content<em><em> </em></em>and reduce visual complexity by combining or eliminating information altogether.</p><p>Here’s an example. Our existing dish card consisted of the following components:</p><ul><li>Dish Name</li><li>Dish Price</li><li>Stepper (number of dishes added)</li><li>Notes (added by the user)</li><li>Dish Description</li></ul><p><em><em>Our primary aim was to shrink the size of the card by removing or hiding redundant information and adding delight. It conjured up <strong><strong>Maeda’s Principle of Simplicity — SHE</strong></strong>. (<strong><strong>S</strong></strong>hrink, <strong><strong>H</strong></strong>ide, <strong><strong>E</strong></strong>mbody).</em></em></p><p>Our redesigned dish card was laid out like this:</p><ul><li><strong><strong>Dish Name, Number (stepper) and Price:</strong></strong><em><em> </em></em>This is the minimum information a user requires to confirm the dish in the cart to move forward. So we decided to retain this as is.</li><li><strong><strong>Notes: </strong></strong>There was a huge argument about this one — some said <em><em>“let’s remove notes entirely” </em></em>while the others debated<em><em> “ let’s do it at cart level rather than having them per dish”.</em></em> But our <strong><strong>data said otherwise: 7 out of 10 dishes ordered had notes added</strong></strong>. This is very much a cultural nuance in Indonesia; people order in groups and want their food customised to a point that bewilders someone from the outside, like me. For example: while ordering the traditional Padang — <strong><strong>notes look like this: (1) ayam pop, rice with ayam pop plus gulai soup plus rendang seasoning, no papaya leaves, more ayam pop sauce, spicy pleaseeee, wrap it in one pack</strong></strong>… because people there have different preferences on the level of spiciness and packaging. Hence, we decided to retain notes, but <strong><strong>H</strong></strong>ide it behind a 16 x 16 button which saved us over a 100 pixels ?.</li></ul><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/2560/1*lxRyLn7OhauJt-o1wF9YNA.png" class="kg-image" alt="The Big Design Fix (And Miss)"><figcaption>The redesigned notes section :)</figcaption></img></figure><p><strong><strong>Dish Description:</strong></strong><em><em> </em></em>Technically<em><em> </em></em>users need the dish description <em><em>before</em></em> adding it to the cart (to get a sense of the taste, of course!). So, finding no use for it in the cart page, we considered removing it altogether. BUT, we didn’t want to bombard the user with too many changes in the redesign. Hence, we decided to <strong><strong>S</strong></strong>hrink and reveal only a portion of the description, retaining the rest behind a click. (A<em><em>fter a lot of trial and error, we decided on revealing 3 lines max — keeping in mind various device sizes and our content quality</em></em>).</p><ul><li><strong><strong>Dish Images: </strong></strong>Our conversion rates for dishes with images was way better than dishes without images (<em><em>6 out of 10 dishes ordered had images </em></em>??). To make up for the missing notes and shrunken description, we took full advantage of the saved real estate to bring in dish images on the checkout page, in order to drive monetary growth (ordered dishes) and improve business metrics. Oh, and obviously, add more delight for our users. ?Hence<strong><strong> E</strong></strong>mbodying the dish card.</li></ul><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/8192/1*XD1Up4ZPcOBfcAI4hjgBjQ.png" class="kg-image" alt="The Big Design Fix (And Miss)"><figcaption>Dish description redesigned :)</figcaption></img></figure><p>We applied the same principle to <strong><strong>payments, delivery, voucher &amp; billing. </strong></strong>Obviously, we shifted through troves of data points for each of these ?. We made a few radical changes, but without overwhelming the user.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/3832/1*XGfs2FbfyIYgmqU548uCtA.png" class="kg-image" alt="The Big Design Fix (And Miss)"/></figure><p>Solution 2 — Progressive Disclosure</p><p><em><em>(Problem: Cognitive overload)</em></em></p><p>Our aim here was for each component to be self evident, It was important to not only simplify each section, but also reveal them in order of relevance. Rather than throwing information at our users, we wanted to gracefully <em><em>present </em></em>it — to maintain their attention by reducing clutter and confusion.</p><p>Things that are related logically, are related visually.</p><p>After a lot of arguments and brainstorming around user behaviour and device sizes, we locked down on the <strong><strong>two-step checkout design</strong></strong> — we divided the five components from a single page into two different steps.</p><p>This was a huge shift in thinking, and was going to add an element of confusion among our loyal users. Instead of taking 100 actions on one page, our fall back was to divide and conquer. A calculated leap of faith ?</p><p><em><em><strong><strong>Page 1 </strong></strong>— Check dishes, Cross selling &amp; Total price (food-related information)</em></em></p><p><em><em><strong><strong>Page 2</strong></strong> — How to pay and where to deliver (checkout-related information)</em></em></p><p>This improved usability by presenting only the minimum data required for the task at hand. It also helped us achieve the following:</p><ul><li>Bring down cognitive overload.</li><li>Ease decision making.</li><li>Free up real estate for business and monetisation (banners, up-selling).</li></ul><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/1646/1*CNqM5aQ_WM9on7xL1KJ3bQ.png" class="kg-image" alt="The Big Design Fix (And Miss)"><figcaption>Two-step checkout design</figcaption></img></figure><p>Solution 3 — Bring down checkout time</p><p><em><em>(Problem: Prolonged Checkout)</em></em></p><p>With a simplified structure of divided steps, our on-point hypothesis was: <strong><strong>lesser time taken to checkout ⏳</strong></strong>. However, a lot of us also argued that the extra step might increase the time instead. So we double-checked our hypothesis with a quick usability test. Much to our relief, the two-step process showed positive signs and was proved to be faster.</p><p><strong><strong><em><em>click-click </em></em></strong></strong>over<strong><strong><em><em> scroll-scroll-scroll-click.</em></em></strong></strong></p><p>Another small change that saved time was to make the CTA sticky on both the steps, this saved users from scrolling all the way to the bottom to take the primary action.</p><h2 id="solution-4-reduce-cancellations">Solution 4 — Reduce Cancellations</h2><p><em><em>(Problem: High Cancellations)</em></em></p><p>One big way to solve this was to bring our location card in focus, hence we featured it prominently at the top on the second step (refer to the image above), and not hidden behind a scroll. This made it easy for the user to immediately verify delivery location as soon as they landed on this page, reducing cancellations caused by an incorrect delivery address.</p><h2 id="solution-5-ship-delight">Solution 5 — Ship delight</h2><p><em><em>(Problem: Lacks love)</em></em></p><p>Shipping delight was critical for GoFood. As a brand, we were known to be fun and colloquial — we wanted our designs to reflect this trait visually ❤️</p><p>Here’s an example of how we did it:</p><p><strong><strong>Our old designs</strong></strong> used the native pop-up to throw an error every time a GoFood user placed an order above our maximum distance limit (25 km). It needed some love, as we were dealing with hungry (and sometimes, cranky) minds. We tried to make this screen more fun and informative.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1775/1*DKNTiA926KjyJyhR2rNPwQ.png" class="kg-image" alt="The Big Design Fix (And Miss)"/></figure><p>We gave our users an understanding of why we don’t do food delivery above 25 km, and added a delightful illustration that was relatable for people in Indonesia.</p><p>The above illustration depicts a very common (funny) occurrence on the streets of Indonesia. Ever tried asking for an address or direction there? Well, chances are, you will end up exactly where you started. Yeah, that happens a lot! ?</p><p>Some more examples of sprinkling love ❤</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/4070/1*RJJw-wTDJMfrKJdndgsY_w.png" class="kg-image" alt="The Big Design Fix (And Miss)"><figcaption>❤ Delight all the wayyyy ❤</figcaption></img></figure><p>Designing for edge cases ?</p><p>Another important step (often forgotten by designers) under the redesign sparkle was solving for edge cases. It helps us reinforce usability in our designs by ensuring whatever the user is trying to do works.</p><p><em><em><em>“Why can’t I place my food order? Why is the ORDER button disabled?”</em></em></em><br><em><em>— From a user who added 3 pizzas to their shopping cart at around 8:45 pm and revisited the cart at 9:30 pm to place the order.</em></em></br></p><p>Unfortunately, the pizzeria shuts at 9 pm. But, there was no way for the user to know that since she accessed the cart directly from the homepage. ?</p><p>Solving for the maximum in the happy flow, we didn’t sweat on <strong><strong>edge cases </strong></strong>initially, but now that we had fleshed out our designs, it was time to turn the spotlight on our beloved edge cases . This helped reduce drop offs due to uncertainty, and increase business by guiding the user through it.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/2869/1*4yrjldadvKavC9mA0V9-wQ.png" class="kg-image" alt="The Big Design Fix (And Miss)"><figcaption>Edge Cases — The Underdogs</figcaption></img></figure><p>Collaborating with engineers ?‍?</p><p>It’s one thing to have solutions in static sketch files, and a whole different feeling to see them in action. We provided the engineers with prototypes to help them paint a better picture and make our solutions more believable. ?</p><p>Another efficient way we communicated design intent was to actually sit with engineers. We did frequent design QAs — this helped us execute the expected experience and gave us the ultimate pleasure of seeing every working pixel matching our sketches.</p><h1 id="ready-to-launch-">Ready to launch ?</h1><p>PHEW! DONE!!</p><p>The new design was finally ready to ship. We were super excited to hear what our users thought and how much they like our new, redesigned Checkout flow. Pats on backs for the amazing work, research, and collaboration.</p><p><strong><strong>This was our moment of truth. All the months of hard work summed up in this 6-second GIF </strong></strong>?<br/></p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/600/1*FtK9462_qZrZ-g_xSDIGyA.gif" class="kg-image" alt="The Big Design Fix (And Miss)"/></figure><p>Going to Beta ?</p><p>Before rolling out to our millions of users, as is practice, we launched a beta version to about 50K users. This was a good size for us to understand how things were shaping up, and if we needed to go back to the drawing board.</p><p>Things seemed okay — not too good or bad, no major dropoffs, the conversion graph looked stable. Just like any good redesign, we were giving time to our users to adapt to the new change before we received the desired applause.</p><p>Instead…</p><p>Radio Silence.</p><h1 id="two-days-into-the-new-designs">Two days into the new designs</h1><p>Things were not looking good. We took an entire week to collect meaningful data. We lost a few thousand orders at peak. ??</p><p>That was not normal, that was the definition of a colossal mess up… The results were the stark opposite to what we had anticipated.</p><p>By changing the UX flow on GoFood to <em><em>supposedly</em></em> offer a better experience, we lost thousands of bookings. A minor miscalculation in the decisions we took (well, in hindsight, major) had broken the flow for our most loyal users, and annoyed them enough to look elsewhere to satiate their tummies.</p><p><em><em>What happened?… What went wrong? </em></em>?</p><p><strong><strong>Read about how we identified what went wrong, and the steps we took to fix things — in the </strong></strong><a href="http://bit.ly/2HvbreJ" rel="noopener"><strong><strong>third and final part</strong></strong></a><strong><strong> of this series.</strong></strong></p>]]></content:encoded></item><item><title><![CDATA[How Design Can Build or Break a Business]]></title><description><![CDATA[A UX case-study on redesigning the GoFood ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.]]></description><link>https://gojek-ghost.zysk.in/how-design-can-build-or-break-a-business-1-of-3/</link><guid isPermaLink="false">Ghost__Post__5eb11d29f7c7da001effccb7</guid><category><![CDATA[Design]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 02 Apr 2019 04:00:00 GMT</pubDate><media:content url="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part1.gif" medium="image"/><content:encoded><![CDATA[<img src="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part1.gif" alt="How Design Can Build or Break a Business"/><p>By Fatema Raja</p><p>GoFood needs little by way of introduction. The largest food delivery service in Southeast Asia, 300,000+ merchants, 16 million menu items… you get the drift. With figures like that, you’d expect the GoFood user experience to be the best in the business.</p><p>Why then, did nearly 20% of GoFood users leave the checkout flow after adding items to their cart?</p><p>Something wasn’t adding up.</p><p>Our user flow was broken, and we needed to fix it.</p><p><strong><strong>TL;DR: </strong></strong>This post is <em><em>part one </em></em>of a three-part series highlighting the case study and critical considerations that went into redesigning the <strong><strong>Checkout</strong></strong> experience for GoFood — Gojek’s food delivery product.</p><h1 id="lights-camera-">Lights, Camera… 💡🎥</h1><p>GOJEK was going through a major facelift in 2018. For a Super App with 19+ products, we had all the scale-related issues one could imagine. We desperately needed an efficient system for our designers and developers. This gave birth to<a href="http://asphalt.gojek.io/" rel="noopener"> Asphalt — GOJEK’s very own Design Language System</a>.</p><p>The redesign started with our transport app — GoRide. It was then time to show some love to Gojek’s prodigal child — GoFood.<em><em> </em></em>The product owner walked up to to me and said <em><em>— “Let’s go beyond just the UI, and rethink the entire user experience, instead of ceding over features as is.”</em></em></p><p>What he meant — <em><em>“Get ready! Lots of sleepless nights coming your way. We’re going to do a mammoth redesign, the likes of which minions like you will crumble under.”</em></em> ?</p><h1 id="-action-">🎬 Action!</h1><p>We wanted our redesign to solve problems with specific business constraints, and we knew it was impossible to do so without delving into user problems first.</p><p>Finding the right problem to solve is harder (and more important) than finding the right solution.</p><h1 id="first-comes-the-framework">First comes the framework</h1><p>To achieve this, we pinned some critical thumb-rules before embarking on our redesign journey:</p><ul><li><strong><strong>To be data-driven</strong></strong>. (“Design is not about making things pretty” — I’m going to parrot this line 10 times over in this blog and if you ever talk to me😅)</li><li><strong><strong>To</strong></strong> <strong><strong>incorporate the existing brand perception into all designs</strong></strong>. (Marketing says fun and creative but product looks dull and boring?Problem!)</li><li><strong><strong>To empathise with users and business requirements.</strong></strong> (Always chase the full story, be user-centric and business-driven)</li></ul><p>To put the framework to use, we started white-boarding our in-app user flow. In the journey graph, we noticed a large number of users were dropping-off<strong><strong><em><em> </em></em></strong></strong>at our checkout page<strong><strong><em><em>.</em></em></strong></strong> That means<strong><strong> nearly <em><em>20% </em></em>of our users who added items to their cart, left the flow right before placing the order (the last step) — the checkout page</strong></strong></p><figure class="kg-card kg-image-card kg-width-full kg-card-hascaption"><img src="https://miro.medium.com/max/2673/1*fJ2s_mHGtrYDeXV3kEajzg.png" class="kg-image" alt="How Design Can Build or Break a Business"><figcaption>We summed up the results to visually represent the emotional state of our in-app user journey.</figcaption></img></figure><h1 id="understand-users-pain-points-">Understand users’ pain points 😩</h1><p>The second step was to understand our users’ pain points with the existing UX in the checkout flow. To dig deeper into this, we reached out to our users directly (kudos to the research team for setting this up).<strong><strong> We adapted both qualitative and quantitative methods to get to the root of every problem in the picture.</strong></strong> We then accumulated all our learnings into a consumer journey infographic.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/2572/1*3TzMeTjeKDD2oH4ZbPhp4w.png" class="kg-image" alt="How Design Can Build or Break a Business"><figcaption>User journey map | Courtesy: GoFood research team :)</figcaption></img></figure><p>We wanted to involve the whole GoFood team, beyond just research and design. <strong><strong>This made it more collaborative than the traditional sharing and feedback loop. </strong></strong>To reinforce this, we conducted several internal sharing and brainstorming sessions. The research team also put together a fun quiz for user personas.</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://miro.medium.com/max/2856/1*lyqCBZNfBuBOUsUVFUo3-g.png" class="kg-image" alt="How Design Can Build or Break a Business"><figcaption>Internal brainstorming sessions — Researchers, Engineers, Designers, PMs &amp; UX writers.</figcaption></img></figure><p>What were the results?</p><p>As anticipated, our users felt agitated, confused and overwhelmed, resulting in a big drop off at the Checkout page. Here’s some of the feedback from our users:</p><p><strong><strong><em><em>“I find this step too confusing.”</em></em></strong></strong></p><p><strong><strong><em><em>“A lot of times my order button is disabled (grey) and I don’t know why.”</em></em></strong></strong></p><p><strong><strong><em><em>“I often miss rechecking some information at this step, most times I only focus on payment.”</em></em></strong></strong></p><p><em><em>This entire process was important for us — to be able to go to the field, do interviews, research, and speak to our customers directly. It gave us tremendous insight into the product development, and is precisely what made our product so good. This was not only fun but extremely useful.</em></em></p><p>With all the research and data at our disposal; we realised that redesigning the checkout flow first will not only enhance the user experience, but help solve a critical business problem.<br/></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/3278/1*T8b-QbwwRfMeWK14MOyKmg.png" class="kg-image" alt="How Design Can Build or Break a Business"><figcaption>Needs a lot of ❤, doesn’t it?</figcaption></img></figure><p>The original page consists of <strong><strong><em><em>five</em></em></strong></strong> components on one <strong><strong><em><em>single</em></em></strong></strong> page. It was extremely overwhelming for most of our users:</p><ol><li>Dish Details and Notes card</li></ol><p>2. Delivery Location Selection card</p><p>3. Payment Method Selection card</p><p>4. Voucher card</p><p>5. Billing &amp; Discounts card</p><figure class="kg-card kg-image-card kg-width-full"><img src="https://miro.medium.com/max/9621/1*X50izz9abnZyu81K55q_zA.png" class="kg-image" alt="How Design Can Build or Break a Business"/></figure><p>Hats off to our users for being patient. I say this because every time a user lands on this page, they had to process a verbose set of information, and perform countless actions<strong><strong><em><em> in a single page </em></em></strong></strong>to just <em><em>‘confirm’</em></em> one food order. Painful. ?</p><p><em><em>Design is integral. Design is sacrosanct. While companies are now paying heed to the importance of design, GOJEK, by virtue of being a #SuperApp, had to imbibe design logic into its very fabric.</em></em></p><p>So we got to work.</p><h1 id="defining-each-problem-">Defining each problem ⚡️</h1><p>Once we dissected the users’ goals and pain points, we had a clear picture of all the problems that plagued the Checkout flow. We narrowed our learnings to <strong><strong><em><em>five</em></em></strong></strong> primary user problems to form a common understanding of what we were trying to solve.</p><h2 id="problem-1-verbose-information">Problem 1: Verbose Information</h2><p>The first thing most users did on this page was <em><em>scroll, scroll and scroll</em></em>. <strong><strong><em><em>3 scrolls minimum</em></em>. </strong></strong>Also, did you notice the amount of text? We’re in the age of micro-blogging and us millennials have the attention span of goldfishes, for crying out loud!</p><h2 id="problem-2-cognitive-overload">Problem 2: Cognitive overload</h2><p>The page was overflowing with tasks that required explicit actions from the user. Do this. And that. And hey, this too. Oh wait, THAT TOO. Chaotic. Select delivery location but first find where it is, check the total, select payment method, glance through all the dishes added to the cart, apply your discount voucher….?</p><h2 id="problem-3-prolonged-checkout">Problem 3: Prolonged Checkout</h2><p>Too many actions and redundant information caused users to spend more than <strong><strong><em><em>2 minutes</em></em></strong></strong> just to confirm and place a simple order. Time wasted, energy wasted, tummy still not fed. 😫</p><h2 id="problem-4-high-cancellations">Problem 4: High Cancellations</h2><p>A large sum of our users hurried through this step without actually double-checking delivery location details (<em><em>buried under a scroll somewhere</em></em>). This resulted in nearly 3% of our users cancelling and reordering the same cart with an updated address (that’s another story in itself).</p><h2 id="problem-5-lacks-love">Problem 5: Lacks Love</h2><p>There was nothing delightful about this page. The dishes didn’t have images on checkout, the icons weren’t consistent, and had too much clutter. It was just text and buttons stacked in the form of black and white cards. No, seriously, even the active ‘<em><em>Add more items’ </em></em>button was a plain grey.</p><p><em><em>In a nutshell<strong><strong>,</strong></strong> our flow lacked information hierarchy, delight, structure, was too complex, and in all… poor.</em></em></p><p>In order to fix this, we spent a month researching, ideating, and defining the problem. Then we ideated some more, deliberated, chugged way too much beer (to add some philosophical thinking), and tried to justify one solution after another with the right data and metrics.</p><p>We were ready. We had all the answers. ?‍🤦‍♀️</p><blockquote>Boy, were we wrong.</blockquote><p>In the <a href="http://bit.ly/2FUiYDo" rel="noopener">next post</a>, I’ll detail all the steps we took to arrive at this perfect <em><em>(lol) </em></em>solution — and how it all went downhill.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-4.png" class="kg-image" alt="How Design Can Build or Break a Business"/></figure><p>Working at GOJEK is an exercise in learning from experience. Sometimes, we find ourselves confronted with undocumented and unsolved problems — which are expected when building a Super App. We could use a hand in solving these problems though. If you have the skills for the job, head over to <a href="http://bit.ly/2I4d8lx" rel="noopener">gojek.jobs</a>, and join the crew of our rocket ship. 🚀</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-3.jpeg" class="kg-image" alt="How Design Can Build or Break a Business"><figcaption><a href="https://gojek-ghost.zysk.in/how-design-can-build-or-break-a-business-1-of-3/www.gojek.jobs">gojek.jobs</a></figcaption></img></figure>]]></content:encoded></item><item><title><![CDATA[How Kafka Solved a Culture Problem at Gojek]]></title><description><![CDATA[Software stopped us from scaling, software set us free.]]></description><link>https://gojek-ghost.zysk.in/how-kafka-solved-a-culture-problem-at-gojek/</link><guid isPermaLink="false">Ghost__Post__5eb1194bf7c7da001effcc98</guid><category><![CDATA[Culture]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 14 Feb 2019 07:44:00 GMT</pubDate><media:content url="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Kafka.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Kafka.jpg" alt="How Kafka Solved a Culture Problem at Gojek"/><p>Software can solve cultural problems. While that might seem outlandish, if you’re a developer, you might just get what I mean. Think about it carefully; it can repeat mundane tasks, making people more productive. It can solve complex problems, so devs can focus on pressing tasks.</p><p>However, it can also complicate culture; like introducing a biometric system to track employee attendance, and have software track sick leaves.</p><blockquote>In essence, an organisation’s tech stack will reflect the health of the company.</blockquote><p>If you’re focused on writing beautiful code, it’s likely that employees are disciplined, organised, and believe in the company’s values. It’s really not that far-fetched a correlation.</p><p><strong><strong>This is a similar story; the story of Kafka — an open source tool that solved culture for us.</strong></strong> Will try and simplify this for a broad audience, so devs, please bear with me if some explanations seem obvious and trite.</p><h3 id="before-the-law-chaos">Before the Law — Chaos</h3><p>In late 2015, unprecedented scale and failures were routine at Gojek. It also weighed heavily on <a href="https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20" rel="noopener">culture</a> — because firefighting when systems are down bogs down morale and creates a fractious lot. It was truly Kafkaesque. (See what I did there? 😉). These fractures were common in our early days, because all developers depended on our core systems.</p><p>We had about 10+ products at the time and about 60+ developers (Today, we have 18+ products with 250+ developers overseeing them). These 60 passionate devs saw the chance to build products, solve complex problems and moved fast to meet rapacious demand. Naturally, people were doing their own work, <strong><strong>writing code in their own style,</strong></strong> and had to sync with others to deploy what they wrote.</p><p>At the core of Gojek is ‘<a href="https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32" rel="noopener">Allocations</a>’; — a classic matchmaking engine between the driver and the customer. All surrounding teams depended on this one team to add features, beta test their offerings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some orders, they had to raise a ‘ticket’ with the Allocations team. The Allocations team then processed this for GO-FOOD.</p><p><em><em>Now, think of 50 developers asking Allocations to push their features first.</em></em></p><p>Soon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a strong relationship with Jane in Allocations, Ekta would get preference on her features. This became problematic for us and as the org scaled, it added more cultural biases. <strong><strong>Jane also became the defacto gatekeeper.</strong> </strong>Everyone had to toe her line if they wanted to build and deploy their own features. To add to this, Allocations was pushing back and severely lagging behind, because 50-odd developers were adding and testing 10 features a day.</p><p>Before you knew it, <strong><strong>Allocations became the bottleneck to scale the org. </strong></strong>As if all that wasn’t enough, the team was not doing its own testing and experiments to make Allocations better and sharper. Things were spiralling downwards.</p><h3 id="a-patch-would-not-do-we-needed-a-fix">A patch would not do, we needed a fix</h3><p>It was apparent we had to fix this problem — once and for all. The <strong><strong>‘Relationship-as-a-Service’</strong></strong> model was a disaster. <strong><strong>RaaS</strong></strong> was endemic in the org. Things were fine at a macro level, but at the base of it, we were failing.</p><p>We needed a solution that gave everyone the freedom to build and experiment. We wanted folks to think they’re building individual products from scratch without any reliance. <strong><strong>Easier said that done, right?</strong></strong></p><blockquote>This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to build startups within a startup.</blockquote><p>We wanted to unleash our best minds to build, and not worry about <strong><strong>RaaS.</strong></strong>After some research and consensus across the board, we were all sold on Kafka.<strong><strong> Software was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn right</strong></strong>.</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/06/1_TKa_fTjcIPBZr71sSMTaFA.jpeg" class="kg-image" alt="How Kafka Solved a Culture Problem at Gojek"/></figure><h3 id="forget-the-morose-writer">Forget the morose writer</h3><p>Every team was mandated to broadcast events on Kafka. If a driver booking was made, it was sent to Kafka. If a driver completed the ride, it was sent to Kafka. Kafka became the bus that carried the millions of events happening inside Gojek.</p><blockquote>Anything and everything individual teams did was visible to anyone and everyone inside Gojek.</blockquote><p>If a team wanted to test features or roll out updates, they merely had to rely on Kafka. No more RaaS<strong><strong>.</strong></strong> No more long waiting periods. This unleashed the productivity of every developer. <strong><strong>The day we rolled out Kafka, we killed the gatekeeper. Information was free and accessible to all. </strong></strong>We were solving software problems, but deep down, culture was the bigger fix.</p><blockquote>Today, we emit 350,000,000 messages on Kafka and it’s every engineers’ playground.</blockquote><p>Our two-pizza team rule became far more efficient, and now we were solving bigger problems. This is also an example of how we look at Lean Engineering, but that’s a story for another day.</p><h3 id="das-urteil-but-positive-metamorphosis">Das Urteil — But positive Metamorphosis</h3><p>‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913. Metamorphosis was published in 1915. The latter talks about how a salesman turned into an insect and struggles to live. It’s classic Franz Kafka; deeply sad, complex and incredibly gut-wrenching.</p><p>In our case, The Judgement was of an insect metamorphosing into a butterfly. It didn’t happen overnight, but this was our tipping point. Our tech stack began to reflect organisation culture.</p><p><strong><strong>Kafka solved a critical cultural problem for us.</strong></strong> 💪</p><figure class="kg-card kg-image-card"><img src="https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg.png" class="kg-image" alt="How Kafka Solved a Culture Problem at Gojek"/></figure><p>Liked what you read? Have our stories delivered straight to your inbox by <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter">signing up for our newsletter</a>!</p>]]></content:encoded></item><item><title><![CDATA[What is a ‘Super App’?]]></title><description><![CDATA[Lessons in building an ecosystem — it’s always about thinking ahead for the long haul.]]></description><link>https://gojek-ghost.zysk.in/what-is-a-super-app/</link><guid isPermaLink="false">Ghost__Post__5eb1065f5524cd001e7392a0</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 11 Feb 2019 04:00:00 GMT</pubDate><media:content url="https://res-4.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_cCPa4Lrj9cDM7uPI2uiwXA.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-4.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_cCPa4Lrj9cDM7uPI2uiwXA.jpg" alt="What is a ‘Super App’?"/><p>In early 2015, a Chinese documentary titled <em><em>Under The Dome</em></em> raked in 200 million views in just three days. The 103-minute documentary didn’t release in a single theatre.</p><p><em><em>More than 40% of viewers saw the movie on… wait for it… <strong><strong>WeChat.</strong></strong></em></em></p><p>With more than a <a href="https://www.statista.com/statistics/255778/number-of-active-wechat-messenger-accounts/" rel="noopener">billion</a> (Billion with a B ?)<strong><strong> monthly active users</strong></strong>, WeChat is the sort of phenomenon that hasn’t been replicated anywhere else in the world. Till now. But more on that later.</p><p>WeChat is more than just an ‘app’ on a smartphone. Tencent, its parent company, has unbundled the traditional desktop OS, or at least our idea of one. It’s one app for media sharing, social media, movie bookings (the irony?), taxi-hailing, payments, video calls, commerce and more. It also has its own Slack-like corporate account. Hell, even government agencies use WeChat.</p><p>Users check the app at least 10 times a day on an average, and more than 80% of users purchase products online. That kind of stickiness at such scale is unprecedented.</p><p>It’s not really an app as much as an Operating System for smartphones. WeChat is a Super App.</p><h1 id="what-makes-for-a-super-app">What makes for a Super App?</h1><p>In <a href="http://devblog.blackberry.com/2010/02/what-is-a-super-app/" rel="noopener">2010</a>, Mike Lazaridis, the Founder of Blackberry, took a stab at what a ‘Super App’ constitutes, “…representing a new class of mobile applications that make you wonder how you ever lived without them.” Lazaridis’ definition was a closed ecosystem of “many apps” that people would use everyday “…because they offer such a seamless, integrated, contextualised and efficient experience”. Blackberry, as you know, got unbundled because they charged the user to be on a ‘platform’, without adding services to the platform. <strong><strong>By building a walled garden, the brand alienated its users.</strong></strong></p><p><em><em>A Super App is many apps within an umbrella app. It’s an OS that unbundles the tyranny of apps. It’s the portal to the Internet for a mobile-first generation.</em></em></p><p>More often than not, it will likely be operate at the intersection of logistics/hyper-local delivery, commerce, payments and social. To become a Super App, you need at least two of these functions. The idea is to scale fast once you have a user’s buy-in, and add multiple services to gain loyalty.</p><p>Once you have direct offerings, the next logical step is to open the app up to third-party companies to build on a loyal user base. Now, you don’t build separate apps. Instead, you can host your offerings on a single Super App. Step-by-step, the Super App becomes the OS.</p><p>In that context, there are a rare few who have what it takes to build a new-age, mobile-first OS that can be categorised as a Super App.</p><p><strong><strong>Say hi to GOJEK*.</strong></strong></p><h1 id="what-makes-gojek-a-super-app">What makes Gojek a Super App</h1><p>Gojek is one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, getting a massage, and two dozen services. It’s Indonesia’s first and fastest growing unicorn, building an on-demand empire. Gojek runs the equivalent of three Indian unicorns rolled into one.</p><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe width="480" height="270" src="https://www.youtube.com/embed/Tn4MGnTkF8c?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""/><figcaption>Meet... the #SuperApp</figcaption></figure><p>With more than 125+ million app downloads, and total order volumes growing 6600x in 36 months, Gojek already has 18+ products. Every year, the company adds more ammunition to its arsenal. It’s the only hyper-growth startup in the world from a developing country. One app, many use cases. Gojek is a #SuperApp.</p><h1 id="but-why-a-superapp">But why a #SuperApp?</h1><p>By removing clutter from a smartphone OS and its multiple apps, UX acts as a bait to get the <em><em>next billion</em></em> on a smartphone. <strong><strong>Design becomes a language</strong></strong> for the uninitiated. But among a dozen reasons why, here’s the most hilarious one:</p><p>Remember India’s ‘Good Morning’ message phenomenon? Every day, India’s mobile users send a ‘good morning’ image to their friends and family. According to a WSJ <a href="https://www.wsj.com/articles/the-internet-is-filling-up-because-indians-are-sending-millions-of-good-morning-texts-1516640068" rel="noopener">report</a>, “These images have an overabundance of sun-dappled flowers, adorable toddlers, birds and sunsets sent along with a cheery message.” As a result, one in three smartphone users ran out of space daily, according to a Western Digital report.</p><p>And the first thing they do to free up space is… <strong>delete apps.</strong></p><p>But it’s not about space constraints anymore (that’s a thing of the past) — it’s about breaking design language barriers so more baby boomers and the next billion users can participate in the Internet economy.</p><p><em><em>In a nation of 1.3+ billion people, a little over a third of India has access to the internet.</em></em></p><p>India ranks well below the global average for mobile connectivity in the world. Mobile broadband connectivity is only slightly better than Kenya.</p><p>A Statista <a href="https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/" rel="noopener">report</a> shows there are over four million apps available between just the Google Play store and the Apple App Store, and the glut is painful for countries with limited smartphone memory and a saturated market. <strong><strong>A</strong></strong> <strong><strong>Super App corrects this imbalance.</strong></strong> It sits on top of a mobile OS by shrinking the time taken to complete a specific task and in turn, increase productivity. For the next billion users, it also adds UX elements that make it easier for users to get accustomed to mobile phone usage.</p><p>Is it easy? No. Ask Facebook. For about two years, Facebook’s Messenger tried to build the WeChat of the West without much success. It remains to be seen if they can do it in the current climate.</p><p><em><em>Which also makes GOJEK an interesting study.</em></em></p><h1 id="the-big-sell-for-gojek">The big sell for Gojek</h1><blockquote>The biggest moat Gojek built is payments. Once you’re handling money for a user, you can build a castle of services within it.</blockquote><p><strong><strong>G</strong>oPay<strong> is accepted at close to 300,000 online and offline merchants in Indonesia, and processes $6.3 billion of annualised Gross Transaction Value (GTV). </strong></strong>Talk about disruption…</p><p>Gojek is one of the most interesting stories coming out of Southeast Asia and also one of the least understood ones. It’s a fascinating story panning out in a densely-populated geography riddled with opportunities.</p><p>250+ engineers make software decisions that impact more than 261 million people. We also practice what we preach — a ‘lean engineering mindset’ makes us automate mundane tasks and build a platform that has major social impacts. Technology is the fulcrum on which a country is reinventing itself, and this change is the<strong><strong> least narrated story till date</strong></strong>.</p><p><em><em>*Disclosure: </em></em><a href="https://twitter.com/ponnappa" rel="noopener"><em><em>I’m</em></em></a><em><em> part of G</em>ojek<em>’s Board and run Data Engineering </em></em><a href="https://twitter.com/gojektech" rel="noopener"><em><em>@gojektech</em></em></a><em><em>.</em></em></p>]]></content:encoded></item><item><title><![CDATA[Applying the Single Responsibility Principle to Microservices]]></title><description><![CDATA[The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.]]></description><link>https://gojek-ghost.zysk.in/applying-the-single-responsibility-principle-to-microservices/</link><guid isPermaLink="false">Ghost__Post__5ec2af8a7aa22c4066f83abe</guid><category><![CDATA[Tech]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Tue, 05 Feb 2019 04:00:00 GMT</pubDate><media:content url="https://gojek-ghost.zysk.in/content/images/2020/05/1_5lEpe0Ab9138LC9cY1QZSQ.jpeg" medium="image"/><content:encoded><![CDATA[<img src="https://gojek-ghost.zysk.in/content/images/2020/05/1_5lEpe0Ab9138LC9cY1QZSQ.jpeg" alt="Applying the Single Responsibility Principle to Microservices"/><p>By Soham Kamani</p><p>The single responsibility principle is one of the most tried-and-tested tenets of software design. Every module or class should do one thing, and do it well. We found this principle was applicable, and incredibly important, while designing our systems.</p><p>About a year ago, we released a new chat service (which we internally called <strong><strong>Icebreaker</strong></strong>). It allowed our users to communicate with drivers through the app itself, rather than use SMS (which cost both the driver and customer money).</p><p>However, all was not well. For numerous reasons, the service gave us a lot of issues and late night pagers. This post details the lessons we learnt, and some of the decisions we took to make this service more reliable.</p><h1 id="the-problem-s-">The Problem(s)</h1><p>In a nutshell, Icebreaker depended on too many other services to function properly. Let’s look at some of the tasks Icebreaker performed in order to create a channel:</p><ol><li>Authorise the API call: This made a call to our authentication service.</li><li>Fetch the customer profile: This required an HTTP call to our customer service.</li><li>Fetch the drivers’ profile: This required an HTTP call to our driver service.</li><li>Verify if the customer-driver pair are in an active order: This made a call to our active booking storage service.</li><li>Create the channel.</li></ol><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1304/1*oSRgws5JNm767tOTJfq7EA.png" class="kg-image" alt="Applying the Single Responsibility Principle to Microservices"/></figure><p><strong><strong>If any of these services failed, Icebreaker would fail as well.</strong></strong></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/1304/1*tpBpiBUBVK-N0chl5fkLGQ.png" class="kg-image" alt="Applying the Single Responsibility Principle to Microservices"><figcaption>Simultaneous dependence on multiple services ensures that the dependent service is less stable than any of them</figcaption></img></figure><p>Even if we could ensure 99% uptime for all services in question, that still means the chances of all of them being up at the same time was 96%.</p><p><code>P(icebreaker active) = P(customer service active) * P(driver service active) * P(authentication service active) * P(active booking storage active) = 0.99 * 0.99 * 0.99 * 0.99 ~= 0.96</code></p><p>This means our downtime has increased four times over (4%, as opposed to 1%).</p><h1 id="not-my-job">Not my job</h1><p>When a service starts to do too many things, it’s bound to fail sooner or later. In this case, Icebreaker’s job was to create a channel between a customer and a driver. However, it was doing all this extra stuff: like authentication, verification, and profile retrieval. 🤦‍♂</p><p>Let’s take a look at the changes we made to get rid of each dependency:</p><h2 id="authentication">Authentication</h2><p>Every API call arriving to Icebreaker came with an API token which needed authentication. To solve this, we added a <a href="https://konghq.com/" rel="noopener">Kong</a> API gateway. This authenticated all requests and added information about the authenticated user within the API headers.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1634/1*2d7v8u_WVx7YDowNapZGNQ.png" class="kg-image" alt="Applying the Single Responsibility Principle to Microservices"/></figure><p>Now, every request arriving to Icebreaker was authenticated.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Tell, don’t ask. The requests coming from the API gateway told the service that they were authenticated, rather than Icebreaker having to ask another service.</em></em></em></blockquote><h2 id="profile-retrieval">Profile retrieval</h2><p>In order to create a channel, we needed a piece of information called the ‘chat token’ for each user. This was stored in the customer service for the customer, and the driver service for the driver.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1634/1*dKBOVH4ODILeTSqgQIazcw.png" class="kg-image" alt="Applying the Single Responsibility Principle to Microservices"/></figure><p>Since Icebreaker was the only service using this token, we moved these tokens to it, and removed them from the customer and driver services.</p><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/1634/1*eXYrRFGNnEPqv0nvbwjbIA.png" class="kg-image" alt="Applying the Single Responsibility Principle to Microservices"/></figure><p>Now,Icebreaker had all the information it needed in its own database, which was a more reliable source of truth as compared to a whole other HTTP service.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: </em><em>If your service is the only one using any piece of information, it should reside within the service itself</em></em></em></blockquote><h1 id="active-booking-storage">Active booking storage</h1><p>Icebreaker used to create a channel on-demand every time the user hit its channel creation API. This on-demand creation required us to verify that an active booking existed, for which the user needed to create a channel. After all, it didn’t make sense to create a channel when the parties involved did not have an order with each other.</p><p>To fix this, we moved to an asynchronous architecture for channel creation. Instead of on-demand channel creation, we made use of GO-JEKs <a href="https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929" rel="noopener">data pipeline</a>, that published events every time a booking was made. <strong><strong>Icebreaker now consisted of two components: the worker and the server.</strong></strong></p><ol><li>The worker consumed booking events every time they were made. It then created a channel between the customer and driver in the booking, and stored the channel information on a Redis cache.</li><li>The server served channel creation requests as before. Only, this time, the channels were already created and cached, along with the order number.<br/></li></ol><figure class="kg-card kg-image-card kg-width-wide"><img src="https://miro.medium.com/max/3283/1*hNR_iSrTKkyvUhwMviHX_g.png" class="kg-image" alt="Applying the Single Responsibility Principle to Microservices"/></figure><p>So, instead of on demand channel creation, the channels were created and stored beforehand. Since we were consuming booking events from our own data pipeline, there was no need to verify whether the booking was genuine or not.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Again, tell, don’t ask. The events coming from our data pipeline told Icebreaker that the bookings were genuine. This meant it could create the channel, instead of hitting a service to verify the authenticity of the booking.</em></em></em></blockquote><h1 id="results">Results</h1><p>Now Icebreaker did only what it was truly meant to do: create channels.</p><p>Since we removed dependencies on most external systems, we no longer had to worry about one system failure causing Icebraker to malfunction. The load on the external services also reduced, since Icebreaker was no longer using their endpoints for channel creation.</p><p>Moving to the asynchronous architecture also led to a drastic reduction in response time, from ~200ms to ~10ms, since we were pre-creating and caching channels for every order.</p><p>The takeaways we got from this experience conform with the single responsibility principle. In the end, it’s always better to ask ourselves: <strong><strong><em><em>“Can this service do less?”</em></em></strong></strong></p><hr><p>Want our stories in your inbox? <a href="https://mailchi.mp/go-jek/gojek-tech-newsletter">Sign up for our newsletter!</a><br/></p></hr>]]></content:encoded></item><item><title><![CDATA[How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)]]></title><description><![CDATA[An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App]]></description><link>https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-2/</link><guid isPermaLink="false">Ghost__Post__5eb12c67f7c7da001effcdd8</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Mon, 02 Jul 2018 04:00:00 GMT</pubDate><media:content url="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dWQkpxR4YJawDR4G6JgYFw.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dWQkpxR4YJawDR4G6JgYFw.jpg" alt="How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)"/><p>By Adithya Venkatesan</p><p>This is Part 2 of a feature story profiling the ‘Allocations’ team at GOJEK. For Part 1 of the story, please click <a href="http://bit.ly/gojekfeature" rel="noopener">here.</a></p><h1 id="the-infinite-onion">The Infinite Onion</h1><p>Every onion layer you peel is accompanied by more tears. It seems like an endless problem. And just when you think it’s done, there’s another layer. For the next 3 months, it was onion after onion, layer after layer across teams at GOJEK. Downtimes were the new normal by the beginning of 2016.</p><p>Back to square one.</p><p>The ‘Broadcast algorithm’ the bid engine team was relying on was failing. But how?</p><p>Every driver was seeing the same order multiple times. The algorithm ‘broadcasted’ the same order across its driver database. So if there were 100 orders in a specific area and 200 drivers, each driver would see the order, but not necessarily be able to fulfil it. There was a three-fold problem to the algorithm: Accountability, High-concurrency and promoting Unhealthy competition.</p><p><strong><strong>Accountability:</strong></strong> How can we reward the drivers who are doing more orders, zero cancellations etc… when he/she simply couldn’t accept the order? How can we deny bonus, because by design, a driver was not getting an order due to a dozen reasons? There was no accountability for the driver, or the business fundamentals.</p><p><strong><strong>High-concurrency: </strong></strong>The sheer volume of orders meant drivers were missing out on orders because it was blasted across phones. Some orders were not being fulfilled because of multiple blasts and server loads. More orders, less drivers = some orders not being fulfilled, which resulted in a poor customer experience.</p><p><strong><strong>Note: The location-based orders are a peculiar problem for GOJEK.</strong></strong></p><blockquote>Why? In a distance of 20metres, you’ll spot more than 30+ GO-RIDE scooters, as opposed to maybe a maximum of 10 cars.</blockquote><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/528/1*UwVrMbrdIEzUdeyhOaI65A.gif" class="kg-image" alt="How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)"/></figure><p><strong><strong>Unhealthy competition: </strong></strong>Once you’re blasting an order to all, you’re not factoring in quality drivers for customers. We were also not getting the nearest driver for an order. This breeds unhealthy competitiveness among drivers.</p><p>There is an adequate probability of doubt in the nature the algorithm was designed, and other constraints that are outside of the realm. Who gets the order became a function of the phone — better GPS, hardware, Internet, software; all played a critical portion. And that was unfair. So zero accountability and high congestion of drivers meant things were going awry.</p><h1 id="10x-growth-100-failure">10x growth, 100% failure</h1><p>When <a href="https://twitter.com/niranjan_p" rel="noopener">Niranjan</a> pulled a couple of <a href="https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32" rel="noopener">all nighters</a> and and rewrote the code, the core portion was rewritten to make it a SPIKE. What is a spike? You break the rules and throw caution to the air with the objective of shipping something out to keep the company afloat. The problem with SPIKE is that it wasn’t the end-solution. And that meant more downtimes and more failures. But, the team was in murky waters by late 2015.</p><p>At this point, GOJEK was managing 300,000+ orders every day. Failures were routine. Again. Wherever Nadiem went, he was questioned on why the app was crashing or users could simply not find customers. At this point, the tech team was made up of around 10 people, who were firefighting every day. When <a href="https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Shobhit</a>, one of our star programmers, went to a Domino’s store nearby to grab a quick bite, drivers started questioning him. <strong><strong>Anyone who wore a GOJEK T-shirt became the unofficial complaint box</strong></strong>. Something needed to change, and fast.</p><p>This was again an underestimation of how much Indonesians relied on GOJEK. Everyone wanted to use GOJEK. It made life easier in the traffic-congested glut that was Indonesia. Importantly, jobs and lives depended on it.</p><p>Decisions…</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://miro.medium.com/max/681/1*GoeCvdf2ZFyxxDlyeVC0tQ.png" class="kg-image" alt="How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)"><figcaption>Nadiem’s internal mail</figcaption></img></figure><blockquote>“No project has a budget and impact as big as this in GOJEK’s history”</blockquote><h1 id="the-big-rewrite-the-perfect-allocation">The big rewrite — The Perfect Allocation</h1><p>The team needed to work on a different algorithm: 1–1 personalisation, pin accountability on drivers, identify what a perfect driver looks like, and ideate on how to frame this persona. The big rewrite began in the middle of 2016. The ‘bid engine’ team was now rechristened as the ‘Allocations’ team. At this point, we were still losing customers. There were leaky faucets that were not sealed. After all, the work of the Allocations team criss-crossed all of GOJEK’s products and services. It was time to revisit the mothership.</p><p><em><em><strong><strong><em>Hello Clojure.</em></strong></strong></em></em></p><p>Back to square one. Back to taking risks. By now, the core team was all too familiar with handling high-pressure timelines and live codebases. Clojure was an obvious choice because of the specific complexities it intended to solve.</p><blockquote>“Only two in the team knew Clojure then, but it solved an important business problem. We went with it and we all had to learn. Back to school. Again.” — <a href="https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Niranjan Paranjape</a></blockquote><p>The first task was to replicate the bid engine logic. A 6-member team got to work with Clojure. Why Clojure? Because the language designs better abstractions for a specific problem the team needed to solve. While Golang was the modern superbike that had it all, Clojure was the cruiser — really simple and capable of designing complex code. Clojure ushered this idea of getting organised and ensuring good software development practices.</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1895/1*7W31wteVSSria2fq7mZ7bA.jpeg" class="kg-image" alt="How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)"/></figure><p>On the left, you see the Allocation code in Go. On the right, the exact same code in Clojure.</p><p>This is not to state one language is better than the other. It’s tempting to arrive at that conclusion when you see the image above. There were trade-offs made when the switch was made. While Go is superior in performance, the capability to make changes and add features was hard. Language was traded for design.</p><p><em><em>The innate abstraction to sniff out what works when, how and why is what makes lean engineering so special at GOJEK.</em></em></p><p>“The more boring a rewrite is, the sweeter the success,” — <a href="https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Shobhit</a>. After the 2-month long big rewrite, a stable product was live. Pause. Breathe. After 3 days of releasing, no one noticed there was a new codebase/algorithm in place. That’s what success tastes like. Smooth as butter. No issues and achieving scale.</p><h1 id="shaping-a-mindset">Shaping a mindset</h1><p>That’s half the story told. A million mistakes later, we’re still making mistakes. But that’s the good part. We fail fast. We build fast. No hierarchy. <strong><strong>There’s an ingrained mentality of managing more with less. Anything that’s repetitive gets automated</strong></strong>. One could argue this was born out of the desperation of GOJEK products being the arteries criss-crossing through the heart of Indonesia. Regardless, the engineering psyche was passed down and filters through our recruitment. Here’s a reckoner on <a href="https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790" rel="noopener">why GOJEK is hard to get into and equally hard to abandon.</a></p><p>The simplification of the story would merely state the Allocation team allocates drivers to customers. But their genesis is filled with fascinating engineering insights. How do you factor supply and demand, how do you reward drivers, manage driver health by reducing the workload, figure surge pricing, check for loopholes, and so on. Each function has dozens of people in similar startups at GOJEK’s scale. We are able to cut this down because of our emphasis on lean engineering. We don’t make compromises on our recruitment either. Leaders code. Everyone codes.</p><p>Engineers are running their own startups in a startup. GOJEK is creating a one of a kind Super App with a platform for other startups to be part of</p><p>Today, anyone within a 300-meter range can grab a ride. That’s only an average. In popular malls near Jakarta, there are drivers every 10 metres or lesser. Then came dashboards and data to crunch driver statistics, daily research to tweak the algorithm. The last time I checked, GOJEK does more than 35+ orders <strong><strong>each second</strong></strong> across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc…</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1200/1*uIDXYaHyIQzvhtIHRThNWA.jpeg" class="kg-image" alt="How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)"/></figure><h1 id="the-ship-of-theseus">The ship of Theseus</h1><p>You use a really old car to commute to office. It breaks, stutters and sometimes refuses to move entirely. You can’t scrap it because it’s the only car you have. But you want a supercar. So you go about buying the steering wheel and fixing it to the old car. Then comes the rims, the music system, leather seats and slowly, the car begins to take shape. But it still has components of nostalgia; the car that ferried you in dark times when nothing else would. Stan Marsh is that old car.</p><p><em><em>Remember Stan Marsh? The old legacy code on which GOJEK was being built?</em></em></p><p>10% of Stan Marsh survives. Even till date. (<a href="https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf" rel="noopener">There is a plan to eventually put it to bed</a>) It’s there for legacy reasons. I suspect the team is also sentimental about it. Think of it as the ‘Ship of Theseus’ conundrum. No matter what engineers who join GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built. Smart engineering is also about working with a legacy codebase and improving it. Fly with what you have and make it better. Everything else will follow. The team embraced that challenge.</p><p>It all boils down to the kind of people you let in the system. People are empowered to make decisions at GOJEK. As our India Head, <a href="https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Sidu Ponnappa</a> often repeats, “Don’t throw people at a problem.” It’s a typical outsourcing mindset Indian Engineers have been cajoled into. More people does not mean better work. More people does not mean better code. If that were true, GOJEK simply wouldn’t exist today doing more than a 100 million+ orders a month with a paltry 200+ engineers.</p><hr><p>Story credits: <a href="https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Shobhit Srivastava</a>, <a href="https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Ranjeet Singh</a>, <a href="https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Mehakdeep Singh</a>, <a href="https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------" rel="noopener">Bergas Bimo Branarto</a>.</p></hr>]]></content:encoded></item><item><title><![CDATA[How Gojek Manages 1 million Drivers With 12 Engineers (Part 1)]]></title><description><![CDATA[The story of GOJEK’s first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.]]></description><link>https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-1/</link><guid isPermaLink="false">Ghost__Post__5eb12b71f7c7da001effcdbe</guid><category><![CDATA[Stories]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Thu, 24 May 2018 04:00:00 GMT</pubDate><media:content url="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_0G01nMPD--K_MrKhhkurtw.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_0G01nMPD--K_MrKhhkurtw.jpg" alt="How Gojek Manages 1 million Drivers With 12 Engineers (Part 1)"/><p>By Adithya Venkatesan</p><p>In Norse mythology, <em><em>Yggdrasil</em></em> is a gigantic mythical tree that connects the nine worlds of Norse cosmology. It’s a holy tree whose branches touch the heavens. The gods hold court beneath <em><em>Yggdrasil — </em></em>debating the fates of other gods, men and monsters. It’s the tree of life and the centre of everything in Norse mythology. In GOJEK, think of the <strong><strong><em><em>`Allocations` </em></em></strong></strong>team as this eternal green ash tree. Our multiple products rely on this team to assign drivers to complete orders.</p><p>The team cuts across products and services responsible for 1,000,000+ registered drivers on our platform.</p><p><strong>And 12 engineers do this.</strong></p><p>A similar ride-sharing equivalent has 300-odd people solving the same problem and still does fewer bookings. But how do they do it? This is their story.</p><h2 id="on-planet-earth-problems-galore">On planet Earth, problems galore</h2><p>When GOJEK started in 2010, it all began with a call centre. Customers would call a number, the call centre would ‘allocate’ a driver after <em><em>looking at an Excel sheet of drivers</em></em> in the roster. Our CEO Nadiem Makarim was the first person to test the app built for drivers and customers. As soon as a dummy order was created and Nadiem got the first notification, GOJEK was open for business.</p><p>At its peak in 2014, GOJEK had 200 drivers. The 3-person engineering team had a basic stop-gap model of matchmaking between a driver and a customer. This codebase had to be reworked to match scale. The new matchmaking codebase was built in two days and could handle about 700 drivers. It was all manual and something had to be done to <a href="https://blog.gojekengineering.com/how-we-do-what-we-do-at-go-jek-tech-d1d5d952e13" rel="noopener">automate</a> the whole process.</p><p>In the beginning of 2015, a version of the app was launched to keep pace with increasing demand. GO-RIDE, GO-FOOD and GO-SEND went live. Customers would ‘bid’ for a driver, drivers would get a notification, accept a drive and voila, we’re good to go. This was the birth of the ‘<strong><strong>bid engine’ — a classic matchmaker between supply and demand:</strong></strong> Driver and Customer. <em><em>It would form the genesis on which GOJEK was going to be built</em></em>. The problem: siloed boxes.</p><p>There were a total of three products with the same underlying infrastructure, but no interconnectedness. THAT was a problem that shouldn’t exist when success depends on deeper linkage between all teams. This problem is further pronounced when you realise all three teams were working on the same infrastructure.</p><p><em><em>Importantly, GOJEK simply wasn’t prepared to handle the kind of adoption and growth the company began to witness as soon as the app was launched.</em></em></p><p>The algorithm started to crumble. The engineering was pretty straightforward with 10–15 lines of code, and solved problems for a small set of data. As the drivers increased, downtimes became a routine affair. There were way too many bottlenecks. <strong><strong>GOJEK was failing, and fast.</strong></strong></p><p>Soon, Sequoia had mutual investment portfolios and unlocked some doors. Sidu Ponnappa, our current India Head, then the CEO of CodeMonk, travelled to Indonesia to pick between three of Sequoia’s companies. The team’s ultimate decision to work with GOJEK is not entirely surprising because it was bigger, larger than anything they had witnessed in India. The market was ripe for the taking. Read his telling tale from his first visit to Indonesia <a href="https://blog.gojekengineering.com/my-go-jek-story-af5f1925bfe" rel="noopener">here.</a></p><p><em><em>In no time, Nadiem acquired CodeMonk. But before that, our current CTO, Niranjan Paranjappe was being poached. <em>? </em>The team stood together. It was all, or none.</em></em></p><p>And Nadiem wanted all. <strong><strong>The deal was closed in a small tea shop</strong></strong> between Sidu, Niranjan, Nadiem, Ajey and Kevin. Overnight, GOJEK had one of India’s best consulting firms in its arsenal. The task for the engineering team: Work on the bidding engine. No more downtimes.</p><h2 id="it-s-the-0-s-and-1-s">It’s the 0’s and 1’s</h2><p>The old codebase was written in Java. It’s a programming language that belonged to the Internet age. But not for a startup in 2015 that was exploding in demand and imploding with a lack of resources and engineering wherewithal. Why Java? Because, the classic <strong><strong>Golden Hammer Anti-Pattern:</strong></strong></p><p><em><em>“If all you have is a hammer, everything looks like a nail.” And hence, ‘I know Java, so Java is the best.’</em></em></p><p><a href="https://medium.com/u/689ebe477c46?source=post_page-----978af9ccfd32----------------------" rel="noopener">Niranjan Paranjape</a>, our now CTO (<a href="https://medium.com/u/bb9ef62c7bae?source=post_page-----978af9ccfd32----------------------" rel="noopener">Ajey Gore</a> is our Group CTO), plugged in the hard drive and checked the code. As soon as he opened the README file, the first line was mvn install -DskipTest</p><p><strong><strong>The code had *<em><em>never</em></em>* been tested.</strong></strong></p><p>In other words, the code was live without ever passing a single quality check. The old codebase was called <a href="https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf" rel="noopener"><strong><strong>Stan Marsh</strong></strong></a><strong><strong>.</strong></strong> For the uninitiated, Stan Marsh is a character from South Park, and if you watch the show, you’d get the obvious reference to the famous line:</p><figure class="kg-card kg-image-card"><img src="https://miro.medium.com/max/1600/1*Mk4tc6cfIHlC_f1CblNGNQ.jpeg" class="kg-image" alt="How Gojek Manages 1 million Drivers With 12 Engineers (Part 1)"/></figure><blockquote><em><em>“Dude, this is pretty f****d up right here.”</em></em></blockquote><p>And thus it came to be. <strong><strong>Stan Marsh was the legacy code on which GOJEK was going to be built</strong></strong>. Because there was no test harness, it was difficult to understand which portion of the app was working, and which wasn’t. Considering the app was live, no one wanted to touch a ticking time bomb. It was… sorry, is… very much part of engineering folklore. (More on that later)</p><p>As urban legends go, Niranjan re-wrote the entire codebase in Golang, a language he didn’t know. Three nights. A dozen Redbulls. Two dozen coffees. Golang could handle concurrency, manage load; the kind GOJEK was witnessing. The mothership was ready. Or so the team thought.</p><p>It wasn’t an easy decision to go with Golang. Not many knew the programming language. But some risks are worth taking — and that defines good engineering from great. Luckily, this initial decision-making set the tone for the team; learn, experiment, adapt, take responsibility or be disrupted. In a month, GOJEK’s driver count tripled. But… there were more problems to come. Bigger fish to fry.</p><p>For Part 2 of the story, please click <a href="https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-2-35f6a27a0faf" rel="noopener">here</a></p><hr><p>Story credits: <a href="https://medium.com/u/e5f92a17704d?source=post_page-----978af9ccfd32----------------------" rel="noopener">Shobhit Srivastava</a>, <a href="https://medium.com/u/710d3b419a5a?source=post_page-----978af9ccfd32----------------------" rel="noopener">Ranjeet Singh</a>, <a href="https://medium.com/u/36ce12a82c52?source=post_page-----978af9ccfd32----------------------" rel="noopener">Mehakdeep Singh</a>, <a href="https://medium.com/u/5cffcceadf08?source=post_page-----978af9ccfd32----------------------" rel="noopener">Bergas Bimo Branarto</a></p></hr>]]></content:encoded></item><item><title><![CDATA[Gojek Engineering — Guiding Principles 101]]></title><description><![CDATA[Pointers that help us build and run a unicorn startup,]]></description><link>https://gojek-ghost.zysk.in/gojek-engineering-guiding-principles-101/</link><guid isPermaLink="false">Ghost__Post__5eb128c6f7c7da001effcd94</guid><category><![CDATA[Culture]]></category><dc:creator><![CDATA[Gojek]]></dc:creator><pubDate>Wed, 04 Jan 2017 04:00:00 GMT</pubDate><media:content url="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Culture1.gif" medium="image"/><content:encoded><![CDATA[<img src="https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Culture1.gif" alt="Gojek Engineering — Guiding Principles 101"/><p>By Ajey Gore</p><p>Working at Gojek means working with the best and brightest on the most cutting-edge technologies. While it is extremely rewarding, it is also challenging. This is because we often work on tough problems with no clear solution — which involves taking risks and learning things on the fly.</p><p><em><em>All this, while competing with the best in the industry.</em></em></p><p>That’s why our guiding principles serve as a great reference point to deal with situations that arise every day. Here are some that we abide by:</p><p><strong><strong>Everyone writes code — </strong></strong>At Gojek, we believe that Software Principals/Architects/Engineers can only do the right thing when they work on code themselves. It’s the only way to decide what’s working and what’s not. We don’t believe that software requires a 50,000 foot overview with people exclusively working on the blueprint. At Gojek, writing software is <strong><strong>not</strong></strong> a low-level task; it’s at the very core of what we do.</p><p>Leaders who code are better judges of technical skill.</p><p><strong><strong>Everyone needs to ‘walk the talk’ — </strong></strong>We respect people who get down in the trenches and take a hands-on approach to problem solving. Based on our experience, standing at a distance and issuing commandments has many a time been inefficient and error prone, and hence we avoid this.</p><p><strong><strong>Leaders are grown and not made</strong></strong> — We believe in acquired respect and leadership, not leadership by position. At Gojek, you earn your leadership mettle. We believe in helping our people grow into leadership roles by giving them chances, risk appetite and freedom. We trust our people and support them to do the right thing at any given moment. In my own career, I’ve been privileged enough to have found some amazing mentors, and I am glad to be able to continue the legacy at Gojek.</p><p><strong><strong>Every decision is correct at the time it is made</strong></strong> — Swift decision-making is extremely important in a fast paced environment like ours. Once a decision is made, we don’t constantly agonise over it or second guess. We trust that whenever someone makes a decision, it is the right one, given the information available to them at that time. Only the passage of time can tell us whether a particular decision was right or wrong. It’s OK to change decisions, and we encourage people to not be afraid to make a decision.</p><p><strong><strong>Every person has some strengths, even if we don’t always see them</strong></strong> — A great team is built with a group of people who have complementary skill sets. A combination of different strengths make teams that can tackle all kinds of situations. At Gojek, we believe each one of us is unique and has unique strengths. It’s just a matter of finding the right role to match the skills. Teams become super strong when they appreciate each other’s strengths.</p><p><strong><strong>Working in tech means learning all the time</strong></strong> — Learning is important in every field. In the technology industry, it is a matter of life and death. Technology is changing all the time, what worked a decade ago may be completely obsolete now. For example, practices that worked in Waterfall don’t work in Agile, and user experiences on mobile apps were unimaginable a few years back. So, we constantly look for and admire people who are curious and willing to learn.</p><p>The best part? Such people will always hire people they can learn from!</p><p><strong><strong>Pair Programming and Test-Driven Development (TDD) work </strong></strong>— If they didn’t, our teams wouldn’t exist. Wherever we have followed this, we found our team’s job on supporting software is more around features than bugs! We have experienced over decades that this helps us build features faster, and mature teams organically. The bottom line is : to write beautiful code, we believe there is no better way than rigorous pair programming and practising TDD.</p>]]></content:encoded></item></channel></rss>