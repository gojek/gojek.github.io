{"componentChunkName":"component---src-templates-tag-js","path":"/tag/ride-hailing/","result":{"data":{"ghostTag":{"slug":"ride-hailing","name":"Ride Hailing","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5ec94e8c7aa22c4066f83db2","title":"Tips for Building Smooth Live Tracking","slug":"tips-for-building-smooth-live-tracking","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg","excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","custom_excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","visibility":"public","created_at_pretty":"23 May, 2020","published_at_pretty":"22 May, 2020","updated_at_pretty":"23 May, 2020","created_at":"2020-05-23T21:55:48.000+05:30","published_at":"2020-05-22T09:00:00.000+05:30","updated_at":"2020-05-23T22:31:54.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Ride Hailing","slug":"ride-hailing","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Startup","slug":"startup","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Maps","slug":"maps","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Software Engineering","slug":"software-engineering","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Divya Vikash\n\nIt‚Äôs a nice Monday morning and you just ordered a GoRide (one of Gojek‚Äôs\ntransport products) to go to your office. Voila!! You got a driver. That was\nfast. You can see your driver‚Äôs location on the map, and the estimated time they\nwould take to come to you.\n\nBut hang on‚Ä¶ It seems like the map is a bit messed up.\n\nThe driver location on the map goes back and forth at unreal speed, and even\nflies over buildings. Starring in an action movie is not exactly how you want to\nstart your week. üòÆ\n\nWhile our driver-partners sure are superman in their own unique way, they\ncertainly can‚Äôt drive over buildings. This is clearly not how your driver is\nactually driving on the road. But then why is the map showing all this?\n\nWell, there are multiple factors that can lead to a bad experience like that.\nSome within our control, some not so much (as of now). We decided to go back to\nthe drawing board and figure out the issues that are in our control and fix them\nfor good. And that is how we built a world-class (arguably üò¨) live-tracking\nexperience.\n\nBut what is live-tracking, you would ask?\n\nLive tracking is a complete map experience. It doesn‚Äôt involve anything other\nthan what you see on maps after you get a driver.\n\nSo, what do you see on maps?\n\n 1. Driver's location depicted by a green marker.\n 2. The routes.\n 3. The change in driver marker as the driver moves closer to your pickup/your\n    destination.\n 4. The change in route as the driver moves.\n\nAnd that‚Äôs it. That‚Äôs all live-tracking is.\n\n> But that sounds quite simple. Right? Use some routing APIs and plot the markers\nand routes.\nWell, yes, it sounded easy to us when we first heard about it too. The real\nexperience threw us a few curveballs. Let‚Äôs go through how we create a\nlive-tracking experience.\n\nInput\n\nLet‚Äôs look at the input data that we need to create a live-tracking animation:\n\nDriver Location and Routes\n\nOur driver apps have an in-built mechanism to upload driver location to our\nbackend at regular intervals. This is how we are able to find a driver close to\nyour location when you order one of our services. The primary input to\nlive-tracking is this driver location.\n\nIn our driver app, we get this location using Android‚Äôs FusedLocationProvider \nAPI which automatically uses the best location provider(GPS, Wifi, etc). The\ndriver location is ingested into our backend system via a continuous stream.\nRoutes are generated by our internal routing engine and provided to the customer\napp.\n\nInput Source\nAs you would have guessed, this data is provided via API calls initiated by the\nour Super App to the routing engine.\n\nMaking the API call just once won‚Äôt be sufficient. Right? The app needs to be\ninformed every time the driver‚Äôs location has changed. So, the customer app\npolls this API every few seconds to get this data.\n\nNow, we have a continuous stream of data flowing to our app which has all the\ninformation that we need to show the vehicle animation on the road.\n\nTerminology\nBefore moving forward, we should get acquainted with a few terminologies that we\nwould use quite frequently in this post.\n\n 1. Route: The entire list of latitude-longitudes between the driver location to\n    the pickup/destination location.\n 2. Segment: A segment is the smallest unit of a route. It is a straight line\n    from one position in the routes list to the very next position in the routes\n    list.\n\nA route of length n has n-1 segments. Confused? Yeah, let‚Äôs take an example.\n\nA Route looks like this:\n\n[{-62441198, 106.8032959},\n{-6.2440766, 106.80328}, \n{-6.2439977, 106.8033275},\n{-6.2434893, 106.8029214},\n{-6.2433926, 106.8030539},\n{-6.2436018, 106.803222}]\n\nThere are 5 Segments in this route.\n\nSegment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}\nSegment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}\nSegment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}\nSegment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}\nSegment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}\n\nThe initial setup\nWhen the user lands on the live tracking screen, the app immediately makes a\ncall to our internal API to get the driver location and route. Once we get this\ndata, we plot it on the map using the standard GoogleMap methods. \ngoogleMap.addMarker(), googleMap.addPolyline() etc.\n\nSometimes, we don‚Äôt have the routing information available immediately, so we\njust show the driver marker. We also store this data locally in an in-memory\ncache as we would need it later to do some comparisons.\n\nSo, the customer is able to see the markers and routes on the map now. So far so\ngood.\n\nThe subsequent updates\nAs I mentioned earlier, we need to change the position of driver marker and\nroute as the driver moves. The customer app makes a call to the same internal\nAPI every few seconds. After the first response, we don‚Äôt move any markers or\nroutes on the map until the next response succeeds.\n\nIn the next response, we again get the same data points i.e the route and driver\nlocation but with different values, of course, if the driver has moved. The next\nset of data that we get can have the following characteristics:\n\n 1. Route and driver location don‚Äôt change\n 2. Route changes\n 3. Route doesn‚Äôt change BUT driver location does\n\nLet‚Äôs discuss these cases one by one.\n\n1: Route and driver location don‚Äôt change\nIf nothing has changed, we don‚Äôt need to do anything. Probably our driver\npartner is stuck in traffic. üòû\n\n2: Route changes\nThis can happen either when:\n\n 1. The app was not showing any route to the user before i.e the first response\n    didn‚Äôt have the route.\n 2. The app was showing a route that is different from the newly received route.\n    This usually happens in cases where the driver starts following a different\n    route from the one they were following before. This can also happen due to\n    road closures or simply because our driver-partner initially followed a\n    wrong route by mistake üòÖ.\n\nIn either of these cases, we simply ignore the old driver marker and routes\nwhich were shown and plot the new marker and routes.\n\n3: Route doesn‚Äôt change BUT driver location does\nThe app was showing the same route to the user before i.e the old response had\nthe same route as the new response. This means that the driver is following the\noriginal route that we determined.\n\nIn this case, we need to animate the driver marker on the map from the old\nlocation to the new location along the same route. This is the most common\nscenario, which can again be broken down further into multiple scenarios (yeah,\nI‚Äôm all about breaking things down ü§ê).\n\n3.1: Does the new location lie on the route?\nTo animate the driver marker from it‚Äôs current position to the new location, we\nfirst need to know whether the new location lies on the route or not.\n\nYeah, we can‚Äôt be sure that the driver location that we have received would\nalways lie on the route/road because of various GPS inaccuracy issues.\n\nWe iterate through every segment in the route to find the segment which has the\nnew location. For every segment, we use the Geometry/PolyUtil library to\ndetermine whether the driver location lies on that route.\n\nWe also specify a tolerance of a few meters to account for GPS inaccuracy. So,\nif the newly received location is within a radius of X meters near a segment,\nthis method will return true.\n\nAndroid\n\nboolean isLocationOnPath(LatLng point,List<LatLng> polyline,boolean geodesic,\ndouble tolerance)\n\niOS\n\nBOOL GMSGeometryIsLocationOnPathToleranc\n[https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d]\ne(CLLocationCoordinate2D point,GMSPath\n[https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path] \n* path,BOOL geodesic,CLLocationDistance tolerance)\n\nIf the location doesn‚Äôt lie on any of the segments in the route, we are sad and\nso, we don‚Äôt animate anything. But if it does, we go forward with the next step\nwhich is‚Ä¶.\n\n3.2: Vehicle projection on route\nWhen we receive a new location, the start location is simply the position that\nthe driver marker is already at. No logic required there to calculate that.\n\nThe end location should simply be the new location that we received. Well, in an\nideal world, it should be but we live so far away from an ideal world üòû.\n\nAs we mentioned earlier, the raw driver location that we get from the driver app\nvia GPS/other providers mostly doesn‚Äôt lie on the road. So, we have to find a\nprojection of the driver location on the road/route.\n\nIf you have been reading carefully, you might wonder why we can‚Äôt just use the \nisLocationOnPath() method above ü§î.\n\nWell, if you had been reading more carefully, you might have noticed that this\nmethod returns a boolean explaining whether the location is on/near the route or\nnot ü§¶‚Äç‚ôÇ. It doesn‚Äôt return the projected location. (Ohh..if someone from Maps\nUtils stumbled upon this by chance, please add that method, good sir).\n\nSo, we had to revise some maths. Yeah, folks, learn your maths well. You never\nknow when a situation like this might arise ü§∑‚Äç‚ôÇ.\n\n‚ÄúFind the projection of point (x,y) on the line y = mx + c‚Äù. Does that ring a\nbell? Drawing a perpendicular line towards the segment and calculating the\nlocation of where the line and route intersect can give us the projected\nlocation. Right?\n\nWell, the above approach works for 2-D systems but earth is not a 2-D space. We\nneed a way to project the spherical surface of the earth onto a rectangle 2-D\nspace. There are several ways to do that. All of them have certain drawbacks. We\nmight lose information like direction or the shape of landmasses/countries or\nthe area information.\n\nMercator Projection\n\nMercator projection is one of the available methods to project the spherical map\nof earth onto a rectangle to make usable maps. Most of the mapping tools used\nfor navigation use this projection.\n\nThe key feature of Mercator projection is that it retains the direction\ninformation. That means if point A is 30deg east from north of point B on the\nglobe, it will be in the same direction on its Mercator projection. Or say there\nis a turn of 90deg in some lane, it will be 90deg on Mercator projection as\nwell. That is the reason it works really well for navigation purposes.\n\nHow to use a Mercator projection?\n\n 1. Every point on the earth is projected on a cylinder exactly like point A\n    which has point A‚Äô on the cylinder.\n 2. Once all the required points/routes are projected on this cylinder. It is\n    unrolled, and we obtain a rectangle like the one shown above.\n 3. All the planar geometry can be applied with a very little margin of error on\n    this 2D projected map.\n 4. After processing all the points/routes they can be converted back to\n    latitude and longitude on the globe.\n\nSo, now we have the projected driver location on the route which we will fondly\ncall snapped point going forward.\n\n3.3: End-to-End animation\nThe new driver location that we receive can be present in any segment. It may be\nthat it is in the same segment or it may be that it is on the next segment or on\nthe next one or it may be that it is on the last segment.\n\nBut for linear animation, we need a start point and an end point. The start\npoint is the current position of the driver marker. We already got the snapped\nendpoint in the earlier section. But we can‚Äôt just animate from start to end at\nonce as that would seem like the car is flying and ignoring U-turns, routes,\netc. So, how do we prevent it from flying?\n\nWhat do you do when you can‚Äôt fly to a place? You follow the road. Right? That‚Äôs\nwhat we have to do as well. Make the driver marker follow the route/road. We\nneed to animate along each segment in the route until we reach the segment which\nhas the driver position that we received.\n\nThere are again two cases here üòú:\n\n3.3.1: The new driver location is on the same segment\nIn this case, we can directly animate from the current position of driver marker\nto the driver location that we received since this is just a straight line\nanimation.\n\nA segment is always a straight line. We will discuss more on how to do the\nanimation b/w 2 points in a later section.\n\n3.3.2: The new driver location is on a different segment\nIn this case, we need to animate to that segment along the route. We have to\nanimate along each of the segments in between to reach the final segment.\n\nFor animation along the first segment, we set the endpoint of the animation to\nthe beginning of the next segment in the route. We animate to the end of the\nfirst segment.\n\nThe next segment may also not have the driver location that we received. After a\ndriver has traversed the first segment, we move the end location of the\nanimation to the end of the next segment, and so on and so forth till we reach\nthe last segment. Confusing, ya? Let‚Äôs see an example.\n\nSo much zig-zag (huh!!)The car icon(A) represents the location in the segment\nwhere the driver marker currently is. The red pin(X) represents the new snapped\nlocation received.\n\nIn the 1st animation, we move the driver marker from A to the end of the first\nsegment (B).\n\nIn the 2nd animation, the driver marker is moved through the entire length of\nthe 2nd segment.\n\nAnd so on and so forth till we reach the segment which has the newly received\nsnapped location (X).\n\nAnimation in a segment\nWe now know how the overall animation would look like. But we also need to\nconfigure how the smallest unit of the animation i.e animation in a segment\nshould happen.\n\nStart point and End point: For case #1 above, the animation in a segment will\nhappen just once. For case #2 above, this animation in a segment will happen\nmultiple times. Start and endpoints will be determined before beginning each of\nthe animations.\n\nBearing b/w these two points: Bearing can be calculated using another one of\nGeometry/Maps Utils method.\n\nSphericalUtil.computeHeading(startPosition, endPosition)\n\nDuration of animation: Calculating duration is a bit tricky. And the duration is\nthe most important thing in any animation. Sometimes the difference b/w a smooth\nand a choppy animation is caused by the duration. It was very important that we\ngot it right. So, let‚Äôs take a break and see how to calculate the duration.\n\nWhat is Duration?\nIt‚Äôs the amount of time for which the animation should happen. But you already\nknow that. Going back to middle school maths (yeah, that far), how do you\ncalculate time? Time is nothing but distance divided by speed. Correct?\nCalculating straight line distance b/w the two points we want to animate through\nis pretty easy.\n\nSphericalUtil.computeDistanceBetween(startLocation, endLocation)\n\nCool, cool. But what about speed? How should we calculate speed?\n\nSpeed calculation\nFusedLocationProvider API in the driver app does provide the speed of the\nvehicle but it‚Äôs highly unreliable. So, we have to employ some tricks to\ncalculate the speed.\n\nSpeed is distance divided by time. Distance again!! Seems like we are running in\ncircles üòµ. Not exactly. Here the distance is not the straight line distance b/w\nthe two points that we have to animate through.\n\nThis is the total distance along the route from the segment that the old driver\nlocation is currently located at, to the segment where the new driver location\nis. Yeah, that statement is a bit confusing. So, let‚Äôs take an example.\n\nThe car icon(A) represents the location in the segment where the driver marker\ncurrently is. The red pin(X) represents the new snapped location received. To\ncalculate the distance, we do the obvious:\n\nTotal distance = d1 + d2 + d3 + d4\n\nNow, we have the distance. We need the time interval.\n\nThe FusedLocationProvider API in the driver app does provide us the timestamp at\nwhich a location was updated. And this information is passed to our backend and\nsubsequently to the customer app.\n\nWe calculate the time difference b/w the old driver location and the new driver\nlocation using their timestamps. Wait, how do we know the old driver location?\nAs we had mentioned earlier, we cache the last available driver location and\nroute in an in-memory cache.\n\nTotal route distance divided by time and now we have the speed for the entire\nduration. Linear distance divided by this speed and now we have the durationfor\na single animation in a segment. Cool, so let‚Äôs get back to the point where we\nbroke off üòÖ.\n\nUpdate the animation\nWith all the above information, we start the animation. But wait? Aren‚Äôt we\nmissing something? We did start an animation b/w two points but how will our\nanimator know how to animate?\n\nAnimation is just a bunch of frame updates that happen every fast. How do we\nupdate the marker position, the starting point of the route, the rotation in\neach and every frame of the animation? Well, the mobile/web framework allows us\nto do something every time the frame is updated.\n\nBut what is this something that we should do?\n\n1. Update marker‚Äôs position\nFor markers, we need to update their position. Once we have the position, we can\nsimply update the marker position using the marker.setPosition(). To find the\nposition during each frame of the animation, we need the percentage of animation\nthat has elapsed.\n\nWe can get the percentage from the Animation framework. Using this percentage\nand the start and end position, we calculate the intermediate position/s like\nthis:\n\nSphericalUtil.interpolate(startPosition, endPosition, fraction)\n\n2. Update Routes\nRoutes need to be aligned with the marker‚Äôs movement. So, we update the routes\nas well using the values above and updating the polyline points of that route\nusing the polyline.setPoints().\n\nAnd that‚Äôs a wrap. The result that we get is a very smooth, measured movement of\nthe vehicle along the road.\n\nThere are a few more tips/tricks that we employ to ensure that there are no\nabrupt changes in the animation.\n\nBut that‚Äôs for next time. üòÉ\n\nWhat‚Äôs next?\nWe still need to go a long way to meet the standards that we have set for\nourselves. Currently, this new experience is only rolled out to GoRide, GoCar,\nand GoBluebird. We are working on bringing the same experience to other services\nlike GoFood, GoSend, and GoShop. Stay tuned for more!\n\nWant stories like this one beamed straight to your inbox? Sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\nThanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij\nChoudhary.","html":"<p><em><strong>By Divya Vikash</strong></em></p><p>It‚Äôs a nice Monday morning and you just ordered a GoRide (one of Gojek‚Äôs transport products) to go to your office. Voila!! You got a driver. That was fast. You can see your driver‚Äôs location on the map, and the estimated time they would take to come to you.</p><p><em><em>But hang on‚Ä¶ It seems like the map is a bit messed up.</em></em></p><p>The driver location on the map goes back and forth at unreal speed, and even flies over buildings. Starring in an action movie is not exactly how you want to start your week. üòÆ</p><p>While our driver-partners sure are superman in their own unique way, they certainly can‚Äôt drive over buildings. This is clearly not how your driver is actually driving on the road. But then why is the map showing all this?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking2.gif\" class=\"kg-image\"></figure><p>Well, there are multiple factors that can lead to a bad experience like that. Some within our control, some not so much (as of now). We decided to go back to the drawing board and figure out the issues that are in our control and fix them for good. And that is how we built a world-class (arguably üò¨) live-tracking experience.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image.png\" class=\"kg-image\"></figure><p>But what is live-tracking, you would ask?</p><p>Live tracking is a complete map experience. It doesn‚Äôt involve anything other than what you see on maps after you get a driver.</p><p>So, what do you see on maps?</p><ol><li>Driver's location depicted by a green marker.</li><li>The routes.</li><li>The change in driver marker as the driver moves closer to your pickup/your destination.</li><li>The change in route as the driver moves.</li></ol><p>And that‚Äôs it. That‚Äôs all live-tracking is.</p><blockquote><em><em>But that sounds quite simple. Right? Use some routing APIs and plot the markers and routes.</em></em></blockquote><p>Well, yes, it sounded easy to us when we first heard about it too. The real experience threw us a few curveballs. Let‚Äôs go through how we create a live-tracking experience.</p><p><strong>Input</strong></p><p>Let‚Äôs look at the input data that we need to create a live-tracking animation:</p><p><strong><strong>Driver Location and Routes</strong></strong></p><p>Our driver apps have an in-built mechanism to upload driver location to our backend at regular intervals. This is how we are able to find a driver close to your location when you order one of our services. The primary input to live-tracking is this driver location.</p><p>In our driver app, we get this location using Android‚Äôs <code>FusedLocationProvider</code> API which automatically uses the best location provider(GPS, Wifi, etc). The driver location is ingested into our backend system via a continuous stream. Routes are generated by our internal routing engine and provided to the customer app.</p><h3 id=\"input-source\">Input Source</h3><p>As you would have guessed, this data is provided via API calls initiated by the our Super App to the routing engine.</p><p>Making the API call just once won‚Äôt be sufficient. Right? The app needs to be informed every time the driver‚Äôs location has changed. So, the customer app polls this API every few seconds to get this data.</p><p>Now, we have a continuous stream of data flowing to our app which has all the information that we need to show the vehicle animation on the road.</p><h3 id=\"terminology\">Terminology</h3><p>Before moving forward, we should get acquainted with a few terminologies that we would use quite frequently in this post.</p><ol><li><strong><strong>Route</strong></strong>: The entire list of latitude-longitudes between the driver location to the pickup/destination location.</li><li><strong><strong>Segment</strong></strong>: A segment is the smallest unit of a route. It is a straight line from one position in the routes list to the very next position in the routes list.</li></ol><p>A route of length n has n-1 segments. Confused? Yeah, let‚Äôs take an example.</p><p>A <strong><strong>Route</strong></strong> looks like this:</p><p>[{-6<code>2441198, 106.8032959},<br>{-6.2440766, 106.80328}, <br>{-6.2439977, 106.8033275},<br>{-6.2434893, 106.8029214},<br>{-6.2433926, 106.8030539},<br>{-6.2436018, 106.803222}]</code></p><p>There are 5 <strong><strong>Segments</strong></strong> in this route.</p><p><code>Segment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}</code><br><code>Segment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}</code><br><code>Segment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}</code><br><code>Segment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}</code><br><code>Segment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-1.png\" class=\"kg-image\"></figure><h3 id=\"the-initial-setup\">The initial setup</h3><p>When the user lands on the live tracking screen, the app immediately makes a call to our internal API to get the driver location and route. Once we get this data, we plot it on the map using the standard GoogleMap methods. <code><em><em>googleMap.addMarker()</em></em></code><em><em>, </em></em><code><em><em>googleMap.addPolyline()</em></em></code> etc.</p><p>Sometimes, we don‚Äôt have the routing information available immediately, so we just show the driver marker. We also store this data locally in an in-memory cache as we would need it later to do some comparisons.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/436/1*k9IpgQ4ss-bhKHBY5ETUgg.gif\" class=\"kg-image\"></figure><p>So, the customer is able to see the markers and routes on the map now. So far so good.</p><h3 id=\"the-subsequent-updates\">The subsequent updates</h3><p>As I mentioned earlier, we need to change the position of driver marker and route as the driver moves. The customer app makes a call to the same internal API every few seconds. After the first response, we don‚Äôt move any markers or routes on the map until the next response succeeds.</p><p>In the next response, we again get the same data points i.e the route and driver location but with different values, of course, <strong><strong>if the driver has moved</strong></strong>. The next set of data that we get can have the following characteristics:</p><ol><li>Route and driver location don‚Äôt change</li><li>Route changes</li><li>Route doesn‚Äôt change BUT driver location does</li></ol><p>Let‚Äôs discuss these cases one by one.</p><h3 id=\"1-route-and-driver-location-don-t-change\">1: Route and driver location don‚Äôt change</h3><p>If nothing has changed, we don‚Äôt need to do anything. Probably our driver partner is stuck in traffic. üòû</p><h3 id=\"2-route-changes\">2: Route changes</h3><p>This can happen either when:</p><ol><li>The app was not showing any route to the user before i.e the first response didn‚Äôt have the route.</li><li>The app was showing a route that is different from the newly received route. This usually happens in cases where the driver starts following a different route from the one they were following before. This can also happen due to road closures or simply because our driver-partner initially followed a wrong route by mistake üòÖ.</li></ol><p>In either of these cases, we simply ignore the old driver marker and routes which were shown and plot the new marker and routes.</p><h3 id=\"3-route-doesn-t-change-but-driver-location-does\">3: Route doesn‚Äôt change BUT driver location does</h3><p>The app was showing the same route to the user before i.e the old response had the same route as the new response. This means that the driver is following the original route that we determined.</p><p>In this case, we need to animate the driver marker on the map from the old location to the new location along the same route. This is the most common scenario, which can again be broken down further into multiple scenarios (yeah, I‚Äôm all about breaking things down ü§ê).</p><h3 id=\"3-1-does-the-new-location-lie-on-the-route\">3.1: Does the new location lie on the route?</h3><p>To animate the driver marker from it‚Äôs current position to the new location, we first need to know whether the new location lies on the route or not.</p><p>Yeah, we can‚Äôt be sure that the driver location that we have received would always lie on the route/road because of various GPS inaccuracy issues.</p><p>We iterate through every segment in the route to find the segment which has the new location. For every segment, we use the Geometry/PolyUtil library to determine whether the driver location lies on that route.</p><p>We also specify a tolerance of a few meters to account for GPS inaccuracy. So, if the newly received location is within a radius of <strong><strong>X meters</strong></strong> near a segment, this method will return true.</p><p><strong><strong>Android</strong></strong></p><p><code>boolean isLocationOnPath(LatLng point,List&lt;LatLng&gt; polyline,boolean geodesic, double tolerance)</code></p><p><strong><strong>iOS</strong></strong></p><p><code>BOOL <a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d\" rel=\"noopener\">GMSGeometryIsLocationOnPathToleranc</a>e(CLLocationCoordinate2D point,<a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path\" rel=\"noopener\">GMSPath</a> * path,BOOL geodesic,CLLocationDistance tolerance)</code></p><p>If the location doesn‚Äôt lie on any of the segments in the route, we are sad and so, we don‚Äôt animate anything. But if it does, we go forward with the next step which is‚Ä¶.</p><h3 id=\"3-2-vehicle-projection-on-route\">3.2: Vehicle projection on route</h3><p>When we receive a new location, the start location is simply the position that the driver marker is already at. No logic required there to calculate that.</p><p>The end location should simply be the new location that we received. Well, in an ideal world, it <strong><strong>should be</strong></strong> but we live so far away from an ideal world üòû.</p><p>As we mentioned earlier, the raw driver location that we get from the driver app via GPS/other providers mostly doesn‚Äôt lie on the road. So, we have to find a projection of the driver location on the road/route.</p><p>If you have been reading carefully, you might wonder why we can‚Äôt just use the <em><em>isLocationOnPath()</em></em> method above ü§î.</p><p>Well, if you had been reading <em><em>more</em></em> carefully, you might have noticed that this method returns a boolean explaining whether the location is on/near the route or not ü§¶‚Äç‚ôÇ. It doesn‚Äôt return the projected location. (Ohh..if someone from Maps Utils stumbled upon this by chance, please add that method, good sir).</p><p>So, we had to revise some maths. Yeah, folks, learn your maths well. You never know when a situation like this might arise ü§∑‚Äç‚ôÇ.</p><p><em><em>‚ÄúFind the projection of point (x,y) on the line y = mx + c‚Äù.</em></em> Does that ring a bell? Drawing a perpendicular line towards the segment and calculating the location of where the line and route intersect can give us the projected location. Right?</p><p>Well, the above approach works for 2-D systems but earth is not a 2-D space. We need a way to project the spherical surface of the earth onto a rectangle 2-D space. There are several ways to do that. All of them have certain drawbacks. We might lose information like direction or the shape of landmasses/countries or the area information.</p><p><strong><strong>Mercator Projection</strong></strong></p><p>Mercator projection is one of the available methods to project the spherical map of earth onto a rectangle to make usable maps. Most of the mapping tools used for navigation use this projection.</p><p>The key feature of Mercator projection is that it retains the direction information. That means if point A is 30deg east from north of point B on the globe, it will be in the same direction on its Mercator projection. Or say there is a turn of 90deg in some lane, it will be 90deg on Mercator projection as well. That is the reason it works really well for navigation purposes.</p><p><strong><strong>How to use a Mercator projection?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-4.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-5.png\" class=\"kg-image\"></figure><ol><li>Every point on the earth is projected on a cylinder exactly like point A which has point A‚Äô on the cylinder.</li><li>Once all the required points/routes are projected on this cylinder. It is unrolled, and we obtain a rectangle like the one shown above.</li><li>All the planar geometry can be applied with a very little margin of error on this 2D projected map.</li><li>After processing all the points/routes they can be converted back to latitude and longitude on the globe.</li></ol><p>So, now we have the projected driver location on the route which we will fondly call <code>snapped point</code> going forward.</p><h3 id=\"3-3-end-to-end-animation\">3.3: End-to-End animation</h3><p>The new driver location that we receive can be present in <strong><strong>any</strong></strong> segment. It may be that it is in the same segment or it may be that it is on the next segment or on the next one or it may be that it is on the last segment.</p><p>But for linear animation, we need a start point and an end point. The start point is the current position of the driver marker. We already got the snapped endpoint in the earlier section. But we can‚Äôt just animate from start to end <strong><strong>at once</strong></strong> as that would seem like the car is flying and ignoring U-turns, routes, etc. So, how do we prevent it from flying?</p><p>What do you do when you can‚Äôt fly to a place? You follow the road. Right? That‚Äôs what we have to do as well. Make the driver marker follow the route/road. We need to animate along each segment in the route until we reach the segment which has the driver position that we received.</p><p>There are again two cases here üòú:</p><h3 id=\"3-3-1-the-new-driver-location-is-on-the-same-segment\">3.3.1: The new driver location is on the same segment</h3><p>In this case, we can directly animate from the current position of driver marker to the driver location that we received since this is just a straight line animation.</p><p>A segment is always a straight line. We will discuss more on how to do the animation b/w 2 points in a later section.</p><h3 id=\"3-3-2-the-new-driver-location-is-on-a-different-segment\">3.3.2: The new driver location is on a different segment</h3><p>In this case, we need to animate to that segment along the route. We have to animate along each of the segments in between to reach the final segment.</p><p>For animation along the first segment, we set the endpoint of the animation to the beginning of the next segment in the route. We animate to the end of the first segment.</p><p>The next segment may also not have the driver location that we received. After a driver has traversed the first segment, we move the end location of the animation to the end of the next segment, and so on and so forth till we reach the last segment. Confusing, ya? Let‚Äôs see an example.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/Screenshot-2020-05-23-at-10.06.55-PM.png\" class=\"kg-image\"><figcaption>So much zig-zag (huh!!)</figcaption></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received.</p><p>In the 1st animation, we move the driver marker from A to the end of the first segment (B).</p><p>In the 2nd animation, the driver marker is moved through the entire length of the 2nd segment.</p><p>And so on and so forth till we reach the segment which has the newly received snapped location (X).</p><h2 id=\"animation-in-a-segment\">Animation in a segment</h2><p>We now know how the overall animation would look like. But we also need to configure how the smallest unit of the animation i.e animation in a segment should happen.</p><p><strong><strong>Start point and End point</strong></strong>: For case #1 above, the animation in a segment will happen just once. For case #2 above, this animation in a segment will happen multiple times. Start and endpoints will be determined before beginning each of the animations.</p><p><strong><strong>Bearing b/w these two points</strong></strong>: Bearing can be calculated using another one of Geometry/Maps Utils method.</p><p><code>SphericalUtil.computeHeading(startPosition, endPosition)</code></p><p><strong><strong>Duration of animation: </strong></strong>Calculating duration is a bit tricky. And the duration is the most important thing in any animation. Sometimes the difference b/w a smooth and a choppy animation is caused by the duration. It was very important that we got it right. So, let‚Äôs take a break and see how to calculate the duration.</p><h2 id=\"what-is-duration\">What is Duration?</h2><p>It‚Äôs the amount of time for which the animation should happen. But you already know that. Going back to middle school maths (yeah, that far), how do you calculate time? Time is nothing but distance divided by speed. Correct? Calculating straight line distance b/w the two points we want to animate through is pretty easy.</p><p><code>SphericalUtil.computeDistanceBetween(startLocation, endLocation)</code></p><p>Cool, cool. But what about speed? How should we calculate speed?</p><h2 id=\"speed-calculation\">Speed calculation</h2><p><code>FusedLocationProvider</code> API in the driver app does provide the speed of the vehicle but it‚Äôs highly unreliable. So, we have to employ some tricks to calculate the speed.</p><p>Speed is distance divided by time. Distance again!! Seems like we are running in circles üòµ. Not exactly. Here the distance is not the straight line distance b/w the two points that we have to animate through.</p><p>This is the total distance along the route <strong><strong>from</strong></strong> the segment that the old driver location is currently located at, <strong><strong>to</strong></strong> the segment where the new driver location is. Yeah, that statement is a bit confusing. So, let‚Äôs take an example.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-8.png\" class=\"kg-image\"></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received. To calculate the distance, we do the obvious:</p><p><code>Total distance = d1 + d2 + d3 + d4</code></p><p>Now, we have the distance. We need the time interval.</p><p>The <code>FusedLocationProvider</code> API in the driver app does provide us the timestamp at which a location was updated. And this information is passed to our backend and subsequently to the customer app.</p><p>We calculate the time difference b/w the old driver location and the new driver location using their timestamps. Wait, how do we know the old driver location? As we had mentioned earlier, we cache the last available driver location and route in an in-memory cache.</p><p>Total route distance divided by time and now we have the speed for the entire duration. Linear distance divided by this speed and now we have the <strong><strong>duration</strong></strong>for a single animation in a segment. Cool, so let‚Äôs get back to the point where we broke off üòÖ.</p><h1 id=\"update-the-animation\">Update the animation</h1><p>With all the above information, we start the animation. But wait? Aren‚Äôt we missing something? We did start an animation b/w two points but how will our animator know <strong><strong>how</strong></strong> to animate?</p><p>Animation is just a bunch of frame updates that happen every fast. How do we update the marker position, the starting point of the route, the rotation in each and every frame of the animation? Well, the mobile/web framework allows us to do something every time the frame is updated.</p><p>But what is this something that we should do?</p><h2 id=\"1-update-marker-s-position\">1. Update marker‚Äôs position</h2><p>For markers, we need to update their position. Once we have the position, we can simply update the marker position using the <code>marker.setPosition()</code>. To find the position during each frame of the animation, we need the percentage of animation that has elapsed.</p><p>We can get the percentage from the Animation framework. Using this percentage and the start and end position, we calculate the intermediate position/s like this:</p><p><code>SphericalUtil.interpolate(startPosition, endPosition, fraction)</code></p><h2 id=\"2-update-routes\">2. Update Routes</h2><p>Routes need to be aligned with the marker‚Äôs movement. So, we update the routes as well using the values above and updating the polyline points of that route using the <code>polyline.setPoints()</code><em><em>.</em></em></p><p>And that‚Äôs a wrap. The result that we get is a very smooth, measured movement of the vehicle along the road.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/600/1*EtoKV1x7ufBgxOPdcsvnJg.gif\" class=\"kg-image\"></figure><p>There are a few more tips/tricks that we employ to ensure that there are no abrupt changes in the animation.</p><p>But that‚Äôs for next time. üòÉ</p><h3 id=\"what-s-next\">What‚Äôs next?</h3><p>We still need to go a long way to meet the standards that we have set for ourselves. Currently, this new experience is only rolled out to GoRide, GoCar, and GoBluebird. We are working on bringing the same experience to other services like GoFood, GoSend, and GoShop. Stay tuned for more!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-9.png\" class=\"kg-image\"></figure><p>Want stories like this one beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><p>Thanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij Choudhary.</p>","url":"https://gojek-ghost.zysk.in/tips-for-building-smooth-live-tracking/","canonical_url":null,"uuid":"90db33e9-3b67-4c66-a39f-7247172d3fa7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec94e8c7aa22c4066f83db2","reading_time":13}}]},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}},{"node":{"name":"Maps","slug":"maps"}},{"node":{"name":"Ride Hailing","slug":"ride-hailing"}},{"node":{"name":"Software Engineering","slug":"software-engineering"}},{"node":{"name":"Startup","slug":"startup"}}]}},"pageContext":{"slug":"ride-hailing","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}