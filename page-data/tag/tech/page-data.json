{"componentChunkName":"component---src-templates-tag-js","path":"/tag/tech/","result":{"data":{"ghostTag":{"slug":"tech","name":"Tech","visibility":"public","feature_image":null,"description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5ec94e8c7aa22c4066f83db2","title":"Tips for Building Smooth Live Tracking","slug":"tips-for-building-smooth-live-tracking","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg","excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","custom_excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","visibility":"public","created_at_pretty":"23 May, 2020","published_at_pretty":"22 May, 2020","updated_at_pretty":"02 June, 2020","created_at":"2020-05-23T21:55:48.000+05:30","published_at":"2020-05-22T09:00:00.000+05:30","updated_at":"2020-06-02T12:26:00.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Divya Vikash\n\nIt‚Äôs a nice Monday morning and you just ordered a GoRide (one of Gojek‚Äôs\ntransport products) to go to your office. Voila!! You got a driver. That was\nfast. You can see your driver‚Äôs location on the map, and the estimated time they\nwould take to come to you.\n\nBut hang on‚Ä¶ It seems like the map is a bit messed up.\n\nThe driver location on the map goes back and forth at unreal speed, and even\nflies over buildings. Starring in an action movie is not exactly how you want to\nstart your week. üòÆ\n\nWhile our driver-partners sure are superman in their own unique way, they\ncertainly can‚Äôt drive over buildings. This is clearly not how your driver is\nactually driving on the road. But then why is the map showing all this?\n\nWell, there are multiple factors that can lead to a bad experience like that.\nSome within our control, some not so much (as of now). We decided to go back to\nthe drawing board and figure out the issues that are in our control and fix them\nfor good. And that is how we built a world-class (arguably üò¨) live-tracking\nexperience.\n\nBut what is live-tracking, you would ask?\n\nLive tracking is a complete map experience. It doesn‚Äôt involve anything other\nthan what you see on maps after you get a driver.\n\nSo, what do you see on maps?\n\n 1. Driver's location depicted by a green marker.\n 2. The routes.\n 3. The change in driver marker as the driver moves closer to your pickup/your\n    destination.\n 4. The change in route as the driver moves.\n\nAnd that‚Äôs it. That‚Äôs all live-tracking is.\n\n> But that sounds quite simple. Right? Use some routing APIs and plot the markers\nand routes.\nWell, yes, it sounded easy to us when we first heard about it too. The real\nexperience threw us a few curveballs. Let‚Äôs go through how we create a\nlive-tracking experience.\n\nInput\nLet‚Äôs look at the input data that we need to create a live-tracking animation:\n\nDriver Location and Routes\nOur driver apps have an in-built mechanism to upload driver location to our\nbackend at regular intervals. This is how we are able to find a driver close to\nyour location when you order one of our services. The primary input to\nlive-tracking is this driver location.\n\nIn our driver app, we get this location using Android‚Äôs FusedLocationProvider \nAPI which automatically uses the best location provider(GPS, Wifi, etc). The\ndriver location is ingested into our backend system via a continuous stream.\nRoutes are generated by our internal routing engine and provided to the customer\napp.\n\nInput Source\nAs you would have guessed, this data is provided via API calls initiated by the\nour Super App to the routing engine.\n\nMaking the API call just once won‚Äôt be sufficient. Right? The app needs to be\ninformed every time the driver‚Äôs location has changed. So, the customer app\npolls this API every few seconds to get this data.\n\nNow, we have a continuous stream of data flowing to our app which has all the\ninformation that we need to show the vehicle animation on the road.\n\nTerminology\nBefore moving forward, we should get acquainted with a few terminologies that we\nwould use quite frequently in this post.\n\n 1. Route: The entire list of latitude-longitudes between the driver location to\n    the pickup/destination location.\n 2. Segment: A segment is the smallest unit of a route. It is a straight line\n    from one position in the routes list to the very next position in the routes\n    list.\n\nA route of length n has n-1 segments. Confused? Yeah, let‚Äôs take an example.\n\nA Route looks like this:\n\n[{-62441198, 106.8032959},\n{-6.2440766, 106.80328}, \n{-6.2439977, 106.8033275},\n{-6.2434893, 106.8029214},\n{-6.2433926, 106.8030539},\n{-6.2436018, 106.803222}]\n\nThere are 5 Segments in this route.\n\nSegment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}\nSegment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}\nSegment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}\nSegment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}\nSegment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}\n\nThe initial setup\nWhen the user lands on the live tracking screen, the app immediately makes a\ncall to our internal API to get the driver location and route. Once we get this\ndata, we plot it on the map using the standard GoogleMap methods. \ngoogleMap.addMarker(), googleMap.addPolyline() etc.\n\nSometimes, we don‚Äôt have the routing information available immediately, so we\njust show the driver marker. We also store this data locally in an in-memory\ncache as we would need it later to do some comparisons.\n\nSo, the customer is able to see the markers and routes on the map now. So far so\ngood.\n\nThe subsequent updates\nAs I mentioned earlier, we need to change the position of driver marker and\nroute as the driver moves. The customer app makes a call to the same internal\nAPI every few seconds. After the first response, we don‚Äôt move any markers or\nroutes on the map until the next response succeeds.\n\nIn the next response, we again get the same data points i.e the route and driver\nlocation but with different values, of course, if the driver has moved. The next\nset of data that we get can have the following characteristics:\n\n 1. Route and driver location don‚Äôt change\n 2. Route changes\n 3. Route doesn‚Äôt change BUT driver location does\n\nLet‚Äôs discuss these cases one by one.\n\n1: Route and driver location don‚Äôt change\nIf nothing has changed, we don‚Äôt need to do anything. Probably our driver\npartner is stuck in traffic. üòû\n\n2: Route changes\nThis can happen either when:\n\n 1. The app was not showing any route to the user before i.e the first response\n    didn‚Äôt have the route.\n 2. The app was showing a route that is different from the newly received route.\n    This usually happens in cases where the driver starts following a different\n    route from the one they were following before. This can also happen due to\n    road closures or simply because our driver-partner initially followed a\n    wrong route by mistake üòÖ.\n\nIn either of these cases, we simply ignore the old driver marker and routes\nwhich were shown and plot the new marker and routes.\n\n3: Route doesn‚Äôt change BUT driver location does\nThe app was showing the same route to the user before i.e the old response had\nthe same route as the new response. This means that the driver is following the\noriginal route that we determined.\n\nIn this case, we need to animate the driver marker on the map from the old\nlocation to the new location along the same route. This is the most common\nscenario, which can again be broken down further into multiple scenarios (yeah,\nI‚Äôm all about breaking things down ü§ê).\n\n3.1: Does the new location lie on the route?\nTo animate the driver marker from it‚Äôs current position to the new location, we\nfirst need to know whether the new location lies on the route or not.\n\nYeah, we can‚Äôt be sure that the driver location that we have received would\nalways lie on the route/road because of various GPS inaccuracy issues.\n\nWe iterate through every segment in the route to find the segment which has the\nnew location. For every segment, we use the Geometry/PolyUtil library to\ndetermine whether the driver location lies on that route.\n\nWe also specify a tolerance of a few meters to account for GPS inaccuracy. So,\nif the newly received location is within a radius of X meters near a segment,\nthis method will return true.\n\nAndroid\n\nboolean isLocationOnPath(LatLng point,List<LatLng> polyline,boolean geodesic,\ndouble tolerance)\n\niOS\n\nBOOL GMSGeometryIsLocationOnPathToleranc\n[https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d]\ne(CLLocationCoordinate2D point,GMSPath\n[https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path] \n* path,BOOL geodesic,CLLocationDistance tolerance)\n\nIf the location doesn‚Äôt lie on any of the segments in the route, we are sad and\nso, we don‚Äôt animate anything. But if it does, we go forward with the next step\nwhich is‚Ä¶.\n\n3.2: Vehicle projection on route\nWhen we receive a new location, the start location is simply the position that\nthe driver marker is already at. No logic required there to calculate that.\n\nThe end location should simply be the new location that we received. Well, in an\nideal world, it should be but we live so far away from an ideal world üòû.\n\nAs we mentioned earlier, the raw driver location that we get from the driver app\nvia GPS/other providers mostly doesn‚Äôt lie on the road. So, we have to find a\nprojection of the driver location on the road/route.\n\nIf you have been reading carefully, you might wonder why we can‚Äôt just use the \nisLocationOnPath() method above ü§î.\n\nWell, if you had been reading more carefully, you might have noticed that this\nmethod returns a boolean explaining whether the location is on/near the route or\nnot ü§¶‚Äç‚ôÇ. It doesn‚Äôt return the projected location. (Ohh..if someone from Maps\nUtils stumbled upon this by chance, please add that method, good sir).\n\nSo, we had to revise some maths. Yeah, folks, learn your maths well. You never\nknow when a situation like this might arise ü§∑‚Äç‚ôÇ.\n\n‚ÄúFind the projection of point (x,y) on the line y = mx + c‚Äù. Does that ring a\nbell? Drawing a perpendicular line towards the segment and calculating the\nlocation of where the line and route intersect can give us the projected\nlocation. Right?\n\nWell, the above approach works for 2-D systems but earth is not a 2-D space. We\nneed a way to project the spherical surface of the earth onto a rectangle 2-D\nspace. There are several ways to do that. All of them have certain drawbacks. We\nmight lose information like direction or the shape of landmasses/countries or\nthe area information.\n\nMercator Projection\n\nMercator projection is one of the available methods to project the spherical map\nof earth onto a rectangle to make usable maps. Most of the mapping tools used\nfor navigation use this projection.\n\nThe key feature of Mercator projection is that it retains the direction\ninformation. That means if point A is 30deg east from north of point B on the\nglobe, it will be in the same direction on its Mercator projection. Or say there\nis a turn of 90deg in some lane, it will be 90deg on Mercator projection as\nwell. That is the reason it works really well for navigation purposes.\n\nHow to use a Mercator projection?\n\n 1. Every point on the earth is projected on a cylinder exactly like point A\n    which has point A‚Äô on the cylinder.\n 2. Once all the required points/routes are projected on this cylinder. It is\n    unrolled, and we obtain a rectangle like the one shown above.\n 3. All the planar geometry can be applied with a very little margin of error on\n    this 2D projected map.\n 4. After processing all the points/routes they can be converted back to\n    latitude and longitude on the globe.\n\nSo, now we have the projected driver location on the route which we will fondly\ncall snapped point going forward.\n\n3.3: End-to-End animation\nThe new driver location that we receive can be present in any segment. It may be\nthat it is in the same segment or it may be that it is on the next segment or on\nthe next one or it may be that it is on the last segment.\n\nBut for linear animation, we need a start point and an end point. The start\npoint is the current position of the driver marker. We already got the snapped\nendpoint in the earlier section. But we can‚Äôt just animate from start to end at\nonce as that would seem like the car is flying and ignoring U-turns, routes,\netc. So, how do we prevent it from flying?\n\nWhat do you do when you can‚Äôt fly to a place? You follow the road. Right? That‚Äôs\nwhat we have to do as well. Make the driver marker follow the route/road. We\nneed to animate along each segment in the route until we reach the segment which\nhas the driver position that we received.\n\nThere are again two cases here üòú:\n\n3.3.1: The new driver location is on the same segment\nIn this case, we can directly animate from the current position of driver marker\nto the driver location that we received since this is just a straight line\nanimation.\n\nA segment is always a straight line. We will discuss more on how to do the\nanimation b/w 2 points in a later section.\n\n3.3.2: The new driver location is on a different segment\nIn this case, we need to animate to that segment along the route. We have to\nanimate along each of the segments in between to reach the final segment.\n\nFor animation along the first segment, we set the endpoint of the animation to\nthe beginning of the next segment in the route. We animate to the end of the\nfirst segment.\n\nThe next segment may also not have the driver location that we received. After a\ndriver has traversed the first segment, we move the end location of the\nanimation to the end of the next segment, and so on and so forth till we reach\nthe last segment. Confusing, ya? Let‚Äôs see an example.\n\nSo much zig-zag (huh!!)The car icon(A) represents the location in the segment\nwhere the driver marker currently is. The red pin(X) represents the new snapped\nlocation received.\n\nIn the 1st animation, we move the driver marker from A to the end of the first\nsegment (B).\n\nIn the 2nd animation, the driver marker is moved through the entire length of\nthe 2nd segment.\n\nAnd so on and so forth till we reach the segment which has the newly received\nsnapped location (X).\n\nAnimation in a segment\nWe now know how the overall animation would look like. But we also need to\nconfigure how the smallest unit of the animation i.e animation in a segment\nshould happen.\n\nStart point and End point: For case #1 above, the animation in a segment will\nhappen just once. For case #2 above, this animation in a segment will happen\nmultiple times. Start and endpoints will be determined before beginning each of\nthe animations.\n\nBearing b/w these two points: Bearing can be calculated using another one of\nGeometry/Maps Utils method.\n\nSphericalUtil.computeHeading(startPosition, endPosition)\n\nDuration of animation: Calculating duration is a bit tricky. And the duration is\nthe most important thing in any animation. Sometimes the difference b/w a smooth\nand a choppy animation is caused by the duration. It was very important that we\ngot it right. So, let‚Äôs take a break and see how to calculate the duration.\n\nWhat is Duration?\nIt‚Äôs the amount of time for which the animation should happen. But you already\nknow that. Going back to middle school maths (yeah, that far), how do you\ncalculate time? Time is nothing but distance divided by speed. Correct?\nCalculating straight line distance b/w the two points we want to animate through\nis pretty easy.\n\nSphericalUtil.computeDistanceBetween(startLocation, endLocation)\n\nCool, cool. But what about speed? How should we calculate speed?\n\nSpeed calculation\nFusedLocationProvider API in the driver app does provide the speed of the\nvehicle but it‚Äôs highly unreliable. So, we have to employ some tricks to\ncalculate the speed.\n\nSpeed is distance divided by time. Distance again!! Seems like we are running in\ncircles üòµ. Not exactly. Here the distance is not the straight line distance b/w\nthe two points that we have to animate through.\n\nThis is the total distance along the route from the segment that the old driver\nlocation is currently located at, to the segment where the new driver location\nis. Yeah, that statement is a bit confusing. So, let‚Äôs take an example.\n\nThe car icon(A) represents the location in the segment where the driver marker\ncurrently is. The red pin(X) represents the new snapped location received. To\ncalculate the distance, we do the obvious:\n\nTotal distance = d1 + d2 + d3 + d4\n\nNow, we have the distance. We need the time interval.\n\nThe FusedLocationProvider API in the driver app does provide us the timestamp at\nwhich a location was updated. And this information is passed to our backend and\nsubsequently to the customer app.\n\nWe calculate the time difference b/w the old driver location and the new driver\nlocation using their timestamps. Wait, how do we know the old driver location?\nAs we had mentioned earlier, we cache the last available driver location and\nroute in an in-memory cache.\n\nTotal route distance divided by time and now we have the speed for the entire\nduration. Linear distance divided by this speed and now we have the durationfor\na single animation in a segment. Cool, so let‚Äôs get back to the point where we\nbroke off üòÖ.\n\nUpdate the animation\nWith all the above information, we start the animation. But wait? Aren‚Äôt we\nmissing something? We did start an animation b/w two points but how will our\nanimator know how to animate?\n\nAnimation is just a bunch of frame updates that happen every fast. How do we\nupdate the marker position, the starting point of the route, the rotation in\neach and every frame of the animation? Well, the mobile/web framework allows us\nto do something every time the frame is updated.\n\nBut what is this something that we should do?\n\n1. Update marker‚Äôs position\nFor markers, we need to update their position. Once we have the position, we can\nsimply update the marker position using the marker.setPosition(). To find the\nposition during each frame of the animation, we need the percentage of animation\nthat has elapsed.\n\nWe can get the percentage from the Animation framework. Using this percentage\nand the start and end position, we calculate the intermediate position/s like\nthis:\n\nSphericalUtil.interpolate(startPosition, endPosition, fraction)\n\n2. Update Routes\nRoutes need to be aligned with the marker‚Äôs movement. So, we update the routes\nas well using the values above and updating the polyline points of that route\nusing the polyline.setPoints().\n\nAnd that‚Äôs a wrap. The result that we get is a very smooth, measured movement of\nthe vehicle along the road.\n\nThere are a few more tips/tricks that we employ to ensure that there are no\nabrupt changes in the animation.\n\nBut that‚Äôs for next time. üòÉ\n\nWhat‚Äôs next?\nWe still need to go a long way to meet the standards that we have set for\nourselves. Currently, this new experience is only rolled out to GoRide, GoCar,\nand GoBluebird. We are working on bringing the same experience to other services\nlike GoFood, GoSend, and GoShop. Stay tuned for more!\n\nWant stories like this one beamed straight to your inbox? Sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\nThanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij\nChoudhary.","html":"<p><em><strong>By Divya Vikash</strong></em></p><p>It‚Äôs a nice Monday morning and you just ordered a GoRide (one of Gojek‚Äôs transport products) to go to your office. Voila!! You got a driver. That was fast. You can see your driver‚Äôs location on the map, and the estimated time they would take to come to you.</p><p><em><em>But hang on‚Ä¶ It seems like the map is a bit messed up.</em></em></p><p>The driver location on the map goes back and forth at unreal speed, and even flies over buildings. Starring in an action movie is not exactly how you want to start your week. üòÆ</p><p>While our driver-partners sure are superman in their own unique way, they certainly can‚Äôt drive over buildings. This is clearly not how your driver is actually driving on the road. But then why is the map showing all this?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking2.gif\" class=\"kg-image\"></figure><p>Well, there are multiple factors that can lead to a bad experience like that. Some within our control, some not so much (as of now). We decided to go back to the drawing board and figure out the issues that are in our control and fix them for good. And that is how we built a world-class (arguably üò¨) live-tracking experience.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image.png\" class=\"kg-image\"></figure><p>But what is live-tracking, you would ask?</p><p>Live tracking is a complete map experience. It doesn‚Äôt involve anything other than what you see on maps after you get a driver.</p><p>So, what do you see on maps?</p><ol><li>Driver's location depicted by a green marker.</li><li>The routes.</li><li>The change in driver marker as the driver moves closer to your pickup/your destination.</li><li>The change in route as the driver moves.</li></ol><p>And that‚Äôs it. That‚Äôs all live-tracking is.</p><blockquote><em><em>But that sounds quite simple. Right? Use some routing APIs and plot the markers and routes.</em></em></blockquote><p>Well, yes, it sounded easy to us when we first heard about it too. The real experience threw us a few curveballs. Let‚Äôs go through how we create a live-tracking experience.</p><h3 id=\"input\">Input</h3><p>Let‚Äôs look at the input data that we need to create a live-tracking animation:</p><h3 id=\"driver-location-and-routes\">Driver Location and Routes</h3><p>Our driver apps have an in-built mechanism to upload driver location to our backend at regular intervals. This is how we are able to find a driver close to your location when you order one of our services. The primary input to live-tracking is this driver location.</p><p>In our driver app, we get this location using Android‚Äôs <code>FusedLocationProvider</code> API which automatically uses the best location provider(GPS, Wifi, etc). The driver location is ingested into our backend system via a continuous stream. Routes are generated by our internal routing engine and provided to the customer app.</p><h3 id=\"input-source\">Input Source</h3><p>As you would have guessed, this data is provided via API calls initiated by the our Super App to the routing engine.</p><p>Making the API call just once won‚Äôt be sufficient. Right? The app needs to be informed every time the driver‚Äôs location has changed. So, the customer app polls this API every few seconds to get this data.</p><p>Now, we have a continuous stream of data flowing to our app which has all the information that we need to show the vehicle animation on the road.</p><h3 id=\"terminology\">Terminology</h3><p>Before moving forward, we should get acquainted with a few terminologies that we would use quite frequently in this post.</p><ol><li><strong><strong>Route</strong></strong>: The entire list of latitude-longitudes between the driver location to the pickup/destination location.</li><li><strong><strong>Segment</strong></strong>: A segment is the smallest unit of a route. It is a straight line from one position in the routes list to the very next position in the routes list.</li></ol><p>A route of length n has n-1 segments. Confused? Yeah, let‚Äôs take an example.</p><p>A <strong><strong>Route</strong></strong> looks like this:</p><p>[{-6<code>2441198, 106.8032959},<br>{-6.2440766, 106.80328}, <br>{-6.2439977, 106.8033275},<br>{-6.2434893, 106.8029214},<br>{-6.2433926, 106.8030539},<br>{-6.2436018, 106.803222}]</code></p><p>There are 5 <strong><strong>Segments</strong></strong> in this route.</p><p><code>Segment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}</code><br><code>Segment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}</code><br><code>Segment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}</code><br><code>Segment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}</code><br><code>Segment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-1.png\" class=\"kg-image\"></figure><h3 id=\"the-initial-setup\">The initial setup</h3><p>When the user lands on the live tracking screen, the app immediately makes a call to our internal API to get the driver location and route. Once we get this data, we plot it on the map using the standard GoogleMap methods. <code><em><em>googleMap.addMarker()</em></em></code><em><em>, </em></em><code><em><em>googleMap.addPolyline()</em></em></code> etc.</p><p>Sometimes, we don‚Äôt have the routing information available immediately, so we just show the driver marker. We also store this data locally in an in-memory cache as we would need it later to do some comparisons.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/436/1*k9IpgQ4ss-bhKHBY5ETUgg.gif\" class=\"kg-image\"></figure><p>So, the customer is able to see the markers and routes on the map now. So far so good.</p><h3 id=\"the-subsequent-updates\">The subsequent updates</h3><p>As I mentioned earlier, we need to change the position of driver marker and route as the driver moves. The customer app makes a call to the same internal API every few seconds. After the first response, we don‚Äôt move any markers or routes on the map until the next response succeeds.</p><p>In the next response, we again get the same data points i.e the route and driver location but with different values, of course, <strong><strong>if the driver has moved</strong></strong>. The next set of data that we get can have the following characteristics:</p><ol><li>Route and driver location don‚Äôt change</li><li>Route changes</li><li>Route doesn‚Äôt change BUT driver location does</li></ol><p>Let‚Äôs discuss these cases one by one.</p><h3 id=\"1-route-and-driver-location-don-t-change\">1: Route and driver location don‚Äôt change</h3><p>If nothing has changed, we don‚Äôt need to do anything. Probably our driver partner is stuck in traffic. üòû</p><h3 id=\"2-route-changes\">2: Route changes</h3><p>This can happen either when:</p><ol><li>The app was not showing any route to the user before i.e the first response didn‚Äôt have the route.</li><li>The app was showing a route that is different from the newly received route. This usually happens in cases where the driver starts following a different route from the one they were following before. This can also happen due to road closures or simply because our driver-partner initially followed a wrong route by mistake üòÖ.</li></ol><p>In either of these cases, we simply ignore the old driver marker and routes which were shown and plot the new marker and routes.</p><h3 id=\"3-route-doesn-t-change-but-driver-location-does\">3: Route doesn‚Äôt change BUT driver location does</h3><p>The app was showing the same route to the user before i.e the old response had the same route as the new response. This means that the driver is following the original route that we determined.</p><p>In this case, we need to animate the driver marker on the map from the old location to the new location along the same route. This is the most common scenario, which can again be broken down further into multiple scenarios (yeah, I‚Äôm all about breaking things down ü§ê).</p><h3 id=\"3-1-does-the-new-location-lie-on-the-route\">3.1: Does the new location lie on the route?</h3><p>To animate the driver marker from it‚Äôs current position to the new location, we first need to know whether the new location lies on the route or not.</p><p>Yeah, we can‚Äôt be sure that the driver location that we have received would always lie on the route/road because of various GPS inaccuracy issues.</p><p>We iterate through every segment in the route to find the segment which has the new location. For every segment, we use the Geometry/PolyUtil library to determine whether the driver location lies on that route.</p><p>We also specify a tolerance of a few meters to account for GPS inaccuracy. So, if the newly received location is within a radius of <strong><strong>X meters</strong></strong> near a segment, this method will return true.</p><p><strong><strong>Android</strong></strong></p><p><code>boolean isLocationOnPath(LatLng point,List&lt;LatLng&gt; polyline,boolean geodesic, double tolerance)</code></p><p><strong><strong>iOS</strong></strong></p><p><code>BOOL <a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d\" rel=\"noopener\">GMSGeometryIsLocationOnPathToleranc</a>e(CLLocationCoordinate2D point,<a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path\" rel=\"noopener\">GMSPath</a> * path,BOOL geodesic,CLLocationDistance tolerance)</code></p><p>If the location doesn‚Äôt lie on any of the segments in the route, we are sad and so, we don‚Äôt animate anything. But if it does, we go forward with the next step which is‚Ä¶.</p><h3 id=\"3-2-vehicle-projection-on-route\">3.2: Vehicle projection on route</h3><p>When we receive a new location, the start location is simply the position that the driver marker is already at. No logic required there to calculate that.</p><p>The end location should simply be the new location that we received. Well, in an ideal world, it <strong><strong>should be</strong></strong> but we live so far away from an ideal world üòû.</p><p>As we mentioned earlier, the raw driver location that we get from the driver app via GPS/other providers mostly doesn‚Äôt lie on the road. So, we have to find a projection of the driver location on the road/route.</p><p>If you have been reading carefully, you might wonder why we can‚Äôt just use the <em><em>isLocationOnPath()</em></em> method above ü§î.</p><p>Well, if you had been reading <em><em>more</em></em> carefully, you might have noticed that this method returns a boolean explaining whether the location is on/near the route or not ü§¶‚Äç‚ôÇ. It doesn‚Äôt return the projected location. (Ohh..if someone from Maps Utils stumbled upon this by chance, please add that method, good sir).</p><p>So, we had to revise some maths. Yeah, folks, learn your maths well. You never know when a situation like this might arise ü§∑‚Äç‚ôÇ.</p><p><em><em>‚ÄúFind the projection of point (x,y) on the line y = mx + c‚Äù.</em></em> Does that ring a bell? Drawing a perpendicular line towards the segment and calculating the location of where the line and route intersect can give us the projected location. Right?</p><p>Well, the above approach works for 2-D systems but earth is not a 2-D space. We need a way to project the spherical surface of the earth onto a rectangle 2-D space. There are several ways to do that. All of them have certain drawbacks. We might lose information like direction or the shape of landmasses/countries or the area information.</p><p><strong><strong>Mercator Projection</strong></strong></p><p>Mercator projection is one of the available methods to project the spherical map of earth onto a rectangle to make usable maps. Most of the mapping tools used for navigation use this projection.</p><p>The key feature of Mercator projection is that it retains the direction information. That means if point A is 30deg east from north of point B on the globe, it will be in the same direction on its Mercator projection. Or say there is a turn of 90deg in some lane, it will be 90deg on Mercator projection as well. That is the reason it works really well for navigation purposes.</p><p><strong><strong>How to use a Mercator projection?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-4.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-5.png\" class=\"kg-image\"></figure><ol><li>Every point on the earth is projected on a cylinder exactly like point A which has point A‚Äô on the cylinder.</li><li>Once all the required points/routes are projected on this cylinder. It is unrolled, and we obtain a rectangle like the one shown above.</li><li>All the planar geometry can be applied with a very little margin of error on this 2D projected map.</li><li>After processing all the points/routes they can be converted back to latitude and longitude on the globe.</li></ol><p>So, now we have the projected driver location on the route which we will fondly call <code>snapped point</code> going forward.</p><h3 id=\"3-3-end-to-end-animation\">3.3: End-to-End animation</h3><p>The new driver location that we receive can be present in <strong><strong>any</strong></strong> segment. It may be that it is in the same segment or it may be that it is on the next segment or on the next one or it may be that it is on the last segment.</p><p>But for linear animation, we need a start point and an end point. The start point is the current position of the driver marker. We already got the snapped endpoint in the earlier section. But we can‚Äôt just animate from start to end <strong><strong>at once</strong></strong> as that would seem like the car is flying and ignoring U-turns, routes, etc. So, how do we prevent it from flying?</p><p>What do you do when you can‚Äôt fly to a place? You follow the road. Right? That‚Äôs what we have to do as well. Make the driver marker follow the route/road. We need to animate along each segment in the route until we reach the segment which has the driver position that we received.</p><p>There are again two cases here üòú:</p><h3 id=\"3-3-1-the-new-driver-location-is-on-the-same-segment\">3.3.1: The new driver location is on the same segment</h3><p>In this case, we can directly animate from the current position of driver marker to the driver location that we received since this is just a straight line animation.</p><p>A segment is always a straight line. We will discuss more on how to do the animation b/w 2 points in a later section.</p><h3 id=\"3-3-2-the-new-driver-location-is-on-a-different-segment\">3.3.2: The new driver location is on a different segment</h3><p>In this case, we need to animate to that segment along the route. We have to animate along each of the segments in between to reach the final segment.</p><p>For animation along the first segment, we set the endpoint of the animation to the beginning of the next segment in the route. We animate to the end of the first segment.</p><p>The next segment may also not have the driver location that we received. After a driver has traversed the first segment, we move the end location of the animation to the end of the next segment, and so on and so forth till we reach the last segment. Confusing, ya? Let‚Äôs see an example.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/Screenshot-2020-05-23-at-10.06.55-PM.png\" class=\"kg-image\"><figcaption>So much zig-zag (huh!!)</figcaption></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received.</p><p>In the 1st animation, we move the driver marker from A to the end of the first segment (B).</p><p>In the 2nd animation, the driver marker is moved through the entire length of the 2nd segment.</p><p>And so on and so forth till we reach the segment which has the newly received snapped location (X).</p><h2 id=\"animation-in-a-segment\">Animation in a segment</h2><p>We now know how the overall animation would look like. But we also need to configure how the smallest unit of the animation i.e animation in a segment should happen.</p><p><strong><strong>Start point and End point</strong></strong>: For case #1 above, the animation in a segment will happen just once. For case #2 above, this animation in a segment will happen multiple times. Start and endpoints will be determined before beginning each of the animations.</p><p><strong><strong>Bearing b/w these two points</strong></strong>: Bearing can be calculated using another one of Geometry/Maps Utils method.</p><p><code>SphericalUtil.computeHeading(startPosition, endPosition)</code></p><p><strong><strong>Duration of animation: </strong></strong>Calculating duration is a bit tricky. And the duration is the most important thing in any animation. Sometimes the difference b/w a smooth and a choppy animation is caused by the duration. It was very important that we got it right. So, let‚Äôs take a break and see how to calculate the duration.</p><h2 id=\"what-is-duration\">What is Duration?</h2><p>It‚Äôs the amount of time for which the animation should happen. But you already know that. Going back to middle school maths (yeah, that far), how do you calculate time? Time is nothing but distance divided by speed. Correct? Calculating straight line distance b/w the two points we want to animate through is pretty easy.</p><p><code>SphericalUtil.computeDistanceBetween(startLocation, endLocation)</code></p><p>Cool, cool. But what about speed? How should we calculate speed?</p><h2 id=\"speed-calculation\">Speed calculation</h2><p><code>FusedLocationProvider</code> API in the driver app does provide the speed of the vehicle but it‚Äôs highly unreliable. So, we have to employ some tricks to calculate the speed.</p><p>Speed is distance divided by time. Distance again!! Seems like we are running in circles üòµ. Not exactly. Here the distance is not the straight line distance b/w the two points that we have to animate through.</p><p>This is the total distance along the route <strong><strong>from</strong></strong> the segment that the old driver location is currently located at, <strong><strong>to</strong></strong> the segment where the new driver location is. Yeah, that statement is a bit confusing. So, let‚Äôs take an example.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-8.png\" class=\"kg-image\"></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received. To calculate the distance, we do the obvious:</p><p><code>Total distance = d1 + d2 + d3 + d4</code></p><p>Now, we have the distance. We need the time interval.</p><p>The <code>FusedLocationProvider</code> API in the driver app does provide us the timestamp at which a location was updated. And this information is passed to our backend and subsequently to the customer app.</p><p>We calculate the time difference b/w the old driver location and the new driver location using their timestamps. Wait, how do we know the old driver location? As we had mentioned earlier, we cache the last available driver location and route in an in-memory cache.</p><p>Total route distance divided by time and now we have the speed for the entire duration. Linear distance divided by this speed and now we have the <strong><strong>duration</strong></strong>for a single animation in a segment. Cool, so let‚Äôs get back to the point where we broke off üòÖ.</p><h1 id=\"update-the-animation\">Update the animation</h1><p>With all the above information, we start the animation. But wait? Aren‚Äôt we missing something? We did start an animation b/w two points but how will our animator know <strong><strong>how</strong></strong> to animate?</p><p>Animation is just a bunch of frame updates that happen every fast. How do we update the marker position, the starting point of the route, the rotation in each and every frame of the animation? Well, the mobile/web framework allows us to do something every time the frame is updated.</p><p>But what is this something that we should do?</p><h2 id=\"1-update-marker-s-position\">1. Update marker‚Äôs position</h2><p>For markers, we need to update their position. Once we have the position, we can simply update the marker position using the <code>marker.setPosition()</code>. To find the position during each frame of the animation, we need the percentage of animation that has elapsed.</p><p>We can get the percentage from the Animation framework. Using this percentage and the start and end position, we calculate the intermediate position/s like this:</p><p><code>SphericalUtil.interpolate(startPosition, endPosition, fraction)</code></p><h2 id=\"2-update-routes\">2. Update Routes</h2><p>Routes need to be aligned with the marker‚Äôs movement. So, we update the routes as well using the values above and updating the polyline points of that route using the <code>polyline.setPoints()</code><em><em>.</em></em></p><p>And that‚Äôs a wrap. The result that we get is a very smooth, measured movement of the vehicle along the road.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/600/1*EtoKV1x7ufBgxOPdcsvnJg.gif\" class=\"kg-image\"></figure><p>There are a few more tips/tricks that we employ to ensure that there are no abrupt changes in the animation.</p><p>But that‚Äôs for next time. üòÉ</p><h3 id=\"what-s-next\">What‚Äôs next?</h3><p>We still need to go a long way to meet the standards that we have set for ourselves. Currently, this new experience is only rolled out to GoRide, GoCar, and GoBluebird. We are working on bringing the same experience to other services like GoFood, GoSend, and GoShop. Stay tuned for more!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-9.png\" class=\"kg-image\"></figure><p>Want stories like this one beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><p>Thanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij Choudhary.</p>","url":"https://gojek-ghost.zysk.in/tips-for-building-smooth-live-tracking/","canonical_url":null,"uuid":"90db33e9-3b67-4c66-a39f-7247172d3fa7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec94e8c7aa22c4066f83db2","reading_time":13}},{"node":{"id":"Ghost__Post__5eaf9f2234df85001e15f42d","title":"OK Google, Meet Gojek","slug":"ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process","featured":true,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_QaQg1VnVWuhAebytXO-gKg.jpg","excerpt":"We added Gojek‚Äôs ride-hailing and food ordering functions to Google Assistant. Here‚Äôs what we learned in the process.","custom_excerpt":"We added Gojek‚Äôs ride-hailing and food ordering functions to Google Assistant. Here‚Äôs what we learned in the process.","visibility":"public","created_at_pretty":"04 May, 2020","published_at_pretty":"04 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-04T10:20:42.000+05:30","published_at":"2020-05-04T10:33:07.000+05:30","updated_at":"2020-05-12T11:46:27.000+05:30","meta_title":"Ok Google, Meet Gojek","meta_description":"We added Gojek‚Äôs ride-hailing and food ordering functions to Google Assistant. Here‚Äôs what we learned in the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"We added Gojek‚Äôs ride-hailing and food ordering functions to Google Assistant.\nHere‚Äôs what we learned in the process.\nBy Vikas Bajpayee and Lokesh Kalal\n\nOur aim behind building a Super App was to help our users get rid of the daily\nfrictions in their lives. But the journey doesn‚Äôt stop there. Even after\nbuilding all these convenient products, we still try and reduce frictions that\nmay be encountered even within our app ‚Äî such as booking a ride or ordering\nfood.\n\nSo we thought, why don‚Äôt we integrate with Google Assistant, and let our users\ncommunicate with our products in a new way?\n\nIn this post, we explain how we integrated our food and transport products with\nthe Google Assistant.\n\nThe why\nWe‚Äôve already addressed one part of the why ‚Äî convenience. The other is user\nre-engagement. According to this survey\n[https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&utm_medium=twitter.com&utm_source=social&utm_campaign=buffer] \nconducted by Silicon Valley researcher Andrew Chen 77% of users stop using an\napp three days after they install it. Within a month, that number goes up to\n90%. ?\n\nThe how\nTo help integrate Android apps with the Google Assistant, Google launched App\nActions:\n\nWhat are app actions?\nApp Actions are a new way to make your android app content available in places\nlike Google Search, Google Assistant etc. From a user‚Äôs perspective, App Actions\nbehave like shortcuts to parts of your Android app. When users invoke an App\nAction, the Assistant either launches a screen in the Android app that the user\nhas already installed or shows an embedded visual card (Android Slice) that\nusers can interact with.\n\nApp actions provide a faster way for users to access Android apps. It can be\nachieved in two ways:- either user can be directed to a specific\nactivity(screen) using a deep link or user may see relevant content on the\nAssistant itself called Slices.\n\nMore info on this can be found here: \nhttps://developers.google.com/assistant/app/overview\n\nWhat are Slices?\nSlices are super-powered app actions. They provide a way to interact with apps\nwithout moving away from Assistant by showing a small piece of UI within\nAssistant. Slices are UI templates that can display rich, dynamic, and\ninteractive content from the app in Google Assistant.\n\nSlices can help users perform tasks faster by enabling engagement outside of the\nfullscreen app experience.\n\nYou can build Slices as enhancements to App Actions.\n\nHere‚Äôs an example:\n\nWe choose to use slices to show food order status, as the order status will have\nlimited information (eg. Driver is on the way to Restaurant, with his location\non Map ) which can be easily shown in a small piece of UI segment.\n\nIn fact, this functionality was recently demoed on stage at a Google event in\nIndonesia. You can check it out below:\n\nApp Actions Demo at #Google4ID 2019How does it work?\nWhenever a user says or types something in Assistant, assistant parses the\nquery. If the query matches the built-in intent\n[https://developers.google.com/assistant/app/reference/built-in-intents] grammar\nthen Google Assistant extracts the query parameter in schema.org\n[https://schema.org/] and generates a deep link URL using the mapping we provide\nin an actions.xml file.\n\nGoogle then attaches those extracted parameters to the deep link URL and creates\na final deep link which allows a user to launch specific content or screens in\nthe app.\n\nLet‚Äôs dig a little deeper:\n\nGoogle applies Machine Learning and Artificial Intelligence (Natural Language\nProcessing) to understand all the sentences we type in Assistant.\n\nWhile users can type anything they want in Assistant and the system gets better\nat interpreting them over time, but there are some sentences for specific intent\nthat are fixed by Google. More info here\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation]\n.\n\nHow did we integrate our services with Assistant?\nThe core of integrating Gojek with Assistant involved creating actions on Google\nAssistant with actions.xml file.\n\nLet‚Äôs explore how to do this:\n\n1. Create actions.xml file in your XML folder. This contains all the actions\nwith built-in intents which define what actions our app can support in the\nAssistant. Each action contains built-in intents\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation] \nsupported by Google as a <intent-name> tag.\n\n2. Define a fulfilment mode for each app action ‚Äî which can be deep links or\nslices. You have to pass a fulfilment mode in each action. This is compulsory.\n\n3. Pass the URL template which will allow a user to launch your app ‚Äî this can\nbe the deep link to your app or URL to Slice provider.\n\n4. Define entity-set ‚Äî the Gojek app is available in multiple locales, so to\nprovide locale for all the regions, we added the entity-set, which allows\nAssistant to understand more than one version of category. ex:- taxi can be\npronounced as taksi in Bahasa.\n\nSo, If you want locale for your specific parameter in deep-link URL, you can\nsimply attach an entity-set with that parameter, see how you can achieve this in\nbelow example\n\n<parameter name=‚ÄùtaxiReservation.category‚Äù><entity-set-reference\nentitySetId=‚ÄùTransportCategoryEntitySet‚Äù /></parameter>\n\n5. Add a reference to actions.xml file using the <meta> tag in your app‚Äôs\nmanifest.xml file inside the application tag.\n\nIn order to integrate Slices:\n\n 1. Implement an Android Slice by following the steps described in the Slices\n    Getting Started guide\n    [https://developer.android.com/guide/slices/getting-started].\n 2. In the actions.xml file, in the <fulfillment> element, specify \n    fulfillmentMode=‚Äúactions.fulfillment.SLICE‚Äù to indicate that a user intent\n    can be fulfilled using a Slice in your app.\n\nA few quick notes on what we learnt\n 1. Testing this feature is pretty hard and things become weird when you have\n    multiple build types of your app. For testing, you need a build type on the\n    Play Store, (which means the package name of the testing build should match\n    the package name of the published app). You can use a plugin (developed by\n    Google) called App Actions Test Tool\n    [https://developers.google.com/assistant/app/test-tool] for testing this\n    feature.\n\n> Please make sure you are following points while testing with App Actions Test\nTool:\na) Log in to Android Studio and Google Assistant with the account which has\naccess to your published app on Play console.\nb) ApplicationId of the app should be the same as your published app.\nc) Your Gradle should be built successfully.\nd) Use App Action Tool to create and update preview and test the app actions and\nslice.\n2. If your app is used in different locales, you can create locales using \nentity-set\n[https://developers.google.com/assistant/app/action-schema#entity-set-reference] \nin the actions.xml file.\n\n3. In order to give early builds to QA or other users (if you have multiple\nbuild types in your app), you can create an internal test track on Play console\nand add relevant people to it. This allows you to share the build to production\nfor only some listed users.\n\n(See this\n[https://support.google.com/googleplay/android-developer/answer/3131213?hl=en] \nfor how you can create an internal test track for your app.)\n\n4. Actions.xml shouldn‚Äôt be obfuscated in release apk ‚Äî it means if you are\nusing any obfuscated tools like proguard then actions.xml shouldn‚Äôt be\nobfuscated there.\n\n5. Slices can be requested before the onCreate of your application is completed.\nYou can run into issues if you are using something which is initialised in \nonCreate while creating slices.\n\n6. Don't refresh slices from onBindSlice() method, it will end up in an infinite\nloop where Google Assistant will call onBindSlice() infinitely.\n\nThat‚Äôs all from us folks. Hope this post gave you a better understanding of how\nApp Actions and Slices work with Google Assistant. Working on this feature was\nan amazing experience for us. If you use the Gojek app, make sure to give them a\ntry and let us know what you think. ?\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we‚Äôll send you updates\nfrom the blog straight to your inbox! ?","html":"<h3 id=\"we-added-gojek-s-ride-hailing-and-food-ordering-functions-to-google-assistant-here-s-what-we-learned-in-the-process-\">We added Gojek‚Äôs ride-hailing and food ordering functions to Google Assistant. Here‚Äôs what we learned in the process.</h3><p><strong><strong><em>By Vikas Bajpayee and Lokesh Kalal</em></strong></strong></p><p>Our aim behind building a Super App was to help our users get rid of the daily frictions in their lives. But the journey doesn‚Äôt stop there. Even after building all these convenient products, we still try and reduce frictions that may be encountered even within our app ‚Äî such as booking a ride or ordering food.</p><p>So we thought, why don‚Äôt we integrate with Google Assistant, and let our users communicate with our products in a new way?</p><p>In this post, we explain how we integrated our food and transport products with the Google Assistant.</p><h1 id=\"the-why\">The why</h1><p>We‚Äôve already addressed one part of the <em><em>why ‚Äî </em></em>convenience. The other is user re-engagement. According to <a href=\"https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&amp;utm_medium=twitter.com&amp;utm_source=social&amp;utm_campaign=buffer\" rel=\"noopener\">this survey</a> conducted by Silicon Valley researcher Andrew Chen 77% of users stop using an app three days after they install it. Within a month, that number goes up to 90%. ?</p><h1 id=\"the-how\">The how</h1><p>To help integrate Android apps with the Google Assistant, Google launched App Actions:</p><h2 id=\"what-are-app-actions\">What are app actions?</h2><p>App Actions are a new way to make your android app content available in places like Google Search, Google Assistant etc. From a user‚Äôs perspective, App Actions behave like shortcuts to parts of your Android app. When users invoke an App Action, the Assistant either launches a screen in the Android app that the user has already installed or shows an embedded visual card (Android Slice) that users can interact with.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*w4jk-CTME9amkb5dsIQDzw.gif\" class=\"kg-image\"></figure><p>App actions provide a faster way for users to access Android apps. It can be achieved in two ways:- either user can be directed to a specific activity(screen) using a deep link or user may see relevant content on the Assistant itself called Slices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*KPBLtVMjiHBOPEJ53E9F8A.gif\" class=\"kg-image\"></figure><p>More info on this can be found here: <a href=\"https://developers.google.com/assistant/app/overview\" rel=\"noopener\">https://developers.google.com/assistant/app/overview</a></p><h2 id=\"what-are-slices\"><strong>What are Slices?</strong></h2><p>Slices are super-powered app actions. They provide a way to interact with apps without moving away from Assistant by showing a small piece of UI within Assistant. Slices are UI templates that can display rich, dynamic, and interactive content from the app in Google Assistant.</p><p><em><em>Slices can help users perform tasks faster by enabling engagement outside of the fullscreen app experience.</em></em></p><p>You can build Slices as enhancements to App Actions.</p><p>Here‚Äôs an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1080/1*EFF30b3185UtwKYjx0VP1A.jpeg\" class=\"kg-image\"></figure><p>We choose to use slices to show food order status, as the order status will have limited information (eg. Driver is on the way to Restaurant, with his location on Map ) which can be easily shown in a small piece of UI segment.</p><p>In fact, this functionality was recently demoed on stage at a Google event in Indonesia. You can check it out below:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0u20Iu4m2Co%3Fstart%3D5805%26feature%3Doembed%26start%3D5805&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0u20Iu4m2Co&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0u20Iu4m2Co%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" allowfullscreen=\"\" frameborder=\"0\" height=\"480\" width=\"854\" title=\"#Google4ID 2019\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 382.188px;\"></iframe><figcaption>App Actions Demo at #Google4ID 2019</figcaption></figure><h1 id=\"how-does-it-work\"><strong>How does it work?</strong></h1><p>Whenever a user says or types something in Assistant, assistant parses the query. If the query matches the<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents\" rel=\"noopener\"> built-in intent</a> grammar then Google Assistant extracts the query parameter in<a href=\"https://schema.org/\" rel=\"noopener\"> schema.org</a> and generates a deep link URL using the mapping we provide in an actions.xml file.</p><p>Google then attaches those extracted parameters to the deep link URL and creates a final deep link which allows a user to launch specific content or screens in the app.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1490/0*jUlpzwbXbFIgGy7s\" class=\"kg-image\"></figure><p>Let‚Äôs dig a little deeper:</p><p>Google applies Machine Learning and Artificial Intelligence (Natural Language Processing) to understand all the sentences we type in Assistant.</p><p>While users can type anything they want in Assistant and the system gets better at interpreting them over time, but there are some sentences for specific intent that are fixed by Google. More info <a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\">here</a>.</p><h1 id=\"how-did-we-integrate-our-services-with-assistant\"><strong>How did we integrate our services with Assistant?</strong></h1><p>The core of integrating Gojek with Assistant involved creating actions on Google Assistant with actions.xml file.</p><p>Let‚Äôs explore how to do this:</p><p>1. Create <strong><strong>actions.xml</strong></strong> file in your XML folder. This contains all the actions with built-in intents which define what actions our app can support in the Assistant. Each action contains<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\"> built-in intents</a> supported by Google as a &lt;intent-name&gt; tag.</p><p>2. Define a fulfilment mode for each app action ‚Äî which can be deep links or slices. You have to pass a fulfilment mode in each action. This is compulsory.</p><p>3. Pass the URL template which will allow a user to launch your app ‚Äî this can be the deep link to your app or URL to Slice provider.</p><p>4. Define entity-set ‚Äî the Gojek app is available in multiple locales, so to provide locale for all the regions, we added the entity-set, which allows Assistant to understand more than one version of category. ex:- taxi can be pronounced as taksi in Bahasa.</p><p>So, If you want locale for your specific parameter in deep-link URL, you can simply attach an entity-set with that parameter, see how you can achieve this in below example</p><p><em>&lt;parameter name=‚ÄùtaxiReservation.category‚Äù&gt;&lt;entity-set-reference entitySetId=‚ÄùTransportCategoryEntitySet‚Äù /&gt;&lt;/parameter&gt;</em></p><p>5. Add a reference to <strong><strong>actions.xml</strong></strong> file using the &lt;meta&gt; tag in your app‚Äôs manifest.xml file inside the application tag.</p><p><strong><strong>In order to integrate Slices:</strong></strong></p><ol><li>Implement an Android Slice by following the steps described in the <a href=\"https://developer.android.com/guide/slices/getting-started\" rel=\"noopener\">Slices Getting Started guide</a>.</li><li>In the actions.xml file, in the <code>&lt;fulfillment&gt;</code> element, specify <code>fulfillmentMode=‚Äúactions.fulfillment.SLICE‚Äù</code> to indicate that a user intent can be fulfilled using a Slice in your app.</li></ol><h1 id=\"a-few-quick-notes-on-what-we-learnt\"><strong>A few quick notes on what we learnt</strong></h1><ol><li>Testing this feature is pretty hard and things become weird when you have multiple build types of your app. For testing, you need a build type on the Play Store, (which means the package name of the testing build should match the package name of the published app). You can use a plugin (developed by Google) called<a href=\"https://developers.google.com/assistant/app/test-tool\" rel=\"noopener\"> <strong><strong>App Actions Test Tool</strong></strong></a> for testing this feature.</li></ol><blockquote><em><em>Please make sure you are following points while testing with App Actions Test Tool:</em></em><br><em><em>a) Log in to Android Studio and Google Assistant with the account which has access to your published app on Play console.</em></em><br><em><em>b) <code>ApplicationId</code> of the app should be the same as your published app.</em></em><br><em><em>c) Your Gradle should be built successfully.</em></em><br><em><em>d) Use App Action Tool to create and update preview and test the app actions and slice.</em></em></blockquote><p>2. If your app is used in different locales, you can create locales using <a href=\"https://developers.google.com/assistant/app/action-schema#entity-set-reference\" rel=\"noopener\">entity-set</a> in the actions.xml file.</p><p>3. In order to give early builds to QA or other users (if you have multiple build types in your app), you can create an internal test track on Play console and add relevant people to it. This allows you to share the build to production for only some listed users.</p><p>(See <a href=\"https://support.google.com/googleplay/android-developer/answer/3131213?hl=en\" rel=\"noopener\">this</a> for how you can create an internal test track for your app.)</p><p>4. Actions.xml shouldn‚Äôt be <strong><strong>obfuscated</strong></strong> in release apk ‚Äî it means if you are using any obfuscated tools like proguard then actions.xml shouldn‚Äôt be obfuscated there.</p><p>5. Slices can be requested before the <code>onCreate</code> of your application is completed. You can run into issues if you are using something which is initialised in <code>onCreate</code> while creating slices.</p><p>6. Don't refresh slices from <code>onBindSlice()</code> method, it will end up in an infinite loop where Google Assistant will call <code>onBindSlice()</code> infinitely.</p><p>That‚Äôs all from us folks. Hope this post gave you a better understanding of how App Actions and Slices work with Google Assistant. Working on this feature was an amazing experience for us. If you use the Gojek app, make sure to give them a try and let us know what you think. ?</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we‚Äôll send you updates from the blog straight to your inbox! ?</p>","url":"https://gojek-ghost.zysk.in/ok-google-meet-gojekwe-added-gojeks-ride-hailing-and-food-ordering-functions-to-google-assistant-heres-what-we-learned-in-the-process/","canonical_url":null,"uuid":"a980d332-756f-4f47-a97f-921a11196ed7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eaf9f2234df85001e15f42d","reading_time":6}},{"node":{"id":"Ghost__Post__5ecb65447aa22c4066f83f64","title":"Speed Up Your Workflow With IntelliJ","slug":"speed-up-your-workflow-with-intellij","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ygP4I6VnLARQODtQvTzheQ.jpeg","excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","custom_excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"27 January, 2020","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:57:16.000+05:30","published_at":"2020-01-27T09:30:00.000+05:30","updated_at":"2020-05-25T12:07:15.000+05:30","meta_title":"Speed Up Your Workflow With IntelliJ","meta_description":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"I do the bulk of my test automation development in Kotlin/Java or Python\nlanguages. After the programming language, a very important component for the\ndev workflow is a good IDE.\n\nPurists generally rave about the use of Editors like Sublime, VSCode or even use\nof Vim/Emacs over full-fledged IDE‚Äôs like Jetbrains IntelliJ, Pycharm or\nEclipse. However, the truth is most modern devs in this day and age use/prefer\nIDE‚Äôs for the host of convenience features, speed, and flexibility they provide.\n\nPersonally, I am a big fan of IDE‚Äôs provided by Jetbrains\n[https://www.jetbrains.com/], and they are generally my tools of choice‚Äîsaving\nme a ton of time while performing refactoring and greatly decreasing development\ntime.\n\n> Not convinced yet?\nIf you‚Äôve used IntelliJ, then ppen up IntelliJ > Help > Productivity Guide and\nsee how much time it has saved you.\n\nThis is my breakdown in the past two years:\n\nHowever,\n\n * Do we really extract the maximum juice out of these tools?\n * How many of the IDE‚Äôs features do we really use on a day-to-day basis?\n\nWell, fret not. This post will share some awesome tips that you can also follow\nto become more productive with your editors. I got to know some of these\nfeatures when the prolific Dev evangelist Hadi Hariri [https://hadihariri.com/] \nfrom Jetbrains visited Gojek [https://www.gojek.io/] Bengaluru and shared these\nduring a meetup.\n\nTo demonstrate these features, I would be using appium Java client\n[https://github.com/appium/java-client] project but the same features can be\napplied in any Java/Kotlin (IntelliJ IDEA) project of your choice or Python\nproject (In Pycharm).\n\nIdeavim\nTo start with, did you know all Jetbrains editors come with a very good VIM\nsupport via IdeaVim plugin? Vim commands are amazing.\n\nOnce you get used to them, your editing and code navigation speed is easily\nmultiplied 2X and it‚Äôs so easy to use it within IntelliJ. If you want to know\nVIM basics, I wrote a post\n[https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/] \non it some time back.\n\nTo install this plugin, either opt for it when freshly installing IntelliJ or Go\nto preferences > Plugins and search for IdeaVim in marketplace, don't worry, you\ncan always temporarily disable it and practice first before starting to use it\nin your day to day workflow.\n\nThe most common commands that you should be aware of are mentioned right when\nyou open it.\n\nI use the IntelliJ IDEA classic keybindings, however, you should be able to\nquickly find the short cuts for these operations in the binding of your choice ( \nLook into Preferences > Keymap)\n\nSearch Shortcuts\nDouble Shift brings up the search console and this is the single place to either\n\n * Search Classes or Files (Shift + Cmd + N): with certain names in your project\n   or\n * Perform any action (Shift + Cmd + A): for example, refactoring certain\n   components inside a class\n\nYou can also easily learn the keyboard shortcuts for the common operations\nwithin the editor by seeing the shortcut right beside the command on this\nscreen. Trust me, the investment in learning these has huge payoffs.\n\n> The number of times that you avoid using the trackpad or mouse is one time less \nthat you have to context switch while coding. Believe me, that makes a\ndifference.\nSearch by file initials\nWhile trying to find a file, often we just know the name vaguely by memory. In\nSearch, it is sufficient to just mention the initials of the file and IntelliJ\nwill list out all the files which match that criteria\n\nLet‚Äôs say, for example, I want to search for all test files which start with A \nand have Test suffix, I can just enter ATes and see all the file names which\nmatch this.\n\nSearch method inside a file matching a pattern\nWhat if I want to search for all methods having find keyword inside test files\nnamed AndTes?\n\nWell you just use a dot . in these search queries and you can easily search for\neven methods inside classes based on partial pattern search.\n\nIn this case, AndTest.find would show all the methods with find keyword in them.\nNeat huh?\n\nSearch for file names inside a particular folder\nIn the example below, I am searching for file names starting with KeyE under \nnativekey folder by separating them with a forward slash /\n\nnativekey/KeyE\n\nNavigating options all within the search\nIf you type a forward slash / in the search bar, you can see different IDE\nactions that you can take right there.\n\nFind usages\nYou can quickly find out usages of a given function, class, interface, etc by\nhitting Cmd + B, This saves a ton of time over manually searching for code. You\ncan either navigate right inside the result pop up or open it in dedicated\nwindow by selecting Open in find window.\n\nWhat if I want to see all the classes and methods that are present in \nAndroidTest.java class?\n\nWe can open the Structure tab (Cmd + 7) and glance at all the available methods\nwith options to even show anonymous classes/lambdas inside the class.\n\nNow, this could be very useful when you have a long class and want to see all\nthe methods and then quickly navigate to them. Too many methods might hint at a\npotential refactoring candidate.\n\nSwitcher\nTo switch between open files and open tabs\n\nUse Ctrl + Tab and then to move down continue pressing Ctrl + Tab and to move up\nin switcher use Ctrl + Shift + Tab\n\nThis is a useful way to quickly navigate among files and menu options again\nwithout using mouse or trackpad\n\nRecent files\nYou do not need to remember what files were recently opened. To view recent\nfiles accessed, execute Cmd + E\n\nNavigation bar\nHow many times have you switched the project tree using Cmd + 1 and gone one\nlevel up to open a file? Before observing this, I know I kept on doing this\nagain and again.\n\nHowever, IntelliJ has a navigation bar on top of the editor which can be used to\nvery quickly navigate up the project tree.\n\nLive templates\nIntelliJ has a bunch of templates already created which can be quickly used to\ncreate a base skeleton code for many common constructs.\n\nIt is also aware of what type of file is currently opened and can show available\noptions by opening Cmd + J, once you select the one that you are looking for,\nexpand this code using Tab key\n\nTo open these templates and maybe even add your own, open Preferences > Editor >\nLive Templates\n\nInject language reference\nIntelliJ allows us to insert the context of a particular language and allows to\nwork with it within another file. Seems confusing? Let me explain why this is a\nsuper neat feature.\n\nLet‚Äôs assume you want to store JSON string inside a Java file. Typically Java 8\ndoes not have support for multi-line string (Added in Java 12 though\n[https://dzone.com/articles/jdk-12-raw-string-literals])\n\nYou can start with a simple string variable. Press Option + Enter and select \nInject language or reference\n\nAnd then select the file type. Let‚Äôs say JSON\n\nNow that we have provided the context, You can again press Option + Enter and\nthen select Edit JSON fragment . This opens up a new window where you can create\nand edit JSON freely and the corresponding concatenated string is automagically\ninserted.\n\nValidate regex inside the editor\nRegexes are a very powerful concept to learn and use. How many times have you\nhad to write small scratch files (or use regex sites [https://regexr.com/]) with\nbelow snippet to test whether a given string matches a regex?\n\nI have personally done this many times.\n\nclass Scratch {\npublic static void main(String[] args) {\nString regex = \"\\w+ world!\";\nString testString = \"Hello world!\";\nSystem.out.println(testString.matches(regex));\n}\n}\n\nIntelliJ makes this even easier. Given a regex, enter Option + Enter and select \nCheck RegExp\n\nEnter test strings and IntelliJ would automatically test whether the sample\nstring is a match or not. Neat right?\n\nDrop frames while debugging\nWhile developing it‚Äôs very important to be good at debugging. IntelliJ allows a\nvery rich set of inspection features to know the state of variables/classes at a\ngiven point in the code.\n\nIn this below example, we have a simple fooBar() method which is a wrapper over \nfoo and bar methods where foo has a debug point.\n\nWhat if we want to move a step back from the current frame? It turns out we can\nselect the current frame and select Drop frame and that would move the debug\nflow back to foo method.\n\nIt‚Äôs amazing how much time this saves since we do not need to rewire the\ndebugging session from scratch.\n\nHopefully, this post encouraged you to also explore the feature-rich IDEs that\nJetbrains provides, and give your automation development a literal nitro boost.\n(NFS reference anyone? üòã)\n\nWhat other IDE tricks have been lifesavers for you? Let me know in the comments.\nIf you found this useful, do share it with a friend or colleague.\n\nFor more such stories sent to your inbox once a week, sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2UcJEI0]","html":"<p>I do the bulk of my test automation development in Kotlin/Java or Python languages. After the programming language, a very important component for the dev workflow is a good IDE.</p><p>Purists generally rave about the use of Editors like Sublime, VSCode or even use of Vim/Emacs over full-fledged IDE‚Äôs like Jetbrains IntelliJ, Pycharm or Eclipse. However, the truth is most modern devs in this day and age use/prefer IDE‚Äôs for the host of convenience features, speed, and flexibility they provide.</p><p>Personally, I am a big fan of IDE‚Äôs provided by <a href=\"https://www.jetbrains.com/\" rel=\"noopener\">Jetbrains</a>, and they are generally my tools of choice‚Äîsaving me a ton of time while performing refactoring and greatly decreasing development time.</p><blockquote><em><em>Not convinced yet?</em></em></blockquote><p>If you‚Äôve used IntelliJ, then ppen up <code>IntelliJ &gt; Help &gt; Productivity Guide</code> and see how much time it has saved you.</p><p>This is my breakdown in the past two years:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mRHQ5HihrnXqU7bh.png\" class=\"kg-image\"></figure><p>However,</p><ul><li>Do we really extract the maximum juice out of these tools?</li><li>How many of the IDE‚Äôs features do we really use on a day-to-day basis?</li></ul><p>Well, fret not. This post will share some awesome tips that you can also follow to become more productive with your editors. I got to know some of these features when the prolific Dev evangelist <a href=\"https://hadihariri.com/\" rel=\"noopener\">Hadi Hariri</a> from Jetbrains visited <a href=\"https://www.gojek.io/\" rel=\"noopener\">Gojek</a> Bengaluru and shared these during a meetup.</p><p>To demonstrate these features, I would be using appium <a href=\"https://github.com/appium/java-client\" rel=\"noopener\">Java client</a> project but the same features can be applied in any <strong><strong>Java/Kotlin (IntelliJ IDEA)</strong></strong> project of your choice or <strong><strong>Python project (In Pycharm).</strong></strong></p><h3 id=\"ideavim\">Ideavim</h3><p>To start with, did you know all Jetbrains editors come with a very good VIM support via IdeaVim plugin? Vim commands are amazing.</p><p>Once you get used to them, your editing and code navigation speed is easily multiplied 2X and it‚Äôs so easy to use it within IntelliJ. If you want to know VIM basics, I wrote a <a href=\"https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/\" rel=\"noopener\">post</a> on it some time back.</p><p>To install this plugin, either opt for it when freshly installing IntelliJ or <code>Go to preferences &gt; Plugins and search for IdeaVim in marketplace</code>, don't worry, you can always temporarily disable it and practice first before starting to use it in your day to day workflow.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mMdadKP3FjJ2Jj9c.png\" class=\"kg-image\"></figure><p>The most common commands that you should be aware of are mentioned right when you open it.</p><p>I use the IntelliJ IDEA classic keybindings, however, you should be able to quickly find the short cuts for these operations in the binding of your choice ( <code>Look into Preferences &gt; Keymap</code>)</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_2xCQI_tMRl7RQpAv.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_dndhilLo2bXVYO_D.png\" class=\"kg-image\"></figure><h3 id=\"search-shortcuts\">Search Shortcuts</h3><p>Double Shift brings up the search console and this is the single place to either</p><ul><li>Search Classes or Files <strong><strong>(Shift + Cmd + N):</strong></strong> with certain names in your project or</li><li>Perform any action <strong><strong>(Shift + Cmd + A):</strong></strong> for example, refactoring certain components inside a class</li></ul><p>You can also easily learn the keyboard shortcuts for the common operations within the editor by seeing the shortcut right beside the command on this screen. Trust me, the investment in learning these has huge payoffs.</p><blockquote><em><em><em>The number of times that you avoid using the trackpad or mouse is </em><strong><strong><em>one time less</em></strong></strong><em> that you have to context switch while coding. Believe me, that makes a difference.</em></em></em></blockquote><h3 id=\"search-by-file-initials\">Search by file initials</h3><p>While trying to find a file, often we just know the name vaguely by memory. In Search, it is sufficient to just mention the initials of the file and IntelliJ will list out all the files which match that criteria</p><p>Let‚Äôs say, for example, I want to search for all test files which start with <code>A</code> and have Test suffix, I can just enter <code>ATes</code> and see all the file names which match this.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0__Q-aR5Yl8g_PYSvr.png\" class=\"kg-image\"></figure><h3 id=\"search-method-inside-a-file-matching-a-pattern\">Search method inside a file matching a pattern</h3><p>What if I want to search for all methods having <code>find</code> keyword inside test files named <code>AndTes</code>?</p><p>Well you just use a <code>dot .</code> in these search queries and you can easily search for even methods inside classes based on partial pattern search.</p><p>In this case, <code>AndTest.find</code> would show all the methods with <code>find</code> keyword in them. Neat huh?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-tEBZAYAl_oD6DHS.png\" class=\"kg-image\"></figure><h3 id=\"search-for-file-names-inside-a-particular-folder\">Search for file names inside a particular folder</h3><p>In the example below, I am searching for file names starting with <code>KeyE</code> under <code>nativekey</code> folder by separating them with a forward slash <code>/</code></p><p><code>nativekey/KeyE</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_IW8jxxtq6cyfMpSC.png\" class=\"kg-image\"></figure><h3 id=\"navigating-options-all-within-the-search\">Navigating options all within the search</h3><p>If you type a forward slash <code>/</code> in the search bar, you can see different IDE actions that you can take right there.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_9tsFLNRrv1Y3lTjt.png\" class=\"kg-image\"></figure><h3 id=\"find-usages\">Find usages</h3><p>You can quickly find out usages of a given function, class, interface, etc by hitting <code>Cmd + B</code>, This saves a ton of time over manually searching for code. You can either navigate right inside the result pop up or open it in dedicated window by selecting <code>Open in find window</code>.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_CJOyIsf7nGojY9Lg.png\" class=\"kg-image\"></figure><p>What if I want to see all the classes and methods that are present in <code>AndroidTest.java</code> class?</p><p>We can open the <strong><strong>Structure</strong></strong> tab <strong><strong>(Cmd + 7)</strong></strong> and glance at all the available methods with options to even show <strong><strong>anonymous classes/lambdas</strong></strong> inside the class.</p><p>Now, this could be very useful when you have a long class and want to see all the methods and then quickly navigate to them. Too many methods might hint at a potential refactoring candidate.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_RH_TICWZf2VTasMN.png\" class=\"kg-image\"></figure><h3 id=\"switcher\">Switcher</h3><p>To switch between open files and open tabs</p><p>Use <code>Ctrl + Tab</code> and then to move down continue pressing <code>Ctrl + Tab</code> and to move up in switcher use <code>Ctrl + Shift + Tab</code></p><p>This is a useful way to quickly navigate among files and menu options again without using mouse or trackpad</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_u1OO-wpwoKH39BQs.png\" class=\"kg-image\"></figure><h3 id=\"recent-files\">Recent files</h3><p>You do not need to remember what files were recently opened. To view recent files accessed, execute <code>Cmd + E</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZaMfMJ8LsxnnQk7F.png\" class=\"kg-image\"></figure><h3 id=\"navigation-bar\">Navigation bar</h3><p>How many times have you switched the project tree using <code>Cmd + 1</code> and gone one level up to open a file? Before observing this, I know I kept on doing this again and again.</p><p>However, IntelliJ has a navigation bar on top of the editor which can be used to very quickly navigate up the project tree.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZCHnmBhFtgljalI2.png\" class=\"kg-image\"></figure><h3 id=\"live-templates\">Live templates</h3><p>IntelliJ has a bunch of templates already created which can be quickly used to create a base skeleton code for many common constructs.</p><p>It is also aware of what type of file is currently opened and can show available options by opening <code>Cmd + J</code>, once you select the one that you are looking for, expand this code using <code>Tab</code> key</p><p>To open these templates and maybe even add your own, open <code>Preferences &gt; Editor &gt; Live Templates</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_lgWhZ-WL3zco-U5W.png\" class=\"kg-image\"></figure><h3 id=\"inject-language-reference\">Inject language reference</h3><p>IntelliJ allows us to insert the context of a particular language and allows to work with it within another file. Seems confusing? Let me explain why this is a super neat feature.</p><p>Let‚Äôs assume you want to store JSON string inside a Java file. Typically Java 8 does not have support for multi-line string (Added in <a href=\"https://dzone.com/articles/jdk-12-raw-string-literals\" rel=\"noopener\">Java 12 though</a>)</p><p>You can start with a simple string variable. Press <code>Option + Enter</code> and select <code>Inject language or reference</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-aSyY4KPrz8ZJ0rS.png\" class=\"kg-image\"></figure><p>And then select the file type. Let‚Äôs say JSON</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_jHjlLhAkzjtluqcG.png\" class=\"kg-image\"></figure><p>Now that we have provided the context, You can again press <code>Option + Enter</code> and then select <code>Edit JSON fragment</code> . This opens up a new window where you can create and edit JSON freely and the corresponding concatenated string is automagically inserted.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_beIcluwz5QOnPmVu.png\" class=\"kg-image\"></figure><h3 id=\"validate-regex-inside-the-editor\">Validate regex inside the editor</h3><p>Regexes are a very powerful concept to learn and use. How many times have you had to write small scratch files (or use <a href=\"https://regexr.com/\" rel=\"noopener\">regex sites</a>) with below snippet to test whether a given string matches a regex?</p><p>I have personally done this many times.</p><!--kg-card-begin: markdown--><p>class Scratch {<br>\npublic static void main(String[] args) {<br>\nString regex = &quot;\\w+ world!&quot;;<br>\nString testString = &quot;Hello world!&quot;;<br>\nSystem.out.println(testString.matches(regex));<br>\n}<br>\n}</p>\n<!--kg-card-end: markdown--><p>IntelliJ makes this even easier. Given a regex, enter <code>Option + Enter</code> and select <strong><strong>Check RegExp</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_0NBq6qgPT14_zYIn.png\" class=\"kg-image\"></figure><p>Enter test strings and IntelliJ would automatically test whether the sample string is a match or not. Neat right?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_PPZYME7bt4PGZtrR.png\" class=\"kg-image\"></figure><h3 id=\"drop-frames-while-debugging\">Drop frames while debugging</h3><p>While developing it‚Äôs very important to be good at debugging. IntelliJ allows a very rich set of inspection features to know the state of variables/classes at a given point in the code.</p><p>In this below example, we have a simple <code>fooBar()</code> method which is a wrapper over <code>foo</code> and <code>bar</code> methods where <code>foo</code> has a debug point.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_P7eZVtk2sSDPiUFD.png\" class=\"kg-image\"></figure><p>What if we want to move a step back from the current frame? It turns out we can select the current frame and select <code>Drop frame</code> and that would move the debug flow back to <code>foo</code> method.</p><p>It‚Äôs amazing how much time this saves since we do not need to rewire the debugging session from scratch.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_DdZ775opHOP0z_uL.png\" class=\"kg-image\"></figure><p>Hopefully, this post encouraged you to also explore the feature-rich IDEs that Jetbrains provides, and give your automation development a literal nitro boost. (NFS reference anyone? üòã)</p><p>What other IDE tricks have been lifesavers for you? Let me know in the comments. If you found this useful, do share it with a friend or colleague.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-3.png\" class=\"kg-image\"></figure><p>For more such stories sent to your inbox once a week, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-2.jpeg\" class=\"kg-image\" alt=\"gojek.jobs\"><figcaption><a href=\"http://bit.ly/2UcJEI0\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/speed-up-your-workflow-with-intellij/","canonical_url":null,"uuid":"c97cb86d-8608-410e-9740-e4e613b1c3bf","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb65447aa22c4066f83f64","reading_time":7}},{"node":{"id":"Ghost__Post__5eb12eb3f7c7da001effce0b","title":"How We Supercharged Chat","slug":"how-we-supercharged-chat","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_tuDgHHPUouXxzsK4OEzPaw.jpg","excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","custom_excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"10 January, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-05T14:45:31.000+05:30","published_at":"2020-01-10T09:30:00.000+05:30","updated_at":"2020-05-18T20:45:50.000+05:30","meta_title":null,"meta_description":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Benzi Ahamed\n\nThe Gojek consumer app comes with a chat feature. This allows users to have\nconversations with:\n\n * The currently assigned driver partner in relation to a booking.\n * Other Gojek users, provided they are known contacts in your address book.\n   These can be either personal or group chats.\n\nIn order to use the chat platform as springboard to other services within\nGojek‚Äôs vast ecosystem, we wanted to expose some features that integrate with\nour other offerings ‚Äî within the convenience of a chat window.\n\nOne of the first service options we wanted to focus on was payments ‚Äî paying and\nrequesting for money between individuals and groups. Chat had the platform to\ncreate connections between people, GoPay had payments ‚Äî it was time to marry the\ntwo.\n\nArchitecture\nTo start with, as a chat platform team, we did not really know anything about\nthe payments domain. In fact, most of the integrations we planned for required\ncollaborating with other product teams within Gojek.\n\nWe decided early on that we needed a plugin-based framework that other product\nteams (and even chat team‚Äôs core services) could use. We also decided that the\nAPI surface area for this new framework should have as much as possible in\ncommon between the Android and iOS implementations.\n\nThe first use case we focused on was integrating payment options within chat ‚Äî\nwhich would help us kickstart our design and feature rollout.\n\nApproach\nIn the vein of keeping things as simple as possible, we came up with the\nfollowing set of guidelines:\n\n * The chat subsystem can expose add-on features to the user\n * These features will not be part of the core chat offering, but can be\n   plugged-in externally\n * These plugin-based entities ‚Äî chat extensions ‚Äî can have mainly two\n   capabilities\n * Display a button (widget) in a chat window to trigger the chat extension‚Äôs\n   functionality\n * Display chat extension messages that can support rich text, images,\n   call-to-actions\n\nChat extension messages are merely text messages with additional metadata. While\nplain text-based messages are rendered by the core chat rendering system, chat\nextension messages need to be rendered by the chat extension that created the\nmessage.\n\nChat Extension Framework ‚Äî Key ActorsThe illustration above depicts the final\nframework components we came up with.\n\n * Chat Extension Providers are responsible for vending Chat Extensions based on\n   the active Chat Session (there might be cases where we want to enable a\n   certain feature only for certain types of chats e.g. those between our\n   drivers and customers).\n * Chat Extensions are the components responsible for vending trigger points (\n   Widget Views) and custom message views (Extension Message Views).\n\nWhile the core subsystem takes care of managing life cycles of the chat\nextensions, widgets, and message views, it is the responsibility of extension\nauthors to purely focus on the implementation details of their feature.\n\nWith the above design in place, we were ready to start collaborating and start\nimplementing features.\n\nLet‚Äôs take a look at some integrations we were able to build collaboratively.\n\nSample Integrations\nPayments\nThe first integration we did was Request and Pay flows. Utilising GoPay,\ncustomers can make payments and request for money from friends.\n\nHere‚Äôs the Request Flow in action, within a personal chat:\n\nRequest Money from an IndividualIn a group chat, Request Flow translates to a\nSplit Bill flow:\n\nRequest Money in a GroupHere‚Äôs the Pay flow in action:\n\nPay via GoPay, continue conversation in ChatIn the Pay Flow, we start with\nmaking a payment from the home-screen of the Gojek App. Once a payment is done,\nyou have an option to continue to chat with the person you made the payment to.\nThis flow is of course in addition to similar flows for Request where you can\ntrigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\nIn the Pay Flow, we start with making a payment from the home-screen of the\nGojek App. Once a payment is done, you have an option to continue to chat with\nthe person you made the payment to. This flow is of course in addition to\nsimilar flows for Request where you can trigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\n\nShare Restaurant Details via ChatWhat‚Äôs interesting is that once a Restaurant\nCard has been shared via chat, a recipient clicking on that card can proceed to\nmake a food order, directly from the chat window itself. This is made possible\nby the fact that Extension Message Views can be fully interactive (e.g. detect\nuser taps), and the chat window provides contextual navigation controls to them.\n\nImage Sharing\nLastly, let us take a look at the most recent feature we rolled out to\nproduction ‚Äî image sharing in our customer-driver chats.\n\nImage Sharing via ChatDuring the implementation of this feature, we recognised\nthat image sharing would be better triggered from the chat window if there was a\ndirect shortcut button (e.g. a camera icon) within the bottom text input area of\nthe chat window.\n\nThis leads us to enhance our extension framework to allow Chat Extensions to\nprovide Chat Extension Shortcuts as well. Our updated framework looks like\nbelow:\n\nLessons Learned\nIt has been a great journey so far exploring various kinds of integrations in a\nsimple chat window. We have a lot more planned, but in the meanwhile, here are a\nfew key things we learned along the way\n\n * When you are developing a platform, evangelising what your platform provides\n   is key. This is equally relevant if you are a platform-product company, or a\n   platform team within a company. We conducted an internal chat extension\n   hackathon which helped broaden our outreach, and saw some pretty cool ideas\n   implemented including Live Location Sharing, Booking Sharing, Games, Sticker\n   Packs etc.\n * Document your public API! Teams are more willing to collaborate if you have\n   proper, up-to-date documentation in place. We created detailed technical\n   documents, integration guides, and even provided a sample chat extension (a\n   starter-pack, if you will) ‚Äî these greatly helped teams adopting these new\n   features. Also, the feedback we got during the internal hackathon fed\n   directly back into improving our documentation.\n * Having a common design language helped our Android and iOS engineers to\n   collaborate more closely. It was easier for the team to work on implementing\n   the feature by focussing on the common characteristics during tech\n   discussion, design ratification sessions etc. and leaving the nuances of each\n   platform to respective teams during development. Having a common language\n   that engineers can speak (irrespective of their specialisations) improves\n   cross-communications and collaboration.\n * It is important to design solutions exercising self-imposed constraints.\n   These constraints should directly limit the engineering scope of the\n   solution. As engineers, we are all too comfortable going down the technical\n   analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit\n   (possibly) over-engineered solution. This usually ends up in complicated\n   designs, which translate into complicated code. It is better to design\n   simpler systems and iteratively add smaller features, where each iteration\n   cycle should also incorporate refactoring every step of the way. Even though\n   we knew having something like Extension Shortcuts was nice to have from the\n   get go, we had to exercise restraint and only implemented the feature when it\n   was actually required.\n * We cannot stress this enough, but continuous refactoring (whenever required)\n   is one surefire way to reduce the build-up of tech debt in any codebase.\n   Improve a function here, rename a variable there, refactor a class into two ‚Äî\n   every little bit helps. It is the responsibility of the entire team to be\n   engaged in this exercise.\n\nSo there you have it, a quick look at the way the core chat team developed a\nbase extension framework that is currently being used to build richer\nintegrations into chat.\n\n\n--------------------------------------------------------------------------------\n\nWant more where that come from? Have our updates delivered straight to your\ninbox by signing up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Benzi Ahamed</p><p>The Gojek consumer app comes with a chat feature. This allows users to have conversations with:</p><ul><li>The currently assigned driver partner in relation to a booking.</li><li>Other Gojek users, provided they are known contacts in your address book. These can be either personal or group chats.</li></ul><p>In order to use the chat platform as springboard to other services within Gojek‚Äôs vast ecosystem, we wanted to expose some features that integrate with our other offerings ‚Äî within the convenience of a chat window.</p><p>One of the first service options we wanted to focus on was payments ‚Äî paying and requesting for money between individuals and groups. Chat had the platform to create connections between people, GoPay had payments ‚Äî it was time to marry the two.</p><h1 id=\"architecture\">Architecture</h1><p>To start with, as a chat platform team, we did not really know anything about the payments domain. In fact, most of the integrations we planned for required collaborating with other product teams within Gojek.</p><p>We decided early on that we needed a plugin-based framework that other product teams (and even chat team‚Äôs core services) could use. We also decided that the API surface area for this new framework should have as much as possible in common between the Android and iOS implementations.</p><p>The first use case we focused on was integrating payment options within chat ‚Äî which would help us kickstart our design and feature rollout.</p><h2 id=\"approach\">Approach</h2><p>In the vein of keeping things as simple as possible, we came up with the following set of guidelines:</p><ul><li>The chat subsystem can expose add-on features to the user</li><li>These features will not be part of the core chat offering, but can be plugged-in externally</li><li>These plugin-based entities ‚Äî chat extensions ‚Äî can have mainly two capabilities</li><li>Display a button (widget) in a chat window to trigger the chat extension‚Äôs functionality</li><li>Display chat extension messages that can support rich text, images, call-to-actions</li></ul><p>Chat extension messages are merely text messages with additional metadata. While plain text-based messages are rendered by the core chat rendering system, chat extension messages need to be rendered by the chat extension that created the message.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1980/1*yZbylgYQ7Q7jaF8cooEpeQ.png\" class=\"kg-image\"><figcaption>Chat Extension Framework ‚Äî Key Actors</figcaption></figure><p>The illustration above depicts the final framework components we came up with.</p><ul><li><strong><strong>Chat Extension Providers</strong></strong> are responsible for vending <strong><strong>Chat Extension</strong></strong>s based on the active <strong><strong>Chat Session</strong></strong> (there might be cases where we want to enable a certain feature only for certain types of chats e.g. those between our drivers and customers).</li><li><strong><strong>Chat Extensions</strong></strong> are the components responsible for vending trigger points (<strong><strong>Widget Views</strong></strong>) and custom message views (<strong><strong>Extension Message Views</strong></strong>).</li></ul><p>While the core subsystem takes care of managing life cycles of the chat extensions, widgets, and message views, it is the responsibility of extension authors to purely focus on the implementation details of their feature.</p><p>With the above design in place, we were ready to start collaborating and start implementing features.</p><p>Let‚Äôs take a look at some integrations we were able to build collaboratively.</p><h1 id=\"sample-integrations\">Sample Integrations</h1><h2 id=\"payments\">Payments</h2><p>The first integration we did was Request and Pay flows. Utilising GoPay, customers can make payments and request for money from friends.</p><p>Here‚Äôs the Request Flow in action, within a personal chat:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*2mJZ8btzdO7bVq5rXtwvoQ.gif\" class=\"kg-image\"><figcaption>Request Money from an Individual</figcaption></figure><p>In a group chat, Request Flow translates to a Split Bill flow:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/402/1*OHgw8oUSuN6n1d8sjWCw7A.gif\" class=\"kg-image\"><figcaption>Request Money in a Group</figcaption></figure><p>Here‚Äôs the Pay flow in action:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*6z12Pjg1Vgy8Y-0P1jFPSw.gif\" class=\"kg-image\"><figcaption>Pay via GoPay, continue conversation in Chat</figcaption></figure><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.</p><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing-1\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*iMz_DNDwFwiCM4aiMRilAg.gif\" class=\"kg-image\"><figcaption>Share Restaurant Details via Chat</figcaption></figure><p>What‚Äôs interesting is that once a Restaurant Card has been shared via chat, a recipient clicking on that card can proceed to make a food order, directly from the chat window itself. This is made possible by the fact that Extension Message Views can be fully interactive (e.g. detect user taps), and the chat window provides contextual navigation controls to them.</p><h2 id=\"image-sharing\">Image Sharing</h2><p>Lastly, let us take a look at the most recent feature we rolled out to production ‚Äî image sharing in our customer-driver chats.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/600/1*uFGU-NAQrIM2L4USdNLuWA.gif\" class=\"kg-image\"><figcaption>Image Sharing via Chat</figcaption></figure><p>During the implementation of this feature, we recognised that image sharing would be better triggered from the chat window if there was a direct shortcut button (e.g. a camera icon) within the bottom text input area of the chat window.</p><p>This leads us to enhance our extension framework to allow Chat Extensions to provide Chat Extension Shortcuts as well. Our updated framework looks like below:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2140/1*BDMz2IPpUJcX3M80qI_7bw.png\" class=\"kg-image\"></figure><h1 id=\"lessons-learned\">Lessons Learned</h1><p>It has been a great journey so far exploring various kinds of integrations in a simple chat window. We have a lot more planned, but in the meanwhile, here are a few key things we learned along the way</p><ul><li>When you are developing a platform, evangelising what your platform provides is key. This is equally relevant if you are a platform-product company, or a platform team within a company. We conducted an internal chat extension hackathon which helped broaden our outreach, and saw some pretty cool ideas implemented including Live Location Sharing, Booking Sharing, Games, Sticker Packs etc.</li><li>Document your public API! Teams are more willing to collaborate if you have proper, up-to-date documentation in place. We created detailed technical documents, integration guides, and even provided a sample chat extension (a starter-pack, if you will) ‚Äî these greatly helped teams adopting these new features. Also, the feedback we got during the internal hackathon fed directly back into improving our documentation.</li><li>Having a common design language helped our Android and iOS engineers to collaborate more closely. It was easier for the team to work on implementing the feature by focussing on the common characteristics during tech discussion, design ratification sessions etc. and leaving the nuances of each platform to respective teams during development. Having a common language that engineers can speak (irrespective of their specialisations) improves cross-communications and collaboration.</li><li>It is important to design solutions exercising self-imposed constraints. These constraints should directly limit the engineering scope of the solution. As engineers, we are all too comfortable going down the technical analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit (possibly) over-engineered solution. This usually ends up in complicated designs, which translate into complicated code. It is better to design simpler systems and iteratively add smaller features, where each iteration cycle should also incorporate refactoring every step of the way. Even though we knew having something like Extension Shortcuts was nice to have from the get go, we had to exercise restraint and only implemented the feature when it was actually required.</li><li>We cannot stress this enough, but <em><em>continuous refactoring</em></em> (whenever required) is one surefire way to reduce the build-up of tech debt in any codebase. Improve a function here, rename a variable there, refactor a class into two ‚Äî every little bit helps. It is the responsibility of the entire team to be engaged in this exercise.</li></ul><p>So there you have it, a quick look at the way the core chat team developed a base extension framework that is currently being used to build richer integrations into chat.</p><hr><p>Want more where that come from? Have our updates delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-supercharged-chat/","canonical_url":null,"uuid":"a5657369-e813-44f1-af8d-aa2e306bfafd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12eb3f7c7da001effce0b","reading_time":6}},{"node":{"id":"Ghost__Post__5ecb637d7aa22c4066f83f36","title":"Reducing Latency with Sidecar","slug":"reducing-latency-with-sidecar","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_HWgBO6jgmlmk6-7_ewf7Yg.jpeg","excerpt":"How the sidecar pattern helped in our ongoing quest to reduce latency in our experimentation platform.","custom_excerpt":"How the sidecar pattern helped in our ongoing quest to reduce latency in our experimentation platform.","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"18 November, 2019","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:49:41.000+05:30","published_at":"2019-11-18T09:30:00.000+05:30","updated_at":"2020-05-25T11:54:40.000+05:30","meta_title":"Reducing Latency with Sidecar","meta_description":"How the sidecar pattern helped in our ongoing quest to reduce latency in our experimentation platform.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"You‚Äôve probably heard about Litmus [http://bit.ly/2RGxvbg], Gojek‚Äôs in-house\nexperimentation platform. Since we built it, the adoption of Litmus across Gojek\nteams has been steadily increasing. More experiments are executed and more\nclients (in this case, Gojek teams) are integrated.\n\nBesides this, another requirement is to integrate Litmus with other backend\nservices directly, instead of solely with the mobile app. However, various\nclient backend services have their own SLA and most of them are linked to\nlatency. So, in order to client requirements, we have to reduce Litmus latency\nas much as possible.\n\nIn this post, we talk about our thought process behind delivering an initial\nsidecar design to achieve this goal,\n\nKnow your enemies\nFirst thing first, we needed to figure out where the bottleneck was. After\ndigging through some data, it turned out 30% of total time in a Litmus API call\nwas dominated by database call, and the number of database calls is ~2000 qps.\n\nBased on this fact, we decided to use cache. Now, we obviously could not use an\nexternal cache like Redis or Memcached. If we used those, we would be adding an\nadditional call. üòë\n\nInstead, we decided to use in-memory cache. Since Litmus was written in Clojure,\nwe went with caffeine cache [https://github.com/ben-manes/caffeine], which is\ngood enough to be used in JVM. We implemented the in-memory cache and the\ndatabase calls dropped from ~2000 qps to ~10 qps. The API latency also dropped\naround 10%.\n\nGood, but Not Good Enough. We Needed More.\nThe implementation of in-memory cache and further tinkering with Litmus\nprocesses would not be enough on their own. Our next approach was to reduce the\nhops between client and Litmus servers.\n\nHow? By moving Litmus server so it is geographically closer to the client?\n\n> Nah, we can do one better.\nWe pulled our Litmus server as close as possible to the backend service client.\nTo achieve this, we used sidecar pattern. We created a Litmus sidecar that\nresides in the same box as the backend service client. A Litmus sidecar can be\nseen as a mini version of the Litmus server that specifically serves the\ndedicated backend service client in the same box (VM).\n\nTweaking the Nuts and Bolts\nTo know how effective the sidecar pattern is, we need to know the base latency\nof Litmus server. We created 10 new active experiments specifically to get the\nbase latency number. With 20 concurrency and 10 request per second, the 99\npercentile was 23.55 ms.\n\nNeed faster API calls? Use gRPC\nWe used gRPC over REST wherever we could in our Litmus sidecar. gRPC also has\nvarious features such as push/pull streaming and client-side load balancing that\ncan be utilised for further enhancement. It‚Äôs fun stuff! üòÅ\n\nHow do we maintain our sidecar without permission to maintain the backend\nservice client box?\nIn Gojek, each team can only have permission to access its own components/boxes.\nIt is not possible (or scalable) to access all our backend service client boxes.\n\nWe could have considered this if we had only two or three clients. However, when\nyou‚Äôre building for an organisation of Gojek‚Äôs scale with the hope of having all\nteams adopt Litmus in their services, we couldn‚Äôt go down this route.\n\nOn the other hand, we still needed the ability to check the health of Litmus\nsidecars in every backend service client and develop a sidecar app that complies\nwith several 12 factor apps [https://12factor.net/] criteria (treat logs as\nevent streams and store config in the environment).\n\nSource\n[https://d33wubrfki0l68.cloudfront.net/24c41d54613afb774bff0a383043f8a47f4d0fd7/a14fb/static/img/consul-services.png]\nWe decided to use Consul for service discovery\n[https://www.consul.io/discovery.html] and key-value config\n[https://www.consul.io/docs/agent/kv.html]. In addition being easy to use and\nhaving a nice dashboard UI, Consul service discovery also supports health\nchecks.\n\nAfter we set up the infra (Consul server, agent, etc), we just needed to add our\nservice definition config along with our litmus sidecar to the backend service\nclient box. For the Consul KV itself, Consul supports hot reloading, which means\nwe don‚Äôt need to restart clients‚Äô litmus sidecar if there are config changes.\n\nHowever, we needed to handle the logic of hot reloading in the litmus sidecar\napp by ourself. For the logging part, Gojek already has a logging tools called \nBarito\n[https://blog.gojekengineering.com/how-we-built-barito-to-enhance-logging-19f80b89496f] \nthat forwards the system logs so that we don‚Äôt have to access client boxes with\nssh.\n\nHere is the high-level architecture of how litmus sidecar integrates with client\nbackend services. Instead of pointing to Litmus server address, now backend\nservice clients only need to point to its localhost with Litmus sidecar port.\n\nLitmus sidecar in the same box as client backend serviceHow is the data\ndistributed?\nAs an agent of Litmus server that resides on the same box as the client, Litmus\nsidecar needs to have access to the same data as Litmus server.\n\n> This was something we discussed long and hard. The trade off between speed and\ndata consistency, the trade off between consistency and availability, and so on.\nAs our purpose was to reduce latency, speed became our first class citizen. At\nleast for now, it is okay for us to have eventually consistent data in our\nLitmus sidecar. We also decided to persist the data in the client box. We don‚Äôt\nstore all Litmus server data, only what the client needs.\n\nWe wanted our Litmus sidecar as light as possible, so it does not disturb the\nmain process in the box. Instead of using some SQL database, we decided to use\nKV store BadgerDB for persistence storage.\n\nHow to synchronise data between Litmus sidecar and server?\nWe came up with several ideas around this, but decided to use the simplest one\nfor our initial design. Litmus sidecar pulls the data that it needs periodically\nand persists it with BadgerDB.\n\nAlrighty then, let‚Äôs measure how good our sidecar is\nUsing the same setup as we did in measuring base latency, the 99 percentile\nlatency dropped to 6.91 ms. ‚úå\n\nNew clients are now integrating with sidecar, but we didn‚Äôt stop there. We are\ncontinuously optimising our Litmus sidecar app, and you can read more about our\nefforts in this post [http://bit.ly/2LQb6a3].\n\nSo, that was the thought process behind building sidecar to reduce latency. We\nbelieve there is still room for improvement, and would love to hear your\nthoughts in the comments.\n\nWant our stories sent straight to your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2KslIe4]","html":"<p>You‚Äôve probably heard about <a href=\"http://bit.ly/2RGxvbg\" rel=\"noopener\">Litmus</a>, Gojek‚Äôs in-house experimentation platform. Since we built it, the adoption of Litmus across Gojek teams has been steadily increasing. More experiments are executed and more clients (in this case, Gojek teams) are integrated.</p><p>Besides this, another requirement is to integrate Litmus with other backend services directly, instead of solely with the mobile app. However, various client backend services have their own SLA and most of them are linked to latency. So, in order to client requirements, we have to reduce Litmus latency as much as possible.</p><p>In this post, we talk about our thought process behind delivering an initial sidecar design to achieve this goal,</p><h3 id=\"know-your-enemies\">Know your enemies</h3><p>First thing first, we needed to figure out where the bottleneck was. After digging through some data, it turned out 30% of total time in a Litmus API call was dominated by database call, and the number of database calls is ~2000 qps.</p><p>Based on this fact, we decided to use cache. Now, we obviously could not use an external cache like Redis or Memcached. If we used those, we would be adding an additional call. üòë</p><p>Instead, we decided to use in-memory cache. Since Litmus was written in Clojure, we went with <a href=\"https://github.com/ben-manes/caffeine\" rel=\"noopener\">caffeine cache</a>, which is good enough to be used in JVM. We implemented the in-memory cache and the database calls dropped from ~2000 qps to ~10 qps. The API latency also dropped around 10%.</p><h3 id=\"good-but-not-good-enough-we-needed-more-\">Good, but Not Good Enough. We Needed More.</h3><p>The implementation of in-memory cache and further tinkering with Litmus processes would not be enough on their own. Our next approach was to reduce the hops between client and Litmus servers.</p><p><strong><strong>How? By moving Litmus server so it is geographically closer to the client?</strong></strong></p><blockquote>Nah, we can do one better.</blockquote><p>We pulled our Litmus server as close as possible to the backend service client. To achieve this, we used <strong><strong>sidecar pattern</strong></strong>. We created a Litmus sidecar that resides in the same box as the backend service client. A Litmus sidecar can be seen as a mini version of the Litmus server that specifically serves the dedicated backend service client in the same box (VM).</p><h3 id=\"tweaking-the-nuts-and-bolts\">Tweaking the Nuts and Bolts</h3><p>To know how effective the sidecar pattern is, we need to know the base latency of Litmus server. We created 10 new active experiments specifically to get the base latency number. With 20 concurrency and 10 request per second, the 99 percentile was 23.55 ms.</p><h3 id=\"need-faster-api-calls-use-grpc\">Need faster API calls? Use gRPC</h3><p>We used gRPC over REST wherever we could in our Litmus sidecar. gRPC also has various features such as push/pull streaming and client-side load balancing that can be utilised for further enhancement. It‚Äôs fun stuff! üòÅ</p><h3 id=\"how-do-we-maintain-our-sidecar-without-permission-to-maintain-the-backend-service-client-box\">How do we maintain our sidecar without permission to maintain the backend service client box?</h3><p>In Gojek, each team can only have permission to access its own components/boxes. It is not possible (or scalable) to access all our backend service client boxes.</p><p>We could have considered this if we had only two or three clients. However, when you‚Äôre building for an organisation of Gojek‚Äôs scale with the hope of having all teams adopt Litmus in their services, we couldn‚Äôt go down this route.</p><p>On the other hand, we still needed the ability to check the health of Litmus sidecars in every backend service client and develop a sidecar app that complies with several <a href=\"https://12factor.net/\" rel=\"noopener\">12 factor apps</a> criteria (treat logs as event streams and store config in the environment).</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_DpUpHDHGgk3d_jXEJYgD-w.png\" class=\"kg-image\"><figcaption><a href=\"https://d33wubrfki0l68.cloudfront.net/24c41d54613afb774bff0a383043f8a47f4d0fd7/a14fb/static/img/consul-services.png\">Source</a></figcaption></figure><p>We decided to use Consul for <a href=\"https://www.consul.io/discovery.html\" rel=\"noopener\">service discovery</a> and <a href=\"https://www.consul.io/docs/agent/kv.html\" rel=\"noopener\">key-value config</a>. In addition being easy to use and having a nice dashboard UI, Consul service discovery also supports health checks.</p><p>After we set up the infra (Consul server, agent, etc), we just needed to add our service definition config along with our litmus sidecar to the backend service client box. For the Consul KV itself, Consul supports hot reloading, which means we don‚Äôt need to restart clients‚Äô litmus sidecar if there are config changes.</p><p>However, we needed to handle the logic of hot reloading in the litmus sidecar app by ourself. For the logging part, Gojek already has a logging tools called <a href=\"https://blog.gojekengineering.com/how-we-built-barito-to-enhance-logging-19f80b89496f\" rel=\"noopener\">Barito</a> that forwards the system logs so that we don‚Äôt have to access client boxes with ssh.</p><p>Here is the high-level architecture of how litmus sidecar integrates with client backend services. Instead of pointing to Litmus server address, now backend service clients only need to point to its localhost with Litmus sidecar port.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_nlCPCXxdSLGuXKvrjjBdfA.png\" class=\"kg-image\"><figcaption>Litmus sidecar in the same box as client backend service</figcaption></figure><h3 id=\"how-is-the-data-distributed\">How is the data distributed?</h3><p>As an agent of Litmus server that resides on the same box as the client, Litmus sidecar needs to have access to the same data as Litmus server.</p><blockquote><em><em>This was something we discussed long and hard. The trade off between speed and data consistency, the trade off between consistency and availability, and so on.</em></em></blockquote><p>As our purpose was to reduce latency, speed became our first class citizen. At least for now, it is okay for us to have eventually consistent data in our Litmus sidecar. We also decided to persist the data in the client box. We don‚Äôt store all Litmus server data, only what the client needs.</p><p>We wanted our Litmus sidecar as light as possible, so it does not disturb the main process in the box. Instead of using some SQL database, we decided to use KV store BadgerDB for persistence storage.</p><h3 id=\"how-to-synchronise-data-between-litmus-sidecar-and-server\">How to synchronise data between Litmus sidecar and server?</h3><p>We came up with several ideas around this, but decided to use the simplest one for our initial design. Litmus sidecar pulls the data that it needs periodically and persists it with BadgerDB.</p><h3 id=\"alrighty-then-let-s-measure-how-good-our-sidecar-is\">Alrighty then, let‚Äôs measure how good our sidecar is</h3><p>Using the same setup as we did in measuring base latency, the 99 percentile latency dropped to 6.91 ms. ‚úå</p><p>New clients are now integrating with sidecar, but we didn‚Äôt stop there. We are continuously optimising our Litmus sidecar app, and you can read more about our efforts in this <a href=\"http://bit.ly/2LQb6a3\" rel=\"noopener\">post</a>.</p><p>So, that was the thought process behind building sidecar to reduce latency. We believe there is still room for improvement, and would love to hear your thoughts in the comments.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-1.png\" class=\"kg-image\"></figure><p>Want our stories sent straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-1.jpeg\" class=\"kg-image\"><figcaption><a href=\"http://bit.ly/2KslIe4\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/reducing-latency-with-sidecar/","canonical_url":null,"uuid":"fad08e62-a341-4366-b20c-ae2c5c5f487d","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb637d7aa22c4066f83f36","reading_time":5}},{"node":{"id":"Ghost__Post__5ecb5f6b7aa22c4066f83edf","title":"Finding Needles in Haystacks","slug":"finding-needles-in-haystacks","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_Y5n8UwfW38RLuhXQ4wwOmg-1.jpeg","excerpt":"How Gojek‚Äôs Magneto team is building products to help automate discovery of top candidates at scale.","custom_excerpt":"How Gojek‚Äôs Magneto team is building products to help automate discovery of top candidates at scale.","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"08 November, 2019","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:32:19.000+05:30","published_at":"2019-11-08T09:30:00.000+05:30","updated_at":"2020-05-25T11:55:03.000+05:30","meta_title":"Finding Needles in Haystacks ","meta_description":"How Gojek‚Äôs Magneto team is building products to help automate discovery of top candidates at scale.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"\nBy Atif Haider\n\nIn just a few years, Gojek has grown from a small startup aggregating ojeks to a\nSuper App that does over 200 million completed orders a month.\n\nMost importantly, we‚Äôve managed to scale our systems with a relatively lean team\nof engineers. However, in order to sustain this growth, we need to keep adding\nquality engineering talent to our ranks. To help with this, we rely on our\nin-house recruiters, who‚Äôve been doing a phenomenal job. üëå\n\n> But the question remains ‚Äî how do we continue to keep this up at scale?\nWe‚Äôve been trying to find a solution to this question, and as is usually the\ncase when it comes to Gojek, the answer lies in innovation. Just like every\nother domain we operate in, we needed to innovate in tech recruitment as well.\n\nWhen our team joined Gojek\n[https://blog.gojekengineering.com/gojek-acquires-aircto-expands-operations-in-india-d685c0b4db1c]\n, we had one clear objective ‚Äî apply the learnings from our previous startup to\nhelp Gojek find innovative ways to hire top engineering talent.\n\nThis is the story of how we‚Äôre doing it.\n\nEarly Days and Finding Our North star\nIn the first two weeks after we joined, we consulted with engineering heads,\ntech recruiters, and the India Inbound Marketing team. Over the course of\ncomparing notes from many meetings, we hoped to find patterns in how Gojek\nhired, and how we could automate the discovery of more people with similar\ntraits. Undertaking this exercise was at once a rewarding and challenging\nexperience for our team.\n\nWe got interesting insights, but also ran into conflicting data. Gojek had also\nrecently switched to a new Application Tracking Service (ATS), which brought its\nown set of unknowns. Navigating these unknowns and changing processes in an\norganisation with many fast-moving parts was our first order of business. In\nbetween all this, finding the formula for the kind of candidates we were looking\nfor was like looking for a needle in a haystack. Most of the problems that we\nidentified at these meetings turned out to be operational issues ‚Äî an insight\nprovided by our India MD, Sidu Ponnappa.\n\nMeanwhile, we needed a name for our team which people could use to identify us.\nWe named ourselves Magneto. To achieve our task of finding top developers, we\nwould need the superhuman power of attraction.\n\nTesting Our Powers\nGojek has a rigorous interview process, and we are picky about who we hire, to\nthe point where even people outside of Gojek know how tough it is to get in.\n\n> Hoardings, Metro Wraps, Radio Ads by @gojektech\n[https://twitter.com/gojektech?ref_src=twsrc%5Etfw] to hire in Gurgaon are hard\nto miss - \nand have heard that their selection process is one of the rigorous ones so don‚Äôt\nassume they are desperate to hire anyone who applies üòÑ\n\n‚Äî deepakabbot (@deepakabbot) September 25, 2019\n[https://twitter.com/deepakabbot/status/1176710364030881797?ref_src=twsrc%5Etfw]\nWe did get one key takeaway though. All our tests and questions are designed to\nidentify a few common traits:\n\n> In a nutshell, we‚Äôre biased towards developers who are hands-on and can code;\nirrespective of their prior experience and pedigree.\nAnother interesting fact: according to our internal data, a whopping 50% of\ncandidates who go through our interview process fail the first test assignment\nround. üòÆ\n\nI was surprised to see candidates from top product companies unable to get\nthrough this round.\n\nAfter looking at this daunting drop-off data, and acknowledging that we were\nvery new to Gojek‚Äôs hiring process, we decided to take baby steps. The goal: \nhire 1 engineer for GoFood. We also set up some key results to track back\ntowards our objective.\n\nCrafting A Solution\nWe knew we needed to find top developers who could make it through our\nrecruitment process, and then reach out to them to check if they would be\ninterested in joining us.\n\n> So we made this theme a problem statement, and divided it into two parts:\n> 1. Discover\n> 2. Nurture\nAs a first step, we pulled out profiles of engineers we hired from Lever (our\nApplication Tracking Service) and found many of them to be active on\ncode-related online digital platforms that reflect their passion for\nprogramming.\n\n> We finally knew where to start looking for our needle.\nOur first stop was the most obvious one ‚Äî Github. Then we went to StackOverflow\nand finally, Twitter. StackOverflow itself hosts over 10 million developers.\n\nStackOverflow StatsThere‚Äôs a lot of publicly available information on these\nplatforms, so we wrote a bunch of scripts to pull info about developers from\nGithub and StackOverflow. Then we tried to map their skills, contributions,\npopularity, and activities.\n\nWe wrote custom algorithms for Github and StackOverflow to classify developers\nas qualified and unqualified, based on the criteria we were looking for. We\nlooked at various signals to check their passion for programming, and they\npassed a certain pre-defined threshold, we would mark them as qualified.\n\nOnce a candidate is qualified, we needed to categorise them based on skills,\nexperience, location, and other parameters. This step also involved some manual\nwork to clean up the data.\n\nIn order to meet our first objective, we picked around 800 candidates and\nreached out to them through personalised email campaigns. Since our team was\nquite comfortable using Python, we used Python on top of PostgreSQL to write the\nNurture system to run these email campaigns (despite Python not being part of\nGojek‚Äôs core tech stack).\n\nThe Discover <> Nurture FlowSmelling success\nAfter rigorous follow-ups, we ended up getting a decent number of interested\ncandidates, whom we then contacted for exploratory conversations.\n\nThis was quite the enlightening experience ‚Äî and we realised Gojek is perceived\nas a highly tech-oriented company among developers.\n\n> Over 62% of the candidates who submitted the test assignment cleared it, and by\nthe time we finished the first cohort, we ended up hiring 3 devs.\nWe exceeded our target by 300%. üôå\n\nThe smile of successAutomation FTW\nAs we succeeded in demonstrating the viability of our MVP, we had to look at the\nproblem statement again and translate it into a scalable system. Tackling scale\nhas always been a part of Gojek‚Äôs journey to #SuperApp status, so we decided to\nbe prepared.\n\nWhile scaling the Candidate Discovery Process, we ran into two issues:\n\n 1. Since the discovery level was managed on spreadsheets, it required a massive\n    manual effort to keep the data unique between each service.\n 2. Getting candidate info from different sources required a lot of data-sharing\n    on multiple platforms. The result ‚Äî repetitive processes and data\n    duplication. ü§¶‚Äç‚ôÇÔ∏è\n\nConsidering these challenges, we divided the process into 3 different layers:\n\n 1. Service layer: Contains individual micro-service which has single behaviour\n    ‚Äî fetch details from a specific source and score, classify, and merge them\n    based on the data available on different mediums about a candidate.\n 2. Messaging layer: At any point in time, any individual service can connect to\n    other services to fetch more information about the candidate. For instance,\n    while parsing StackOverflow users, we get the user‚Äôs website and Github\n    URLs. So, the StackOverflow service will publish candidate‚Äôs Github social\n    id and website URL to the Github and WebScrapper services respectively. This\n    information about the candidate is then written to the database.\n 3. Data layer: It is a centralised MongoDB that stores all the data (even if\n    it‚Äôs incomplete) from different sources, which can further be pushed to\n    Nurture once it is verified.\n\nWe also dockerized all these micro-services, integrated monitoring (Prometheus),\nSlack alerts & logging (Barito [https://github.com/BaritoLog/wiki] ‚Äî thanks to\nour Barito team for offering a powerful logging system).\n\nWith this automated system, we processed over 38,000 tech candidates‚Äô profiles\nin a very short time, and found around 10,000 qualified candidates who passed\nour custom criteria.\n\nThis was our Aha! Moment.\n\nWith automation, we managed to make 13 offers to developers in a very short span\nof time, 6 of whom have already joined us.\n\nLaunching Fount\nSo far we had been the customers of our own product. But this needed to be\nbigger. We needed to get our product out to our internal recruiters to use.\n\n> However, there was one problem.\nThe Nurture system was written in Python, and we primarily use Ruby, Go, Java,\nand Clojure at Gojek. When you rely on tech stack not extensively used by the\nlarger org, you end up building your own tooling systems to test and deploy on\nthe existing infrastructure (which is already stable and working for other\nteams).\n\nTherefore, we decided to re-write the Nurture system in Clojure. I had prior\nexperience of writing programs in Common Lisp & Clojure. To my surprise, the\nteam was also excited to try out functional programming (I will soon write a\nseparate article on our experience in building API in Clojure. Pinky promise!).\n\nThere were a few hiccups in getting things moving around the infra and security\nsystems, but that was a given considering we were fairly new to the existing\ninfrastructure. We built the Nurture API in Clojure and a frontend in Reactjs.\nIn 30 days, we were up and running with our product.\n\n> We call it Fount.\nFount lists all the qualified discovered candidates; leads our recruiters can\nthen follow up on to check their interest and move into our hiring funnel.\nCurrently, a few beta users (our internal tech recruiters) are trying out the\nsystem. üññ\n\nWe have already redesigned Fount and this is how it looks now. Thanks to Asphalt\n[https://asphalt.gojek.io/]‚Äî our very own design system at Gojek.\n\nAI Powered Candidate Discovery PlatformThe Way Forward\nThis was just the first step in our journey of streamlining recruitment at\nGojek. We‚Äôre planning to improve our sourcing algorithms, find new sources,\nimprove the candidate verification process, and build new features on Fount.\n\nWe‚Äôre also going to attack different tech recruiting problems and bring\nautomation wherever possible in order to hire top developers (and offer up a\ngreat candidate experience).\n\nThat‚Äôs all from us for now. We‚Äôd love to hear your feedback in the comments.\n\nFor Gojek updates delivered straight to your inbox, sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2PZliiS]","html":"<p><br>By Atif Haider</p><p>In just a few years, Gojek has grown from a small startup aggregating <em><em>ojeks</em></em> to a Super App that does over 200 million completed orders a month.</p><p>Most importantly, we‚Äôve managed to scale our systems with a relatively lean team of engineers. However, in order to sustain this growth, we need to keep adding quality engineering talent to our ranks. To help with this, we rely on our in-house recruiters, who‚Äôve been doing a phenomenal job. üëå</p><blockquote><strong>But the question remains ‚Äî how do we continue to keep this up at scale?</strong></blockquote><p>We‚Äôve been trying to find a solution to this question, and as is usually the case when it comes to Gojek, the answer lies in innovation. Just like every other domain we operate in, we needed to innovate in tech recruitment as well.</p><p>When our team <a href=\"https://blog.gojekengineering.com/gojek-acquires-aircto-expands-operations-in-india-d685c0b4db1c\" rel=\"noopener\">joined Gojek</a>, we had one clear objective ‚Äî apply the learnings from our previous startup to help Gojek find innovative ways to hire top engineering talent.</p><p>This is the story of how we‚Äôre doing it.</p><h3 id=\"early-days-and-finding-our-north-star\">Early Days and Finding Our North star</h3><p>In the first two weeks after we joined, we consulted with engineering heads, tech recruiters, and the India Inbound Marketing team. Over the course of comparing notes from many meetings, we hoped to find patterns in how Gojek hired, and how we could automate the discovery of more people with similar traits. Undertaking this exercise was at once a rewarding and challenging experience for our team.</p><p>We got interesting insights, but also ran into conflicting data. Gojek had also recently switched to a new Application Tracking Service (ATS), which brought its own set of unknowns. Navigating these unknowns and changing processes in an organisation with many fast-moving parts was our first order of business. In between all this, finding the formula for the kind of candidates we were looking for was like looking for a needle in a haystack. Most of the problems that we identified at these meetings turned out to be operational issues ‚Äî an insight provided by our India MD, Sidu Ponnappa.</p><p>Meanwhile, we needed a name for our team which people could use to identify us. We named ourselves <strong><strong>Magneto</strong></strong>. To achieve our task of finding top developers, we would need the superhuman power of attraction.</p><h3 id=\"testing-our-powers\">Testing Our Powers</h3><p>Gojek has a rigorous interview process, and we are picky about who we hire, to the point where even people outside of Gojek know how tough it is to get in.</p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\" data-width=\"550\"><p lang=\"en\" dir=\"ltr\">Hoardings, Metro Wraps, Radio Ads by <a href=\"https://twitter.com/gojektech?ref_src=twsrc%5Etfw\">@gojektech</a> to hire in Gurgaon are hard to miss - <br>and have heard that their selection process is one of the rigorous ones so don‚Äôt assume they are desperate to hire anyone who applies üòÑ</p>&mdash; deepakabbot (@deepakabbot) <a href=\"https://twitter.com/deepakabbot/status/1176710364030881797?ref_src=twsrc%5Etfw\">September 25, 2019</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p>We did get one key takeaway though. All our tests and questions are designed to identify a few common traits:</p><blockquote><em><em>In a nutshell, we‚Äôre biased towards developers who are hands-on and can code; irrespective of their prior experience and pedigree.</em></em></blockquote><p>Another interesting fact: according to our internal data, a whopping 50% of candidates who go through our interview process <strong><strong><em><em>fail the first test assignment round</em></em></strong></strong>. üòÆ</p><p>I was surprised to see candidates from top product companies unable to get through this round.</p><p>After looking at this daunting drop-off data, and acknowledging that we were very new to Gojek‚Äôs hiring process, we decided to take baby steps. The goal: <strong><strong>hire 1 engineer for GoFood. </strong></strong>We also set up some key results to track back towards our objective.</p><h3 id=\"crafting-a-solution\">Crafting A Solution</h3><p>We knew we needed to find top developers who could make it through our recruitment process, and then reach out to them to check if they would be interested in joining us.</p><blockquote><em>So we made this theme a problem statement, and divided it into two parts:</em></blockquote><blockquote><em><em><em>1. Discover</em></em></em></blockquote><blockquote><em><em><em>2. Nurture</em></em></em></blockquote><p>As a first step, we pulled out profiles of engineers we hired from Lever (our Application Tracking Service) and found many of them to be active on code-related online digital platforms that reflect their passion for programming.</p><blockquote>We finally knew where to start looking for our needle.</blockquote><p>Our first stop was the most obvious one ‚Äî Github. Then we went to StackOverflow and finally, Twitter. StackOverflow itself hosts over 10 million developers.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_KbHxqGC8qosP6HE99pLzKQ.png\" class=\"kg-image\"><figcaption><em>StackOverflow Stats</em></figcaption></figure><p>There‚Äôs a lot of publicly available information on these platforms, so we wrote a bunch of scripts to pull info about developers from Github and StackOverflow. Then we tried to map their skills, contributions, popularity, and activities.</p><p>We wrote custom algorithms for Github and StackOverflow to classify developers as qualified and unqualified, based on the criteria we were looking for. We looked at various signals to check their passion for programming, and they passed a certain pre-defined threshold, we would mark them as qualified.</p><p>Once a candidate is qualified, we needed to categorise them based on skills, experience, location, and other parameters. This step also involved some manual work to clean up the data.</p><p>In order to meet our first objective, we picked around 800 candidates and reached out to them through personalised email campaigns. Since our team was quite comfortable using Python, we used Python on top of PostgreSQL to write the Nurture system to run these email campaigns (despite Python not being part of Gojek‚Äôs core tech stack).</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_GHx2ht682c0V23r-Bk5pvA.jpeg\" class=\"kg-image\"><figcaption>The Discover &lt;&gt; Nurture Flow</figcaption></figure><h3 id=\"smelling-success\">Smelling success</h3><p>After rigorous follow-ups, we ended up getting a decent number of interested candidates, whom we then contacted for exploratory conversations.</p><p>This was quite the enlightening experience ‚Äî and we realised Gojek is perceived as a highly tech-oriented company among developers.</p><blockquote>Over 62% of the candidates who submitted the test assignment cleared it, and by the time we finished the first cohort, we ended up hiring 3 devs.</blockquote><p>We exceeded our target by 300%. üôå</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_rjDDcWnOZeFFDRZdM-FCdQ.jpeg\" class=\"kg-image\"><figcaption>The smile of success</figcaption></figure><h3 id=\"automation-ftw\">Automation FTW</h3><p>As we succeeded in demonstrating the viability of our MVP, we had to look at the problem statement again and translate it into a scalable system. Tackling scale has always been a part of Gojek‚Äôs journey to #SuperApp status, so we decided to be prepared.</p><p>While scaling the Candidate Discovery Process, we ran into two issues:</p><ol><li>Since the discovery level was managed on spreadsheets, it required a massive manual effort to keep the data unique between each service.</li><li>Getting candidate info from different sources required a lot of data-sharing on multiple platforms. The result ‚Äî repetitive processes and data duplication. ü§¶‚Äç‚ôÇÔ∏è</li></ol><p>Considering these challenges, we divided the process into 3 different layers:</p><ol><li><strong><strong>Service layer:</strong></strong> Contains individual micro-service which has single behaviour ‚Äî fetch details from a specific source and score, classify, and merge them based on the data available on different mediums about a candidate.</li><li><strong><strong>Messaging layer:</strong></strong> At any point in time, any individual service can connect to other services to fetch more information about the candidate. For instance, while parsing StackOverflow users, we get the user‚Äôs website and Github URLs. So, the StackOverflow service will publish candidate‚Äôs Github social id and website URL to the Github and WebScrapper services respectively. This information about the candidate is then written to the database.</li><li><strong><strong>Data layer:</strong></strong> It is a centralised MongoDB that stores all the data (even if it‚Äôs incomplete) from different sources, which can further be pushed to Nurture once it is verified.</li></ol><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Aw3fPTBAj5YMdP5N2zQy9A.jpeg\" class=\"kg-image\"></figure><p>We also dockerized all these micro-services, integrated monitoring (Prometheus), Slack alerts &amp; logging (<a href=\"https://github.com/BaritoLog/wiki\" rel=\"noopener\">Barito</a> ‚Äî thanks to our Barito team for offering a powerful logging system).</p><p>With this automated system, we processed over 38,000 tech candidates‚Äô profiles in a very short time, and found around 10,000 qualified candidates who passed our custom criteria.</p><p><strong><strong><em><em>This was our Aha! Moment.</em></em></strong></strong></p><p>With automation, we managed to make 13 offers to developers in a very short span of time, 6 of whom have already joined us.</p><h3 id=\"launching-fount\">Launching Fount</h3><p>So far we had been the customers of our own product. But this needed to be bigger. We needed to get our product out to our internal recruiters to use.</p><blockquote>However, there was one problem.</blockquote><p>The Nurture system was written in Python, and we primarily use Ruby, Go, Java, and Clojure at Gojek. When you rely on tech stack not extensively used by the larger org, you end up building your own tooling systems to test and deploy on the existing infrastructure (which is already stable and working for other teams).</p><p>Therefore, we decided to re-write the Nurture system in Clojure. I had prior experience of writing programs in Common Lisp &amp; Clojure. To my surprise, the team was also excited to try out functional programming (I will soon write a separate article on our experience in building API in Clojure. Pinky promise!).</p><p>There were a few hiccups in getting things moving around the infra and security systems, but that was a given considering we were fairly new to the existing infrastructure. We built the Nurture API in Clojure and a frontend in Reactjs. In 30 days, we were up and running with our product.</p><blockquote>We call it Fount.</blockquote><p>Fount lists all the qualified discovered candidates; leads our recruiters can then follow up on to check their interest and move into our hiring funnel. Currently, a few beta users (our internal tech recruiters) are trying out the system. üññ</p><p>We have already redesigned Fount and this is how it looks now. Thanks to <a href=\"https://asphalt.gojek.io/\" rel=\"noopener\">Asphalt </a>‚Äî our very own design system at Gojek.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_ryHN4fsHSsi0gmiDk64F7w.png\" class=\"kg-image\"><figcaption>AI Powered Candidate Discovery Platform</figcaption></figure><h3 id=\"the-way-forward\">The Way Forward</h3><p>This was just the first step in our journey of streamlining recruitment at Gojek. We‚Äôre planning to improve our sourcing algorithms, find new sources, improve the candidate verification process, and build new features on Fount.</p><p>We‚Äôre also going to attack different tech recruiting problems and bring automation wherever possible in order to hire top developers (and offer up a great candidate experience).</p><p>That‚Äôs all from us for now. We‚Äôd love to hear your feedback in the comments.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-2.png\" class=\"kg-image\"></figure><p>For Gojek updates delivered straight to your inbox, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA.jpeg\" class=\"kg-image\"><figcaption><a href=\"http://bit.ly/2PZliiS\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/finding-needles-in-haystacks/","canonical_url":null,"uuid":"9af8fd1d-e79e-489b-8a12-c2d768446e60","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb5f6b7aa22c4066f83edf","reading_time":7}},{"node":{"id":"Ghost__Post__5ec2af987aa22c4066f83ac4","title":"How We Manage a Million Push Notifications an Hour","slug":"how-we-manage-a-million-push-notifications-an-hour","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_tEOdkRN79DncrPtPfF8KIA.jpeg","excerpt":"3 million+ orders a day across 20+ products on multiple devices, operating systems, and services. That‚Äôs a lot of notifications. üòÖ","custom_excerpt":"3 million+ orders a day across 20+ products on multiple devices, operating systems, and services. That‚Äôs a lot of notifications. üòÖ","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"29 August, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T21:24:00.000+05:30","published_at":"2019-08-29T09:30:00.000+05:30","updated_at":"2020-05-18T21:44:11.000+05:30","meta_title":null,"meta_description":"3 million+ orders a day across 20+ products on multiple devices, operating systems, and services. That‚Äôs a lot of notifications. üòÖ","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Soham Kamani\n\nPush notifications are an essential tool to inform users about events that\nrequire their immediate attention. At Gojek, we handle more than 3 million\norders a day across our 20+ products.\n\nAs you can imagine, the number of push notifications we send are proportionally\nlarge ‚Äî about a million every hour to be exact.This post describes the\nchallenges we faced while working with such high notification volumes, and the\nsolutions we developed to solve them.\n\nVolume is only one part of the problem, many additional challenges were somewhat\nunique to Gojek:\n\n1. Multiple applications\nGojek isn‚Äôt comprised of just a single app. In addition to the Gojek app for\ncustomers, we also have GoLife, as well as our driver apps, merchant apps, and\nservice provider apps for GoLife.\n\nWhen one of our systems wants to send a notification, it could be for a specific\napplication of a user (for example, we don‚Äôt want to send GoLife booking\nnotifications to the Gojek app), or for all applications (for example, a\npromotional notification).\n\nOur system needed to be flexible enough to choose between an option to broadcast\nthe notification to all applications, or to a specific application.\n\n2. Multiple notification providers\nSince we support both iOS and Android for our customer applications, we needed\nto support multiple notification systems.\n\nFor Android devices, we have FCM (Firebase Cloud Messaging) and the deprecated\nGCM (Google Cloud Messaging) API. For iOS, we have APNS (Apple Push Notification\nservice).\n\nEach notification provider has different API keys and tokens for different\napplication IDs. For example, the FCM API key would be different for GoLife as\nopposed to Gojek.\n\n3. Multiple devices per user\nWe allow our users to stay signed in to multiple devices at a time. For us, this\nalso means that any push notification sent to the user must be sent to all of\nthe devices that the user is currently logged into.\n\nThis is also a combination of the previous two problems:\n\n 1. The user can be logged into multiple applications on a single device (Gojek\n    + GoLife)\n 2. The user may be logged into different devices, where each device requires a\n    different push notification provider. For example, a user can be logged into\n    Gojek on their Android, as well as iOS device.\n\n4. Multiple services that want to send notifications\nGojek uses a micro-service architecture, where the services of each of our\nproducts need to send notifications to our users.\n\nWe want to make it as easy as possible for any service to be able to send a\nnotification, without worrying about the multiple devices and providers that we\ndiscussed.\n\nPush notification service architecture\n\nIn order to address the above challenges, and make sure that the API remains as\nsimple as possible, we built our notification system as three components:\n\n 1. Notification server ‚Äî exposes the API to send notifications, and pushes it\n    as a job on our job queue\n 2. Token store ‚Äî stores the devices and devices tokens of all the currently\n    logged-in users\n 3. Notification worker ‚Äî consumes jobs on the job queue and sends notifications\n    via the notification providers.\n\nEach component abstracts away some part of the problems we discussed above.\nLet‚Äôs take a look at each part in more detail:\n\n1. Token store\nOnce a user is logged into our application, the application makes a call to the\ntoken store API with their device token and application ID.\n\n\nThis entry is then removed when the user logs out.\n\n> The token store abstracts the process of deciding which devices to send a\nnotification to for each user\n2. Notification server\nThis is an HTTP server that exposes an API internally to send notifications.\n\nIn order to make things simple, the API accepts the user ID, and an optional\napplication ID as HTTP headers, and notification information in the request\nbody:\n\nPOST http://<base_url>/notification\nuser_id: <user_id>\napplication_id: <application_id>\n\n{\n\"payload\": {},\n\"title\": \"You driver is here\",\n\"message\": \"Please meet your driver at the pickup point\"\n}\n\nThe server fetches all of the users devices from the token store, and schedules\na job for each of the users devices.\n\n> The notification server abstracts the external interface to the system. Now,\nother services in Gojek that need to send out a notification just need to call\nour API with the user ID, and the system takes care of the rest\n3. Job Queue\nWe use RabbitMQ as an exchange for our job queues. We have a queue for each\napplication ID and provider type.\n\n\nThis is important because we want to isolate failures for each application and\nprovider type. For example, if our FCM token expires for com.gojek.app, we don't\nwant to stall the jobs for com.gojek.life or com.gojek.driver.bike.\n\n4. Notification workers\n\nThe worker processes consume messages from the job queues, and send out messages\nto the respective notification providers.\n\nIn order to make our code simpler, and to accommodate different service\nproviders if needed, we make use of interfaces to abstract the functionality\nimplemented by each provider:\n\ntype PushService interface {\nPush(ctx context.Context, m PushRequest) (PushResponse, error)\n}\n\nThe Push method takes a request object and returns a response object.\n\nThe request structure contains information related to the recipient and\nadditional options about the notification, like expiry time, title and text:\n\ntype PushRequest struct {\nDeviceID ¬† string \nTitle ¬† ¬† ¬†string\nMessage ¬† ¬†string\nPayload ¬† ¬†map[string]interface{}\n//some other parameters omitted\n}\n\nThe response contains information on whether the notification was sent to the\nprovider‚Äôs server successfully:\n\ntype PushResponse struct {\nSuccess ¬† ¬† ¬† ¬† bool\nErrorMsg ¬† ¬† ¬† ¬†string\n}\nWe then implement the interface for specific providers. For example, the code\nfor Google FCM provider, and Apples APNS provider looks something like this:\n\ntype FCMProvider struct {\n// configuration for our provider, like API token and URL endpoint\n}func (p *FCMProvider) Push(ctx context.Context, m queue.Message)\n(notification.PushResponse, error) {\n// code to send a notification payload to FCMs server\n}type APNSProvider struct {\n// configuration for our provider, like API token and URL endpoint\n}func (p *APNSProvider) Push(ctx context.Context, m queue.Message)\n(notification.PushResponse, error) {\n// code to send a notification payload to FCMs server\n}\n\n> The notification worker abstracts the process of selecting the correct provider\nto send the notification. It selects the correct provider, with the correct API\nkey based on the application ID of the message received from the queue.\nConclusion\nBy finding common patterns in the challenges we faced, and abstracting them into\ntheir own services, we turned a relatively complex problem into a suite of\nservices that are reasonably straightforward and easy to manage on their own.\n\nEach time we found a point which needed to handle multiple implementations of\nthe same core logic, we put it behind a dedicated service:\n\n 1. Multiple devices for a user was put behind the token service\n 2. Multiple applications were given a common interface on notification server\n 3. Multiple providers were handled by individual job queues and notification\n    workers\n\nIn the end, we wound up with a system that can comfortably handle over a million\nnotifications every hour.\n\n\n--------------------------------------------------------------------------------\n\nWant more updates on how we build scalable systems for Southeast Asia‚Äôs\n#SuperApp? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Soham Kamani</p><p>Push notifications are an essential tool to inform users about events that require their immediate attention. At Gojek, we handle more than 3 million orders a day across our 20+ products.</p><p>As you can imagine, the number of push notifications we send are proportionally large ‚Äî about a million every hour to be exact.This post describes the challenges we faced while working with such high notification volumes, and the solutions we developed to solve them.</p><p>Volume is only one part of the problem, many additional challenges were somewhat unique to Gojek:</p><h1 id=\"1-multiple-applications\">1. Multiple applications</h1><p>Gojek isn‚Äôt comprised of just a single app. In addition to the Gojek app for customers, we also have GoLife, as well as our driver apps, merchant apps, and service provider apps for GoLife.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/882/1*LydaxXs7dKWE8OvGt7Opnw.png\" class=\"kg-image\"></figure><p>When one of our systems wants to send a notification, it could be for a specific application of a user (for example, we don‚Äôt want to send GoLife booking notifications to the Gojek app), or for all applications (for example, a promotional notification).</p><p>Our system needed to be flexible enough to choose between an option to broadcast the notification to all applications, or to a specific application.</p><h1 id=\"2-multiple-notification-providers\">2. Multiple notification providers</h1><p>Since we support both iOS and Android for our customer applications, we needed to support multiple notification systems.</p><p>For Android devices, we have FCM (Firebase Cloud Messaging) and the deprecated GCM (Google Cloud Messaging) API. For iOS, we have APNS (Apple Push Notification service).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/962/1*gx05-ArzDJLasMbmiOmiqA.png\" class=\"kg-image\"></figure><p>Each notification provider has different API keys and tokens for different application IDs. For example, the FCM API key would be different for GoLife as opposed to Gojek.</p><h1 id=\"3-multiple-devices-per-user\">3. Multiple devices per user</h1><p>We allow our users to stay signed in to multiple devices at a time. For us, this also means that any push notification sent to the user must be sent to all of the devices that the user is currently logged into.</p><p>This is also a combination of the previous two problems:</p><ol><li>The user can be logged into multiple applications on a single device (Gojek + GoLife)</li><li>The user may be logged into different devices, where each device requires a different push notification provider. For example, a user can be logged into Gojek on their Android, as well as iOS device.</li></ol><h1 id=\"4-multiple-services-that-want-to-send-notifications\">4. Multiple services that want to send notifications</h1><p>Gojek uses a micro-service architecture, where the services of each of our products need to send notifications to our users.</p><p>We want to make it as easy as possible for any service to be able to send a notification, without worrying about the multiple devices and providers that we discussed.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/501/1*6IaF4_PwdHWk6RowO0OnoA.png\" class=\"kg-image\"></figure><p>Push notification service architecture</p><p>In order to address the above challenges, and make sure that the API remains as simple as possible, we built our notification system as three components:</p><ol><li><strong><strong>Notification server</strong></strong> ‚Äî exposes the API to send notifications, and pushes it as a job on our job queue</li><li><strong><strong>Token store</strong></strong> ‚Äî stores the devices and devices tokens of all the currently logged-in users</li><li><strong><strong>Notification worker</strong></strong> ‚Äî consumes jobs on the job queue and sends notifications via the notification providers.</li></ol><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1902/1*2Nmx4MeYAXgekpr3uD8dng.png\" class=\"kg-image\"></figure><p>Each component abstracts away some part of the problems we discussed above. Let‚Äôs take a look at each part in more detail:</p><h2 id=\"1-token-store\">1. Token store</h2><p>Once a user is logged into our application, the application makes a call to the token store API with their device token and application ID.<br></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2014/1*UoYZSCamWMlz5DcK7fJ9zQ.png\" class=\"kg-image\"></figure><p>This entry is then removed when the user logs out.</p><blockquote><em><em>The token store abstracts the process of deciding which devices to send a notification to for each user</em></em></blockquote><h2 id=\"2-notification-server\">2. Notification server</h2><p>This is an HTTP server that exposes an API internally to send notifications.</p><p>In order to make things simple, the API accepts the user ID, and an optional application ID as HTTP headers, and notification information in the request body:</p><p><code>POST http://&lt;base_url&gt;/notification<br>user_id: &lt;user_id&gt;<br>application_id: &lt;application_id&gt;</code></p><p><code>{<br>\t\"payload\": {},<br>\t\"title\": \"You driver is here\",<br>\t\"message\": \"Please meet your driver at the pickup point\"<br>}</code></p><p>The server fetches all of the users devices from the token store, and schedules a job for each of the users devices.</p><blockquote><em><em>The notification server abstracts the external interface to the system. Now, other services in Gojek that need to send out a notification just need to call our API with the user ID, and the system takes care of the rest</em></em></blockquote><h2 id=\"3-job-queue\">3. Job Queue</h2><p>We use RabbitMQ as an exchange for our job queues. We have a queue for each application ID and provider type.<br></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1832/1*Mg8xAvNt3o_6W7syBRst-w.png\" class=\"kg-image\"></figure><p>This is important because we want to isolate failures for each application and provider type. For example, if our FCM token expires for <code>com.gojek.app</code>, we don't want to stall the jobs for <code>com.gojek.life</code> or <code>com.gojek.driver.bike</code>.</p><p>4. Notification workers</p><p>The worker processes consume messages from the job queues, and send out messages to the respective notification providers.</p><p>In order to make our code simpler, and to accommodate different service providers if needed, we make use of interfaces to abstract the functionality implemented by each provider:</p><p><code>type PushService interface {<br>\tPush(ctx context.Context, m PushRequest) (PushResponse, error)<br>}</code></p><p>The <code>Push</code> method takes a request object and returns a response object.</p><p>The request structure contains information related to the recipient and additional options about the notification, like expiry time, title and text:</p><p><code>type PushRequest struct {<br>\tDeviceID ¬† string <br>\tTitle ¬† ¬† ¬†string<br>\tMessage ¬† ¬†string<br>\tPayload ¬† ¬†map[string]interface{}<br><em><em>//some other parameters omitted</em></em><br>}</code></p><p>The response contains information on whether the notification was sent to the provider‚Äôs server successfully:</p><p><code>type PushResponse struct {<br>\tSuccess ¬† ¬† ¬† ¬† bool<br>\tErrorMsg ¬† ¬† ¬† ¬†string<br>}</code><br>We then implement the interface for specific providers. For example, the code for Google FCM provider, and Apples APNS provider looks something like this:</p><p><code>type FCMProvider struct {<br>\t<em><em>// configuration for our provider, like API token and URL endpoint</em></em><br>}func (p *FCMProvider) Push(ctx context.Context, m queue.Message) (notification.PushResponse, error) {<br>\t<em><em>// code to send a notification payload to FCMs server</em></em><br>}type APNSProvider struct {<br>\t<em><em>// configuration for our provider, like API token and URL endpoint</em></em><br>}func (p *APNSProvider) Push(ctx context.Context, m queue.Message) (notification.PushResponse, error) {<br>\t<em><em>// code to send a notification payload to FCMs server</em></em><br>}</code></p><blockquote><em><em>The notification worker abstracts the process of selecting the correct provider to send the notification. It selects the correct provider, with the correct API key based on the application ID of the message received from the queue.</em></em></blockquote><h1 id=\"conclusion\">Conclusion</h1><p>By finding common patterns in the challenges we faced, and abstracting them into their own services, we turned a relatively complex problem into a suite of services that are reasonably straightforward and easy to manage on their own.</p><p>Each time we found a point which needed to handle multiple implementations of the same core logic, we put it behind a dedicated service:</p><ol><li>Multiple devices for a user was put behind the token service</li><li>Multiple applications were given a common interface on notification server</li><li>Multiple providers were handled by individual job queues and notification workers</li></ol><p>In the end, we wound up with a system that can comfortably handle <strong><strong>over a million notifications every hour</strong></strong>.</p><hr><p>Want more updates on how we build scalable systems for Southeast Asia‚Äôs #SuperApp? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-manage-a-million-push-notifications-an-hour/","canonical_url":null,"uuid":"b9ad7304-57c6-4ff7-9a4e-6424cb767b77","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2af987aa22c4066f83ac4","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2af8a7aa22c4066f83abe","title":"Applying the Single Responsibility Principle to Microservices","slug":"applying-the-single-responsibility-principle-to-microservices","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_5lEpe0Ab9138LC9cY1QZSQ.jpeg","excerpt":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","custom_excerpt":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"05 February, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T21:23:46.000+05:30","published_at":"2019-02-05T09:30:00.000+05:30","updated_at":"2020-05-18T21:30:57.000+05:30","meta_title":null,"meta_description":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Soham Kamani\n\nThe single responsibility principle is one of the most tried-and-tested tenets\nof software design. Every module or class should do one thing, and do it well.\nWe found this principle was applicable, and incredibly important, while\ndesigning our systems.\n\nAbout a year ago, we released a new chat service (which we internally called \nIcebreaker). It allowed our users to communicate with drivers through the app\nitself, rather than use SMS (which cost both the driver and customer money).\n\nHowever, all was not well. For numerous reasons, the service gave us a lot of\nissues and late night pagers. This post details the lessons we learnt, and some\nof the decisions we took to make this service more reliable.\n\nThe Problem(s)\nIn a nutshell, Icebreaker depended on too many other services to function\nproperly. Let‚Äôs look at some of the tasks Icebreaker performed in order to\ncreate a channel:\n\n 1. Authorise the API call: This made a call to our authentication service.\n 2. Fetch the customer profile: This required an HTTP call to our customer\n    service.\n 3. Fetch the drivers‚Äô profile: This required an HTTP call to our driver\n    service.\n 4. Verify if the customer-driver pair are in an active order: This made a call\n    to our active booking storage service.\n 5. Create the channel.\n\nIf any of these services failed, Icebreaker would fail as well.\n\nSimultaneous dependence on multiple services ensures that the dependent service\nis less stable than any of themEven if we could ensure 99% uptime for all\nservices in question, that still means the chances of all of them being up at\nthe same time was 96%.\n\nP(icebreaker active) = P(customer service active) * P(driver service active) *\nP(authentication service active) * P(active booking storage active) = 0.99 *\n0.99 * 0.99 * 0.99 ~= 0.96\n\nThis means our downtime has increased four times over (4%, as opposed to 1%).\n\nNot my job\nWhen a service starts to do too many things, it‚Äôs bound to fail sooner or later.\nIn this case, Icebreaker‚Äôs job was to create a channel between a customer and a\ndriver. However, it was doing all this extra stuff: like authentication,\nverification, and profile retrieval. ü§¶‚Äç‚ôÇ\n\nLet‚Äôs take a look at the changes we made to get rid of each dependency:\n\nAuthentication\nEvery API call arriving to Icebreaker came with an API token which needed\nauthentication. To solve this, we added a Kong [https://konghq.com/] API\ngateway. This authenticated all requests and added information about the\nauthenticated user within the API headers.\n\nNow, every request arriving to Icebreaker was authenticated.\n\n> Key takeaway: Tell, don‚Äôt ask. The requests coming from the API gateway told the\nservice that they were authenticated, rather than Icebreaker having to ask\nanother service.\nProfile retrieval\nIn order to create a channel, we needed a piece of information called the ‚Äòchat\ntoken‚Äô for each user. This was stored in the customer service for the customer,\nand the driver service for the driver.\n\nSince Icebreaker was the only service using this token, we moved these tokens to\nit, and removed them from the customer and driver services.\n\nNow,Icebreaker had all the information it needed in its own database, which was\na more reliable source of truth as compared to a whole other HTTP service.\n\n> Key takeaway: If your service is the only one using any piece of information, it\nshould reside within the service itself\nActive booking storage\nIcebreaker used to create a channel on-demand every time the user hit its\nchannel creation API. This on-demand creation required us to verify that an\nactive booking existed, for which the user needed to create a channel. After\nall, it didn‚Äôt make sense to create a channel when the parties involved did not\nhave an order with each other.\n\nTo fix this, we moved to an asynchronous architecture for channel creation.\nInstead of on-demand channel creation, we made use of GO-JEKs data pipeline\n[https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929],\nthat published events every time a booking was made. Icebreaker now consisted of\ntwo components: the worker and the server.\n\n 1. The worker consumed booking events every time they were made. It then\n    created a channel between the customer and driver in the booking, and stored\n    the channel information on a Redis cache.\n 2. The server served channel creation requests as before. Only, this time, the\n    channels were already created and cached, along with the order number.\n    \n\nSo, instead of on demand channel creation, the channels were created and stored\nbeforehand. Since we were consuming booking events from our own data pipeline,\nthere was no need to verify whether the booking was genuine or not.\n\n> Key takeaway: Again, tell, don‚Äôt ask. The events coming from our data pipeline\ntold Icebreaker that the bookings were genuine. This meant it could create the\nchannel, instead of hitting a service to verify the authenticity of the booking.\nResults\nNow Icebreaker did only what it was truly meant to do: create channels.\n\nSince we removed dependencies on most external systems, we no longer had to\nworry about one system failure causing Icebraker to malfunction. The load on the\nexternal services also reduced, since Icebreaker was no longer using their\nendpoints for channel creation.\n\nMoving to the asynchronous architecture also led to a drastic reduction in\nresponse time, from ~200ms to ~10ms, since we were pre-creating and caching\nchannels for every order.\n\nThe takeaways we got from this experience conform with the single responsibility\nprinciple. In the end, it‚Äôs always better to ask ourselves: ‚ÄúCan this service do\nless?‚Äù\n\n\n--------------------------------------------------------------------------------\n\nWant our stories in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Soham Kamani</p><p>The single responsibility principle is one of the most tried-and-tested tenets of software design. Every module or class should do one thing, and do it well. We found this principle was applicable, and incredibly important, while designing our systems.</p><p>About a year ago, we released a new chat service (which we internally called <strong><strong>Icebreaker</strong></strong>). It allowed our users to communicate with drivers through the app itself, rather than use SMS (which cost both the driver and customer money).</p><p>However, all was not well. For numerous reasons, the service gave us a lot of issues and late night pagers. This post details the lessons we learnt, and some of the decisions we took to make this service more reliable.</p><h1 id=\"the-problem-s-\">The Problem(s)</h1><p>In a nutshell, Icebreaker depended on too many other services to function properly. Let‚Äôs look at some of the tasks Icebreaker performed in order to create a channel:</p><ol><li>Authorise the API call: This made a call to our authentication service.</li><li>Fetch the customer profile: This required an HTTP call to our customer service.</li><li>Fetch the drivers‚Äô profile: This required an HTTP call to our driver service.</li><li>Verify if the customer-driver pair are in an active order: This made a call to our active booking storage service.</li><li>Create the channel.</li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1304/1*oSRgws5JNm767tOTJfq7EA.png\" class=\"kg-image\"></figure><p><strong><strong>If any of these services failed, Icebreaker would fail as well.</strong></strong></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1304/1*tpBpiBUBVK-N0chl5fkLGQ.png\" class=\"kg-image\"><figcaption>Simultaneous dependence on multiple services ensures that the dependent service is less stable than any of them</figcaption></figure><p>Even if we could ensure 99% uptime for all services in question, that still means the chances of all of them being up at the same time was 96%.</p><p><code>P(icebreaker active) = P(customer service active) * P(driver service active) * P(authentication service active) * P(active booking storage active) = 0.99 * 0.99 * 0.99 * 0.99 ~= 0.96</code></p><p>This means our downtime has increased four times over (4%, as opposed to 1%).</p><h1 id=\"not-my-job\">Not my job</h1><p>When a service starts to do too many things, it‚Äôs bound to fail sooner or later. In this case, Icebreaker‚Äôs job was to create a channel between a customer and a driver. However, it was doing all this extra stuff: like authentication, verification, and profile retrieval. ü§¶‚Äç‚ôÇ</p><p>Let‚Äôs take a look at the changes we made to get rid of each dependency:</p><h2 id=\"authentication\">Authentication</h2><p>Every API call arriving to Icebreaker came with an API token which needed authentication. To solve this, we added a <a href=\"https://konghq.com/\" rel=\"noopener\">Kong</a> API gateway. This authenticated all requests and added information about the authenticated user within the API headers.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*2d7v8u_WVx7YDowNapZGNQ.png\" class=\"kg-image\"></figure><p>Now, every request arriving to Icebreaker was authenticated.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Tell, don‚Äôt ask. The requests coming from the API gateway told the service that they were authenticated, rather than Icebreaker having to ask another service.</em></em></em></blockquote><h2 id=\"profile-retrieval\">Profile retrieval</h2><p>In order to create a channel, we needed a piece of information called the ‚Äòchat token‚Äô for each user. This was stored in the customer service for the customer, and the driver service for the driver.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*dKBOVH4ODILeTSqgQIazcw.png\" class=\"kg-image\"></figure><p>Since Icebreaker was the only service using this token, we moved these tokens to it, and removed them from the customer and driver services.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*eXYrRFGNnEPqv0nvbwjbIA.png\" class=\"kg-image\"></figure><p>Now,Icebreaker had all the information it needed in its own database, which was a more reliable source of truth as compared to a whole other HTTP service.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: </em><em>If your service is the only one using any piece of information, it should reside within the service itself</em></em></em></blockquote><h1 id=\"active-booking-storage\">Active booking storage</h1><p>Icebreaker used to create a channel on-demand every time the user hit its channel creation API. This on-demand creation required us to verify that an active booking existed, for which the user needed to create a channel. After all, it didn‚Äôt make sense to create a channel when the parties involved did not have an order with each other.</p><p>To fix this, we moved to an asynchronous architecture for channel creation. Instead of on-demand channel creation, we made use of GO-JEKs <a href=\"https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929\" rel=\"noopener\">data pipeline</a>, that published events every time a booking was made. <strong><strong>Icebreaker now consisted of two components: the worker and the server.</strong></strong></p><ol><li>The worker consumed booking events every time they were made. It then created a channel between the customer and driver in the booking, and stored the channel information on a Redis cache.</li><li>The server served channel creation requests as before. Only, this time, the channels were already created and cached, along with the order number.<br></li></ol><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3283/1*hNR_iSrTKkyvUhwMviHX_g.png\" class=\"kg-image\"></figure><p>So, instead of on demand channel creation, the channels were created and stored beforehand. Since we were consuming booking events from our own data pipeline, there was no need to verify whether the booking was genuine or not.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Again, tell, don‚Äôt ask. The events coming from our data pipeline told Icebreaker that the bookings were genuine. This meant it could create the channel, instead of hitting a service to verify the authenticity of the booking.</em></em></em></blockquote><h1 id=\"results\">Results</h1><p>Now Icebreaker did only what it was truly meant to do: create channels.</p><p>Since we removed dependencies on most external systems, we no longer had to worry about one system failure causing Icebraker to malfunction. The load on the external services also reduced, since Icebreaker was no longer using their endpoints for channel creation.</p><p>Moving to the asynchronous architecture also led to a drastic reduction in response time, from ~200ms to ~10ms, since we were pre-creating and caching channels for every order.</p><p>The takeaways we got from this experience conform with the single responsibility principle. In the end, it‚Äôs always better to ask ourselves: <strong><strong><em><em>‚ÄúCan this service do less?‚Äù</em></em></strong></strong></p><hr><p>Want our stories in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">Sign up for our newsletter!</a><br></p>","url":"https://gojek-ghost.zysk.in/applying-the-single-responsibility-principle-to-microservices/","canonical_url":null,"uuid":"8bb46a92-34cc-4bf4-a26e-65dc26a77873","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2af8a7aa22c4066f83abe","reading_time":4}}]},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}}]}},"pageContext":{"slug":"tech","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}