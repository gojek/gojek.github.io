{"componentChunkName":"component---src-templates-tag-js","path":"/tag/culture/","result":{"data":{"ghostTag":{"slug":"culture","name":"Culture","visibility":"public","feature_image":null,"description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5eb128b6f7c7da001effcd8c","title":"Gojek’s Best Practices to Work From Home [Beta]","slug":"gojeks-best-practices-to-work-from-home-beta","featured":true,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_g1gfRNDqLKJWtAwURoFgaw.jpg","excerpt":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","custom_excerpt":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"16 March, 2020","updated_at_pretty":"02 June, 2020","created_at":"2020-05-05T14:19:58.000+05:30","published_at":"2020-03-16T09:30:00.000+05:30","updated_at":"2020-06-02T12:21:45.000+05:30","meta_title":"Gojek’s Best Practices to Work From Home [Beta]","meta_description":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Kevin Aluwi\n\nIt’s been a trying couple of weeks since the Coronavirus outbreak. As\ngovernments and authorities encourage social distancing, many companies — Gojek\nincluded — have started to put a heightened emphasis on working from home. As an\norganization with a distributed workforce, we have offices in Indonesia,\nSingapore, Vietnam, Thailand, Philippines, and India, a remote strategy has\nalways been embedded in our DNA. This post details some lessons and what we\nthink are ‘best practices’ to follow in a Work from home (WFH) situation.\n\nAt the outset, it’s important to call out a key point: During this time of\nuncertainty, employees may not be at their productive best. There’s a lot of\nanxiety with family and friends, and rightly so. WFH requires high \nAccountability, but also Empathy and Trust. Be mindful, this is a stressful time\nfor everyone. Trust your colleagues to do the best they can given the times.\n\nBefore we begin — context\nGojek has always been mindful of our employees’ health and wellbeing. We have\nunlimited sick leaves, and encourage employees to work where and when they are\nat their productive best. We have proven success — with functional leaders\nworking fully remotely without compromising on effectively launching org-wide\ninitiatives: career ladders, new hiring programs, even setting up an entire new\nfunction. But this is by all means not a comprehensive or a definitive guide.\nThink of this as a ‘beta’ document summarising some lessons in a bid to get\nfeedback from you, our readers. We’re putting this out there so we can learn\ntogether to do better.\n\nIf you think we’ve missed out on something, please leave a comment — will help\nus a long way in fine-tuning our own practices. These are trying times, and we\nwant to do what is right for everyone.\n\n(1)The right environment\nOffice spaces provide designated areas employees start associating with work and\nfocus. This may not be the case in a home environment, so it is important to\nrecreate this space. Some ideal prerequisites include an area with plenty of\nlight, minimal distractions and a comfortable desk and chair.\n\nWorking from home also potentially involves sharing the space with other family\nmembers / housemates. It’s important to set guidelines to indicate when you are\nat work and not to be disturbed — one team member for example set up a plush toy\non a desk as a makeshift ‘Do Not Disturb’ sign!\n\nOnce a setup is established, don’t neglect the importance of taking breaks. The\nabsence of colleagues and social interaction should not lead to long\nuninterrupted sessions. Set a timer to alert you if you’ve been continuously at\nyour desk for over two hours. Take short breaks to stretch your legs. Use the\ntime to also spend time with family, or work on personal projects that require\nthe occasional check-in! There’s a silver lining to every scenario :)\n\nThis whole point might seem obvious and rather trivial, but is critical when you\nwant focus, and don’t have your colleagues to ‘pair’ with you and nudge you.\n\n(2) The right tools\nEnsure the coordination tools used by your organisation / team are installed on\nyour laptop and working properly. At Gojek we use Slack for messaging, Zoom for\nvideo conferencing, and Asana and JIRA for project coordination. Here are a few\nquick tips from our WFH Best Practices\n[https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing] \non how best to use them in a remote work scenario:\n\nOver communicate: Set clear expectations and create WFH Rules of Engagement for\nyour team. What cadences need to be synchronous vs. async? Set your Slack status\nto away every time you leave the computer for a break, and update it once you’re\nback. Clearly request responses to critical communications you send, and do the\nsame to confirm you’ve received an update (even Slack’s emoji responses will do,\nas long as there is recorded acknowledgement).\n\nDocument everything: Meetings may become increasingly asynchronous, so it is\nimportant to document all the items discussed and assigned. Record key decisions\nin a centralized decision log. This can be done via written notes hosted in a\ncommon cloud folder, as well as tasks on Asana for accountability. Minimise\ncommunication gaps.\n\nChoose the most high-context communication medium available: A lot gets lost in\ntranslation when you don’t have visual cues. Use video conferencing whenever\npossible. Failing video, (spotty connection) default to a phone call, then chat.\nIn chat, don’t hesitate to use emojis liberally to convey your tone! ?\n\nPro tip: In Zoom preferences, set the option to video muted/off as the default —\nthen manually enable them once you join a meeting. It can help avoid a few\nfacepalms. Not everyone has the perfect Instagram workspace at home, so Zoom’s\nbackground masks\n[https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background] \nwill help.\n\n(3) The right mindset\nThe shift to remote will be alien for a lot of us. Be respectful and considerate\n— everyone’s doing the best they can. Set up core work hours when the entire\nteam is expected to be available and clearly define these on a calendar. Be\nmindful of each other’s calendars and schedule sensitively so all concerned\nparties can extract the maximum output from their workday.\n\nQuantify what is being done at the end of each day, and by whom. Transparency is\nkey here. You can shape this right at the beginning during daily team meetings.\nWhen social interactions with colleagues are virtual, you as a manager, or an\nemployer, tend to worry about accountability. Maintain a notepad of things you\ndid, what you’re working on, when others can expect work to be delivered, and\nwhen you will respond to messages or requests. This reduces anxiety and helps\nyou plan your day. In the midst of all this, don’t forget to respect your own\ntime as well. Define your working hours, and stop once they are up.\n\nIt’s equally easy to also overwork yourself when working from home. Be mindful\nof your on-screen time.\n\nSnackable hacks\nWe spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:\n\n * If you find your attention span dwindling, take time off, browse your\n   favorite social media app, go for a walk — get that Vitamin D in, talk to a\n   friend/family member etc…\n * Eat on time, eat healthy — set timelines for this on your calendar so you’re\n   not skipping meals.\n * Create a mini-team virtual group just for social interactions that do not\n   discuss work — movies, books, art, interesting articles etc.\n * Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you\n   eat. Do not sway here. Did we say hydrate? Hydrate.\n * Team calls should start with something fun — a new fact you learnt, an\n   interesting fact you learnt, or something interesting going on in team\n   member’s lives outside of work.\n * Change into a separate set of clothes during core working hours, even if they\n   are just a different set of comfortable PJs. It helps delineate “work time”\n   from “waking up” or “me time” when both are happening in the same place. It’s\n   tempting to work in bed while wearing the clothes you slept in, but avoid\n   this!\n * Your calendar is sacred — set timers for food breaks, leisure walks, time\n   off, family obligations etc.\n * Call out good work! Do this more often than usual and with consistency. Start\n   your meetings with kudos.\n\nWe’re trying to get better\nThis is an important shift in how organisations get work done. While this guide\nis a foundation to help us figure things out, we don’t have all the answers.\n\nIf you have significant experience with remote work\n[https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing]\n, we’d like to hear your thoughts. Feel free to drop into our comments.\n\nThat’s all from us for now, stay safe!\n\nP.S. Empathy & Trust — The two key words you want to keep in mind. ✌️","html":"<p>By Kevin Aluwi</p><p>It’s been a trying couple of weeks since the Coronavirus outbreak. As governments and authorities encourage social distancing, many companies — Gojek included — have started to put a heightened emphasis on working from home. As an organization with a distributed workforce, we have offices in Indonesia, Singapore, Vietnam, Thailand, Philippines, and India, a remote strategy has always been embedded in our DNA. This post details some lessons and what we think are ‘best practices’ to follow in a Work from home (WFH) situation.</p><p><em><em>At the outset, it’s important to call out a key point: During this time of uncertainty, employees may not be at their productive best. There’s a lot of anxiety with family and friends, and rightly so. WFH requires high </em></em><strong><strong><em><em>Accountability</em></em></strong></strong><em><em>, but also </em></em><strong><strong><em><em>Empathy</em></em></strong></strong><em><em> and </em></em><strong><strong><em><em>Trust</em></em></strong></strong><em><em>. Be mindful, this is a stressful time for everyone. Trust your colleagues to do the best they can given the times.</em></em></p><h3 id=\"before-we-begin-context\">Before we begin — context</h3><p>Gojek has always been mindful of our employees’ health and wellbeing. We have unlimited sick leaves, and encourage employees to work where and when they are at their productive best. <strong><strong>We have proven success</strong></strong> — with functional leaders working fully remotely without compromising on effectively launching org-wide initiatives: career ladders, new hiring programs, even setting up an entire new function. But this is by all means <strong><strong>not</strong></strong> a comprehensive or a definitive guide. Think of this as a ‘beta’ document summarising some lessons in a bid to get feedback from you, our readers. We’re putting this out there so we can learn together to do better.</p><p><em><em>If you think we’ve missed out on something, please leave a comment — will help us a long way in fine-tuning our own practices. These are trying times, and we want to do what is right for everyone.</em></em></p><h3 id=\"-1-the-right-environment\">(1)The right environment</h3><p>Office spaces provide designated areas employees start associating with work and focus. This may not be the case in a home environment, so it is important to recreate this space. Some ideal prerequisites include an area with plenty of light, minimal distractions and a comfortable desk and chair.</p><p>Working from home also potentially involves sharing the space with other family members / housemates. It’s important to set guidelines to indicate when you are at work and not to be disturbed — one team member for example set up a plush toy on a desk as a makeshift ‘Do Not Disturb’ sign!</p><p>Once a setup is established, don’t neglect the importance of taking breaks. The absence of colleagues and social interaction should not lead to long uninterrupted sessions. Set a timer to alert you if you’ve been continuously at your desk for over two hours. Take short breaks to stretch your legs. Use the time to also spend time with family, or work on personal projects that require the occasional check-in! There’s a silver lining to every scenario :)</p><p><strong><strong>This whole point might seem obvious and rather trivial, but is critical when you want focus, and don’t have your colleagues to ‘pair’ with you and nudge you.</strong></strong></p><h3 id=\"-2-the-right-tools\">(2) The right tools</h3><p>Ensure the coordination tools used by your organisation / team are installed on your laptop and working properly. At Gojek we use Slack for messaging, Zoom for video conferencing, and Asana and JIRA for project coordination. Here are a few quick tips from our <a href=\"https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing\" rel=\"noopener\">WFH Best Practices</a> on how best to use them in a remote work scenario:</p><p><strong><strong>Over communicate:</strong></strong> Set clear expectations and create WFH Rules of Engagement for your team. What cadences need to be synchronous vs. async? Set your Slack status to away every time you leave the computer for a break, and update it once you’re back. Clearly request responses to critical communications you send, and do the same to confirm you’ve received an update (even Slack’s emoji responses will do, as long as there is recorded acknowledgement).</p><p><strong><strong>Document everything:</strong></strong> Meetings may become increasingly asynchronous, so it is important to document all the items discussed and assigned. Record key decisions in a centralized decision log. This can be done via written notes hosted in a common cloud folder, as well as tasks on Asana for accountability. Minimise communication gaps.</p><p><strong><strong>Choose the most high-context communication medium available:</strong></strong> A lot gets lost in translation when you don’t have visual cues. Use <strong><strong>video</strong></strong> conferencing whenever possible. Failing video, (spotty connection) default to a phone call, then chat. In chat, don’t hesitate to use emojis liberally to convey your tone! ?</p><p><strong><strong><em><em>Pro tip:</em></em></strong></strong> In Zoom preferences, set the option to<strong><strong> video</strong></strong> <strong><strong>muted/off </strong></strong>as the default — then manually enable them once you join a meeting. It can help avoid a few facepalms. Not everyone has the perfect Instagram workspace at home, so <a href=\"https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background\" rel=\"noopener\">Zoom’s background masks</a> will help.</p><h3 id=\"-3-the-right-mindset\">(3) The right mindset</h3><p>The shift to remote will be alien for a lot of us. Be respectful and considerate — everyone’s doing the best they can. Set up core work hours when the entire team is expected to be available and clearly define these on a calendar. Be mindful of each other’s calendars and schedule sensitively so all concerned parties can extract the maximum output from their workday.</p><p>Quantify what is being done at the end of each day, and by whom. Transparency is key here. You can shape this right at the beginning during daily team meetings. When social interactions with colleagues are virtual, you as a manager, or an employer, tend to worry about accountability. Maintain a notepad of things you did, what you’re working on, when others can expect work to be delivered, and when you will respond to messages or requests. This reduces anxiety and helps you plan your day. In the midst of all this, don’t forget to respect your own time as well. Define your working hours, and stop once they are up.</p><p><em>It’s equally easy to also overwork yourself when working from home. Be mindful of your on-screen time.</em></p><h3 id=\"snackable-hacks\">Snackable hacks</h3><p>We spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:</p><ul><li>If you find your attention span dwindling, take time off, browse your favorite social media app, go for a walk — get that Vitamin D in, talk to a friend/family member etc…</li><li>Eat on time, eat healthy — set timelines for this on your calendar so you’re not skipping meals.</li><li>Create a mini-team virtual group just for social interactions that do not discuss work — movies, books, art, interesting articles etc.</li><li>Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you eat. Do not sway here. Did we say hydrate? Hydrate.</li><li>Team calls should start with something fun — a new fact you learnt, an interesting fact you learnt, or something interesting going on in team member’s lives outside of work.</li><li>Change into a separate set of clothes during core working hours, even if they are just a different set of comfortable PJs. It helps delineate “work time” from “waking up” or “me time” when both are happening in the same place. It’s tempting to work in bed while wearing the clothes you slept in, but avoid this!</li><li>Your calendar is sacred — set timers for food breaks, leisure walks, time off, family obligations etc.</li><li>Call out good work! Do this more often than usual and with consistency. Start your meetings with kudos.</li></ul><h3 id=\"we-re-trying-to-get-better\">We’re trying to get better</h3><p>This is an important shift in how organisations get work done. While this guide is a foundation to help us figure things out, we don’t have all the answers.</p><p>If you have significant experience with <a href=\"https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing\" rel=\"noopener\">remote work</a>, we’d like to hear your thoughts. Feel free to drop into our comments.</p><p>That’s all from us for now, stay safe!</p><p>P.S. Empathy &amp; Trust — The two key words you want to keep in mind. ✌️</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-1.png\" class=\"kg-image\"></figure>","url":"https://gojek-ghost.zysk.in/gojeks-best-practices-to-work-from-home-beta/","canonical_url":null,"uuid":"9c6ef422-8c4d-4d75-a8a4-420f3ab462e3","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128b6f7c7da001effcd8c","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2ca6c7aa22c4066f83b74","title":"From Novice to Code Master","slug":"from-novice-to-code-master","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ktwn_4xTyzI4onUAYxZd8Q.png","excerpt":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","custom_excerpt":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"16 September, 2019","updated_at_pretty":"02 June, 2020","created_at":"2020-05-18T23:18:28.000+05:30","published_at":"2019-09-16T23:47:00.000+05:30","updated_at":"2020-06-02T12:24:35.000+05:30","meta_title":"From Novice to Code Master","meta_description":"How employing the code kata practicing technique used at Gojek’s Bootcamp helps engineers hone their skills.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Ali Qornan\n\nHow does one become a master at something? Let’s take music as an example. It\nhelps to know the theory and to understand the mechanics of your instrument. It\nalso helps to have talent. Having a good partner to watch your back doesn’t hurt\neither. But there’s more to it.\n\nWhy are The Beatles [https://en.wikipedia.org/wiki/The_Beatles], who formed in\nLiverpool in 1960, considered one of the greatest bands in history\n[https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1]\n? Why doesn’t everyone else achieve the same level of success?\n\n> The difference between master and beginner is the amount of practice.\nThe Beatles applied the fundamentals they learned over and over again, using\nfeedback to get better every time. All told, they performed for 270 nights in\njust over a year-and-a-half. By the time they had their first taste of success\nin 1964, they had performed live an estimated 1,200 times. Most bands today\ndon’t perform that much in their entire career.\n\nThe 10,000 Hours rule\nIn the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at\nBerlin’s elite Academy of Music conducted a study\n[http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF]. With\nthe help of the Academy, they interviewed twelve expert pianists (8 men and 4\nwomen) and 12 amateurs (7 men and 5 women).\n\nThe amateurs never practiced more than about three hours a week over the course\nof their childhood, and by the age of twenty, they had totaled two thousand\nhours of practice. The experts, on the other hand, steadily increased their\npractice time every year, until by the age of twenty, they had reached ten\nthousand hours.\n\n> “To become a chess grandmaster also seems to take about ten years. (Only the\nlegendary Bobby Fisher got to that elite level in less than that amount of time:\nit took him nine years.) And what’s ten years? Well, it’s roughly how long it\ntakes to put in ten thousand hours of hard practice. Ten thousand hours is the\nmagic number of greatness.”\n> Malcolm Gladwell, in his book “Outliers: The Story of Success\n[http://amzn.to/wgo1hw]”\nThe interesting thing about that number, of course, is that ten thousand hours\nis an enormous amount of time. It’s all but impossible to reach that number all\nby yourself by the time you’re a young adult. This would require encouraging\nparents and some measure of wealth, which would avoid the need to hold down\nadditional jobs that would eat into valuable practice time.\n\nWhat Happens in the Software Industry\nIn the software industry, we take developers trained in theory and throw them\nstraight into the deep-end, working on a project with no real precedent to draw\nfrom. It’s like taking a group of kids to fight against the big gang in the\ntown. But that is not an issue because, in software engineering, we do our\npracticing on the job, and that’s why we make mistakes on the job. But at the\nend of the day, we want to be great while still managing the objectives. For\nthat purpose, we need to find ways of splitting the practice from the\nprofession. A practice method that is effective and without taking up too much\ntime.\n\n> This is where CodeKata comes in.\nThe CodeKata\nKata [https://en.wikipedia.org/wiki/Kata] is an exercise in Karate to execute a\nspecified series of a variety of moves, with stepping and turning, while\nattempting to maintain perfect form. It teaches the student about proper form\nand position to helped them visualize different scenarios for each motion and\ntechnique. Traditionally, kata is taught in stages. Previously learned kata are\nrepeated to show better technique or power as a student acquires knowledge and\nexperience. It is common for students to repeat every kata they have learned but\nat an improved level of quality.\n\nSandy Vs. SpongebobCodeKata is an attempt to bring this element of practice to software\ndevelopment. The intent behind CodeKata is similar to Karate Kata. Each is a\nshort exercise. It repeated multiple times, adding little improvements in each\ncycle. Some involve programming and can be coded in many different ways. Some\ninvolve thinking about the issues behind programming and design. These are\nunlikely to have a single correct answer.\n\n> Remember that the point of the kata is not arriving at the correct answer. The\npoint is the stuff you learn along the way. The goal is the practice, not the\nsolution.\nHow Is This Accomplished at Gojek?\nAt Gojek, there’s a program for employees called Engineering Bootcamp\n[https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9]\n. Basically, it is weeks of intense hands-on learning designed to unlearn and\nequip skills needed to be a world-class engineer.\n\nCore Engineering BootcampAt Bootcamp, the way coaches taught us (participants)\nis similar to CodeKata. We have a code drill session in the afternoon to solve\none problem by using Java. After the class ends, we solve the same problem again\nas homework in the evening using Ruby. There are many things we did in our code\ndrill session, that really helped us develop in CodeKata. Those are:\n\n1. Set Rules\nWe have rules called Non-Negotiable Etiquette. If you violate one of the rules,\nyou have to rm -rf your code and start it again from scratch. What is rm -rf? It\nis a basic command on Unix system to remove files or directories from the\nmachine forever.\n\nNon Negotiable Etiquette\nIf you violate one, rm -rf! never love your code </3\n\n\n--------------------------------------------------------------------------------\n\n 1.  Indentation and spacing between code constructs (classes/methods/specs)\n     must be consistent.\n 2.  Use only spaces (no tabs) for indentation.\n 3.  Newlines at end of file.\n 4.  Follow accepted naming conventions for your language/framework.\n 5.  Follow accepted naming file and Directory structure for your\n     language/framework.\n 6.  Use namespaces.\n 7.  No comments/Unused Code/Unused file/Unused folder must ever be checked in.\n 8.  Runtime environment should be consistent with IDE environment -  i.e there\n     should be no difference in running a build or a spec from your IDE and from\n     the command line.\n 9.  Use .gitignore.\n 10. Ensure there is a README.md that includes problem description, dev\n     environment setup, build instructions, and run instructions.\n 11. Test Driven Development (this should show in clear pattern in the commit\n     log - one spec, one code change per commit)\n\nCan you imagine the feeling when code that we wrote with blood and tears needs\nto be deleted for one small mistake? Is that acceptable?\n\n> Yes, you must not love your code.\nThat small mistake is not tolerable in production and even development. It could\ncause bugs, errors or other things that may become a bottleneck. But of course,\nwe don’t rm -rf in work 😂. It’s just a practice so that we don’t get overly\nattached to the code, remain careful about mistakes, and most importantly —\nmaintain quality.\n\n2. Practise Pair Programming\nAs the name implies, pair programming is where two developers work on one\nmachine. We only have a keyboard and a mouse for each pair. One developer acts\nas the driver who codes while the other serves as the observer who checks the\ncode being written, proofreads and spell-checks, and also figures out where to\ngo next. These roles can be switched at any time: the driver will then become\nthe observer and vice versa.\n\nPair Programming greatly helps us in CodeKata, because:\n\n * It’s harder to procrastinate. Working as a team means you can’t stop and\n   check your email, Slack, Facebook or WhatsApp every few minutes.\n * When someone shares a problem you are going through, you feel less defeated\n   and more positive about trying again.\n * Increases software quality without impacting much on time to deliver. It will\n   cost only 15% of the development time according to this study\n   [https://www.economist.com/technology-quarterly/2001/09/20/agility-counts].\n   But with increased quality comes big savings later in the project.\n\n3. Have a Short Cycle\nThe point of CodeKata is to get experience from practice. In order to achieve\nthat, we solve the same problem multiple times. We try different approaches and\nsolutions to experience each advantage and disadvantage. While we work on it, we\nalso try to add little improvements for every cycle. But sometimes, we can also\ntreat the cycle as an iteration of solving the problem.\n\nBecause CodeKata is a practicing method and not project development. It’s not\nsupposed to be worked on for the long run. For that reason, we only have 20–30\nmins for every cycle (sometimes even shorter).\n\nAfter the Mini Retro, we showcase our code to other participants in the class.\nWhy do we need to do it? Even though the whole class is working on the same\nproblem, we may interpret it differently and have hundreds of possible different\nsolutions. Doing a showcase will tell others about progress and approaches. It\nwill trigger a discussion and synchronize the context for everyone. At the end\nof the day, we will converge at the current best solution.\n\n> It’s similar to Agile Development. You deliver something to the customer as soon\nas possible to get feedback faster.\nA Few Final Thoughts\nMy tips for CodeKata are:\n\n * Find a place and time where you won’t be interrupted.\n * Focus on the essential elements of the Kata.\n * Remember to look for feedback for every major decision\n * If it helps, keep a journal of your progress\n * Have discussion groups with other developers, but try to have completed the\n   kata first\n\nCore Engineering BootcampThank you for reading this blog! Hope you found it\nhelpful. Cheers! 🙂\n\nIf you’d like our updates to reach your inbox directly, subscribe to our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Ali Qornan</p><p>How does one become a master at something? Let’s take music as an example. It helps to know the theory and to understand the mechanics of your instrument. It also helps to have talent. Having a good partner to watch your back doesn’t hurt either. But there’s more to it.</p><p>Why are <a href=\"https://en.wikipedia.org/wiki/The_Beatles\" rel=\"noopener\">The Beatles</a>, who formed in Liverpool in 1960, considered one of <a href=\"https://www.quora.com/Why-are-The-Beatles-the-greatest-band-in-history/answer/Giliana-P-Garc%C3%ADa-Acevedo-1\" rel=\"noopener\">the greatest bands in history</a>? Why doesn’t everyone else achieve the same level of success?</p><blockquote>The difference between master and beginner is the amount of practice.</blockquote><p>The Beatles applied the fundamentals they learned over and over again, using feedback to get better every time. All told, they performed for 270 nights in just over a year-and-a-half. By the time they had their first taste of success in 1964, they had performed live an estimated 1,200 times. Most bands today don’t perform that much in their entire career.</p><h3 id=\"the-10-000-hours-rule\">The 10,000 Hours rule</h3><p>In the early 1990s, psychologist K. Anders Ericsson and two of his colleagues at Berlin’s elite Academy of Music conducted a <a href=\"http://projects.ict.usc.edu/itw/gel/EricssonDeliberatePracticePR93.PDF\" rel=\"noopener\">study</a>. With the help of the Academy, they interviewed twelve expert pianists (8 men and 4 women) and 12 amateurs (7 men and 5 women).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/912/1*XesRz3d5FMCzIOfm7Yk3hA.png\" class=\"kg-image\"></figure><p>The amateurs never practiced more than about three hours a week over the course of their childhood, and by the age of twenty, they had totaled two thousand hours of practice. The experts, on the other hand, steadily increased their practice time every year, until by the age of twenty, they had reached ten thousand hours.</p><blockquote><em><em>“To become a chess grandmaster also seems to take about ten years. (Only the legendary Bobby Fisher got to that elite level in less than that amount of time: it took him nine years.) And what’s ten years? Well, it’s roughly how long it takes to put in ten thousand hours of hard practice. <strong><strong>Ten thousand hours</strong></strong> is the magic number of greatness.”</em></em></blockquote><blockquote><em><em>Malcolm Gladwell, in his book “<a href=\"http://amzn.to/wgo1hw\" rel=\"noopener\"><em>Outliers: The Story of Success</em></a><em>”</em></em></em></blockquote><p>The interesting thing about that number, of course, is that ten thousand hours is an enormous amount of time. It’s all but impossible to reach that number all by yourself by the time you’re a young adult. This would require encouraging parents and some measure of wealth, which would avoid the need to hold down additional jobs that would eat into valuable practice time.</p><h3 id=\"what-happens-in-the-software-industry\">What Happens in the Software Industry</h3><p>In the software industry, we take developers trained in theory and throw them straight into the deep-end, working on a project with no real precedent to draw from. It’s like taking a group of kids to fight against the big gang in the town. But that is not an issue because, in software engineering, we do our practicing on the job, and that’s why we make mistakes on the job. But at the end of the day, we want to be great while still managing the objectives. For that purpose, we need to find ways of splitting the practice from the profession. A practice method that is effective and without taking up too much time.</p><blockquote><em><em>This is where CodeKata comes in.</em></em></blockquote><h3 id=\"the-codekata\">The CodeKata</h3><p><a href=\"https://en.wikipedia.org/wiki/Kata\" rel=\"noopener\"><strong><strong>Kata</strong></strong></a> is an exercise in Karate to execute a specified series of a variety of moves, with stepping and turning, while attempting to maintain perfect form. It teaches the student about proper form and position to helped them visualize different scenarios for each motion and technique. Traditionally, kata is taught in stages. Previously learned kata are repeated to show better technique or power as a student acquires knowledge and experience. It is common for students to repeat every kata they have learned but at an improved level of quality.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/670/1*icPku4JdhwTHMvyV7uPLZw.gif\" class=\"kg-image\"><figcaption>Sandy Vs. Spongebob</figcaption></figure><p><strong><strong>CodeKata</strong></strong> is an attempt to bring this element of practice to software development. The intent behind CodeKata is similar to Karate Kata. Each is a short exercise. It repeated multiple times, adding little improvements in each cycle. Some involve programming and can be coded in many different ways. Some involve thinking about the issues behind programming and design. These are unlikely to have a single correct answer.</p><blockquote>Remember that the point of the kata is not arriving at the correct answer. The point is the stuff you learn along the way. The goal is the practice, not the solution.</blockquote><h3 id=\"how-is-this-accomplished-at-gojek\">How Is This Accomplished at Gojek?</h3><p>At Gojek, there’s a program for employees called <a href=\"https://blog.gojekengineering.com/what-is-the-go-jek-engineering-bootcamp-de7778836da9\" rel=\"noopener\">Engineering Bootcamp</a>. Basically, it is weeks of intense hands-on learning designed to unlearn and equip skills needed to be a world-class engineer.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3840/1*uo6NJ-s_43bjcY2V_JDSPQ.jpeg\" class=\"kg-image\"><figcaption>Core Engineering Bootcamp</figcaption></figure><p>At Bootcamp, the way coaches taught us (participants) is similar to CodeKata. We have a code drill session in the afternoon to solve one problem by using Java. After the class ends, we solve the same problem again as homework in the evening using Ruby. There are many things we did in our code drill session, that really helped us develop in CodeKata. Those are:</p><h3 id=\"1-set-rules\">1. Set Rules</h3><p>We have rules called <strong><strong>Non-Negotiable Etiquette</strong></strong>. If you violate one of the rules, you have to <em><em>rm -rf</em></em> your code and start it again from scratch. What is <em><em>rm -rf</em></em>? It is a basic command on Unix system to remove files or directories from the machine forever.</p><h3 id=\"non-negotiable-etiquette\">Non Negotiable Etiquette</h3><p>If you violate one, rm -rf! never love your code &lt;/3</p><hr><ol><li>Indentation and spacing between code constructs (classes/methods/specs) must be consistent.</li><li>Use only spaces (no tabs) for indentation.</li><li>Newlines at end of file.</li><li>Follow accepted naming conventions for your language/framework.</li><li>Follow accepted naming file and Directory structure for your language/framework.</li><li>Use namespaces.</li><li>No comments/Unused Code/Unused file/Unused folder must ever be checked in.</li><li>Runtime environment should be consistent with IDE environment -  i.e there should be no difference in running a build or a spec from your IDE and from the command line.</li><li>Use .gitignore.</li><li>Ensure there is a README.md that includes problem description, dev environment setup, build instructions, and run instructions.</li><li>Test Driven Development (this should show in clear pattern in the commit log - one spec, one code change per commit)</li></ol><p>Can you imagine the feeling when code that we wrote with blood and tears needs to be deleted for one small mistake? Is that acceptable?</p><blockquote>Yes, you must not love your code.</blockquote><p>That small mistake is not tolerable in production and even development. It could cause bugs, errors or other things that may become a bottleneck. But of course, we don’t <em><em>rm -rf</em></em> in work 😂. It’s just a practice so that we don’t get overly attached to the code, remain careful about mistakes, and most importantly — maintain quality.</p><h3 id=\"2-practise-pair-programming\">2. Practise Pair Programming</h3><p>As the name implies, pair programming is where two developers work on one machine. We only have a keyboard and a mouse for each pair. One developer acts as the driver who codes while the other serves as the observer who checks the code being written, proofreads and spell-checks, and also figures out where to go next. These roles can be switched at any time: the driver will then become the observer and vice versa.</p><p>Pair Programming greatly helps us in CodeKata, because:</p><ul><li>It’s harder to procrastinate. Working as a team means you can’t stop and check your email, Slack, Facebook or WhatsApp every few minutes.</li><li>When someone shares a problem you are going through, you feel less defeated and more positive about trying again.</li><li>Increases software quality without impacting much on time to deliver. It will cost only 15% of the development time according to this <a href=\"https://www.economist.com/technology-quarterly/2001/09/20/agility-counts\" rel=\"noopener\">study</a>. But with increased quality comes big savings later in the project.</li></ul><h3 id=\"3-have-a-short-cycle\">3. Have a Short Cycle</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/982/1*14PeUCfZheM8mK7xm6FL8w.png\" class=\"kg-image\"></figure><p>The point of CodeKata is to get experience from practice. In order to achieve that, we solve the same problem multiple times. We try different approaches and solutions to experience each advantage and disadvantage. While we work on it, we also try to add little improvements for every cycle. But sometimes, we can also treat the cycle as an iteration of solving the problem.</p><p>Because CodeKata is a practicing method and not project development. It’s not supposed to be worked on for the long run. For that reason, we only have 20–30 mins for every cycle (sometimes even shorter).</p><p>After the Mini Retro, we showcase our code to other participants in the class. Why do we need to do it? Even though the whole class is working on the same problem, we may interpret it differently and have hundreds of possible different solutions. Doing a showcase will tell others about progress and approaches. It will trigger a discussion and synchronize the context for everyone. At the end of the day, we will converge at the current best solution.</p><blockquote>It’s similar to Agile Development. You deliver something to the customer as soon as possible to get feedback faster.</blockquote><h3 id=\"a-few-final-thoughts\">A Few Final Thoughts</h3><p>My tips for CodeKata are:</p><ul><li>Find a place and time where you won’t be interrupted.</li><li>Focus on the essential elements of the Kata.</li><li>Remember to look for feedback for every major decision</li><li>If it helps, keep a journal of your progress</li><li>Have discussion groups with other developers, but try to have completed the kata first</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/4240/1*53r0Npq_Thb0R0saRF08Rg.jpeg\" class=\"kg-image\"><figcaption>Core Engineering Bootcamp</figcaption></figure><p>Thank you for reading this blog! Hope you found it helpful. Cheers! 🙂</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-2.png\" class=\"kg-image\"></figure><p>If you’d like our updates to reach your inbox directly, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">subscribe to our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/from-novice-to-code-master/","canonical_url":null,"uuid":"06de3753-36ed-4718-9680-03c9d7eb4e09","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca6c7aa22c4066f83b74","reading_time":7}},{"node":{"id":"Ghost__Post__5eb128bef7c7da001effcd90","title":"From Charts to Code","slug":"from-charts-to-code","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_KJpSDpPskCA7V82Skkdxjg.jpg","excerpt":"The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.","custom_excerpt":"The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"08 September, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:20:06.000+05:30","published_at":"2019-09-08T09:30:00.000+05:30","updated_at":"2020-05-12T11:53:32.000+05:30","meta_title":null,"meta_description":"The story of a business analyst who switched roles to become a product engineer, and the lessons he learned on the way.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Carlos Arcenas\n\nPicture this: you’re several months into a position at one of the world’s\nfastest growing and innovative companies. You know that the work you do helps\nimpact the lives of thousands of people across Southeast Asia. You’re good at\nwhat you do — but you’re unsatisfied. On a personal level, the work doesn’t \nexcite you anymore.\n\nYou’re looking to hit the restart button on your career.\n\nThat’s how I felt after a stint as a business analyst. The work and the people\nwere great, but I wasn’t fully satisfied with what I was doing, and wanted to\nsupport the company in a different capacity. Luckily, thanks to Gojek’s internal\ntransfer programs, the entire organisation was open to me. From roles in product\nmanagement in Business Intelligence (they’re\n[https://www.gojek.io/all-open-positions?d=product&t=product-management&p=40f69246-2821-4a01-a359-64b5b6bf3b02] \n hiring\n[https://www.gojek.io/all-open-positions?d=product&t=product-management&p=e707ab22-f28f-45a7-9130-4c036ca5da91]\n!) to product and performance analysis in GoFood, I was definitely spoiled for\nchoice.\n\nHowever, thanks to the stream of articles coming from this very blog, I found\nmyself yearning to enter Gojek’s vast Engineering and Product Development (EPD)\ngroup. Having that kind of impact across Southeast Asia and getting to work with\nextremely talented engineers really appealed to me, and I felt I could make a\ngood contribution.\n\nBut before I could make my move, I had to make sure I knew what I was getting\ninto. Was my desire to move rising out of discontent, or something that could be\neasily resolved? If I could even get into EPD, what would I be working on?\n\nWould I even enjoy my new position, or find myself pining for something new\nagain? Would all my efforts have been for naught?\n\nThis post is for anyone in a similar situation, and lists things to consider\nbefore taking the leap:\n\nDiscern your motivation\nTake time to introspect, and pick apart your motivations. What’s driving your\ndecision to move? Are you unsatisfied with your current job? Do you have issues\nwith your role, your team, your boss? Are you looking for a new adventure in a\nbrand new area? Are you ready to put in time outside of work to train yourself\nfor the new position?\n\nAsking yourself these pointed questions can help define what you really yearn\nfor, and outline how to get there. Which brings us to the next point.\n\nFind your niche\nCheck your company’s job listings online to understand what they’re looking for.\nRead them thoroughly to understand the skills you need before applying. Are\nthere positions available for entry-level engineers? If so, prioritise these\npositions, as they require less programming experience, and provide a\nspringboard for you to supercharge your growth as an engineer.\n\nTalk to engineers\nThe biggest advantage of moving internally is you already have access to many of\nyour (potentially) future peers. Have a casual conversation with your company’s\ndevelopers to understand the expectations of the job. Use this as an opportunity\nto go beyond the job description — to really understand what it’s like working\nin your desired position. What technologies do they use on a day-to-day basis?\nDo they have to work odd hours? What’s the career path like? We don’t bite! (We\ndo love bytes, though!) ?\n\nBy this stage, I had become confident in my choice to jump to the Engineering\ndivision. I decided I wanted a new adventure to head on, established a niche I\ncould aim for, and did the groundwork. But the big challenge lay ahead:\n\nHow would I accomplish the jump? I knew Gojek had (and still has) high\nexpectations for anyone who wants to join the division.\n\nThe comforting factor was that Gojek is incredibly open to anybody who can prove\nthemselves. Many successful engineers in Gojek made jumps like the one I wanted\nto make, and some of them had no formal training in computer science or software\ndevelopment! If anything, that was proof that anybody who strove and acted had a\nshot at success.\n\nNow that you’ve made your choice: here are some tips to help propel you forward\nin tech as a beginner:\n\nUpgrade your skills:\nNow that you know what skills your desired position requires on a daily basis,\nit’s time to put in the hours training up. There are countless guides on the\nInternet for every technology under the Sun, so pick one and follow it through!\nDon’t forget to do the exercises included, and work on pet projects to really\nhone in on what you’ve just learned. Remember: practice makes perfect!\n\nJoin company training programs:\nAside from taking up personal projects, look around to see if your company has\nset up training and development programs. These would be directly aligned with\nwhat your company is looking for in engineers, and offer a framework for you to\ngrow with. In Gojek, we’re lucky to have two major programs:\n\n * The Gojek Tech Bootcamp. Designed for fresh grads taking on an entry-level\n   position in EPD across all divisions, the Bootcamp helps accelerate the\n   growth of would-be engineers through full immersion — the philosophy, the\n   practices, the works.\n * The GoAcademy program. Intended for anyone in the company looking for a\n   structured way to grow in areas from data analysis and visualisation to\n   personal wellness, GoAcademy sets up tutorials led by experienced engineers,\n   fully contextualised to meet the needs of GoTroops from different teams and\n   fields.\n\nContribute to open-source:\nIf you don’t have enough experience to meet the requirements of your desired\nposition, fret not! Look into contributing to open-source projects to level up.\nContributing to open source works very much like contributing to a product team.\nYou’ll be working on real bugs reported by users, or even proposing your own\nfeatures to implement. The biggest open-source projects have vibrant communities\nthat are very welcoming of newcomers — some even have bugs specifically marked\nfor solving by new developers!\n\nThe benefits of working on open-source only increases if you can find and\ncontribute to projects launched by your own company. (You can find a list of\nwhat Gojek has contributed so far over here [https://github.com/gojek].) You’ll\nget to showcase your collaboration and problem-solving skills to your future\nfellow engineers — all before sending in an application!\n\nBonus point: should you contribute using GitHub, GitLab, or any public tool,\nyou’ll have a portfolio ready to link to and show around!\n\nTalk to tech leads and product managers:\nMuch like talking to engineers, speaking with tech leads and product managers\nwill give you a sense of what the job would be like, but on a higher level. Use\nthis opportunity to ask about the current state of the team, the obstacles\nthey’re facing, and future of the product. Position yourself in their eyes as\nsomeone who is ready to learn and contribute — you’ll be making your mark before\nyou even have a formal interview!\n\nAs for me, I’m now a Product Engineer, part of Gojek’s Operations Platform,\nworking on our internal service product and helping maintain our customer\nsupport platform. It’s been almost a year since I made the decision to switch\nroles, and I’m glad to say that, even though it took several months to find a\nrole that met my desires and the needs of the company, I’ve found a place where\nI can grow and contribute to Gojek.\n\nWhile my new world is far removed from the spreadsheets and queries of my old\none, the skills I honed back then remain incredibly relevant and essential to my\nnew duties. The eye for numbers and detail I developed has been crucial for\nspotting points of improvement in development. The communication skills I gained\nfrom presenting to higher-ups has helped me describe my ideas clearly. My time\nas a business analyst was not a waste in the least bit — in fact, it helped me\ntowards faster growth and success in my new role.\n\nIf you’re in a similar position and contemplating changing roles, I hope this\narticle has helped in the decision process. ?\n\n\n--------------------------------------------------------------------------------\n\nWant our updates to appear in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Carlos Arcenas</p><p>Picture this: you’re several months into a position at one of the world’s fastest growing and innovative companies. You know that the work you do helps impact the lives of thousands of people across Southeast Asia. You’re good at what you do — but you’re unsatisfied. On a personal level, the work doesn’t <em><em>excite</em></em> you anymore.</p><p><em><em>You’re looking to hit the restart button on your career.</em></em></p><p>That’s how I felt after a stint as a business analyst. The work and the people were great, but I wasn’t fully satisfied with what I was doing, and wanted to support the company in a different capacity. Luckily, thanks to Gojek’s internal transfer programs, the entire organisation was open to me. From roles in product management in Business Intelligence (<a href=\"https://www.gojek.io/all-open-positions?d=product&amp;t=product-management&amp;p=40f69246-2821-4a01-a359-64b5b6bf3b02\" rel=\"noopener\">they’re</a> <a href=\"https://www.gojek.io/all-open-positions?d=product&amp;t=product-management&amp;p=e707ab22-f28f-45a7-9130-4c036ca5da91\" rel=\"noopener\">hiring</a>!) to product and performance analysis in GoFood, I was definitely spoiled for choice.</p><p>However, thanks to the stream of articles coming from this very blog, I found myself yearning to enter Gojek’s vast Engineering and Product Development (EPD) group. Having that kind of impact across Southeast Asia and getting to work with extremely talented engineers really appealed to me, and I felt I could make a good contribution.</p><p>But before I could make my move, I had to make sure I knew what I was getting into. Was my desire to move rising out of discontent, or something that could be easily resolved? If I could even get into EPD, what would I be working on?</p><p><em><em>Would I even enjoy my new position, or find myself pining for something new again? Would all my efforts have been for naught?</em></em></p><p>This post is for anyone in a similar situation, and lists things to consider before taking the leap:</p><h1 id=\"discern-your-motivation\">Discern your motivation</h1><p>Take time to introspect, and pick apart your motivations. What’s driving your decision to move? Are you unsatisfied with your current job? Do you have issues with your role, your team, your boss? Are you looking for a new adventure in a brand new area? Are you ready to put in time outside of work to train yourself for the new position?</p><p>Asking yourself these pointed questions can help define what you really yearn for, and outline how to get there. Which brings us to the next point.</p><h1 id=\"find-your-niche\"><strong>Find your niche</strong></h1><p>Check your company’s job listings online to understand what they’re looking for. Read them thoroughly to understand the skills you need before applying. Are there <em><em>positions available for entry-level engineers</em></em>? If so, <strong><strong>prioritise these positions,</strong></strong> as they require less programming experience, and provide a springboard for you to supercharge your growth as an engineer.</p><h1 id=\"talk-to-engineers\"><strong>Talk to engineers</strong></h1><p>The biggest advantage of moving internally is you already have access to many of your (potentially) future peers. Have a casual conversation with your company’s developers to understand the expectations of the job. Use this as an opportunity to go beyond the job description — to really understand what it’s like working in your desired position. What technologies do they use on a day-to-day basis? Do they have to work odd hours? What’s the career path like? We don’t bite! (We do love <em><em>bytes</em></em>, though!) ?</p><p>By this stage, I had become confident in my choice to jump to the Engineering division. I decided I wanted a new adventure to head on, established a niche I could aim for, and did the groundwork. But the big challenge lay ahead:</p><p>How <em>would </em>I accomplish the jump? I knew Gojek had (and still has) high expectations for anyone who wants to join the division.</p><p>The comforting factor was that Gojek is incredibly open to anybody who can prove themselves. Many successful engineers in Gojek made jumps like the one I wanted to make, and some of them had no formal training in computer science or software development! If anything, that was proof that anybody who strove and acted had a shot at success.</p><p><em><em><em>Now that you’ve made your choice: here are some tips to help propel you forward in tech as a beginner:</em></em></em></p><h2 id=\"upgrade-your-skills-\"><strong>Upgrade your skills:</strong></h2><p>Now that you know what skills your desired position requires on a daily basis, it’s time to put in the hours training up. There are countless guides on the Internet for every technology under the Sun, so pick one and follow it through! Don’t forget to do the exercises included, and work on pet projects to really hone in on what you’ve just learned. Remember: practice makes perfect!</p><h2 id=\"join-company-training-programs-\"><strong>Join company training programs:</strong></h2><p>Aside from taking up personal projects, look around to see if your company has set up training and development programs. These would be directly aligned with what your company is looking for in engineers, and offer a framework for you to grow with. In Gojek, we’re lucky to have two major programs:</p><ul><li>The Gojek Tech Bootcamp. Designed for fresh grads taking on an entry-level position in EPD across all divisions, the Bootcamp helps accelerate the growth of would-be engineers through full immersion — the philosophy, the practices, the works.</li><li>The GoAcademy program. Intended for anyone in the company looking for a structured way to grow in areas from data analysis and visualisation to personal wellness, GoAcademy sets up tutorials led by experienced engineers, fully contextualised to meet the needs of GoTroops from different teams and fields.</li></ul><h2 id=\"contribute-to-open-source-\"><strong>Contribute to open-source:</strong></h2><p>If you don’t have enough experience to meet the requirements of your desired position, fret not! Look into contributing to <em><em>open-source projects</em></em> to level up. Contributing to open source works very much like contributing to a product team. You’ll be working on real bugs reported by users, or even proposing your own features to implement. The biggest open-source projects have vibrant communities that are very welcoming of newcomers — some even have bugs <em><em>specifically marked for solving by new developers</em></em>!</p><p>The benefits of working on open-source only increases if you can find and contribute to projects launched by your own company. (You can find a list of what Gojek has contributed so far over <a href=\"https://github.com/gojek\" rel=\"noopener\">here</a>.) You’ll get to showcase your collaboration and problem-solving skills to your future fellow engineers — all before sending in an application!</p><p><em><em>Bonus point: should you contribute using GitHub, GitLab, or any public tool, you’ll have a portfolio ready to link to and show around!</em></em></p><h2 id=\"talk-to-tech-leads-and-product-managers-\"><strong>Talk to tech leads and product managers:</strong></h2><p>Much like talking to engineers, speaking with tech leads and product managers will give you a sense of what the job would be like, but on a higher level. Use this opportunity to ask about the current state of the team, the obstacles they’re facing, and future of the product. Position yourself in their eyes as someone who is ready to learn and contribute — you’ll be making your mark before you even have a formal interview!</p><p>As for me, I’m now a Product Engineer, part of Gojek’s Operations Platform, working on our internal service product and helping maintain our customer support platform. It’s been almost a year since I made the decision to switch roles, and I’m glad to say that, even though it took several months to find a role that met my desires and the needs of the company, I’ve found a place where I can grow and contribute to Gojek.</p><p>While my new world is far removed from the spreadsheets and queries of my old one, the skills I honed back then remain incredibly relevant and essential to my new duties. The eye for numbers and detail I developed has been crucial for spotting points of improvement in development. The communication skills I gained from presenting to higher-ups has helped me describe my ideas clearly. My time as a business analyst was not a waste in the least bit — in fact, it helped me towards faster growth and success in my new role.</p><p>If you’re in a similar position and contemplating changing roles, I hope this article has helped in the decision process. ?</p><hr><p>Want our updates to appear in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/from-charts-to-code/","canonical_url":null,"uuid":"faaf57b7-f76d-489f-ad0b-0edf614f094c","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128bef7c7da001effcd90","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2ca737aa22c4066f83b78","title":"The Story of My Gojek Internship","slug":"the-story-of-my-gojek-internship","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_8RjlIWbn2EYI3fdzy-8HqA.jpeg","excerpt":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","custom_excerpt":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"04 July, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:18:35.000+05:30","published_at":"2019-07-04T09:30:00.000+05:30","updated_at":"2020-05-18T23:56:40.000+05:30","meta_title":null,"meta_description":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Abhishek Kumar\n\nPrologue\nAugust 2018\n\nI had just completed my first semester at IIM Ahmedabad. As the Summer\nPlacements semester got going in full swing, I decided to pursue an internship\nin the Product Management domain.\n\nWhen someone asked me: “Which is your dream company?”, I was not sure. I\nrealised that although there were renowned names coming on campus, for some\nreason, I wanted something more exciting.\n\nAfter days of pondering, I decided to apply off campus. A list was compiled, and\nthe options trickled down to three: Google, LinkedIn and Gojek! Thankfully,\nGojek had a PM internship opening. I applied, interviews went well and I was\nextended an offer at the Bangalore office.\n\nChapter 1: Documentation\n1st April 2019\n\nI reached the office full of enthusiasm, ready to make a mark of my own. The\nwhole day went in different formalities and it was almost evening when I got to\nmeet my team. To my surprise, by the end of the day, I was part of all relevant\ncommunication channels, team drives and had clarity on what I would work on for\nthe next four weeks.\n\nI just loved the agility shown by my manager to enable me to embark on my\njourney. In the process, I also realised why my undergrad friends working at\nGojek used to say that if you love speed, this is the place to be.\n\nThe next few days were spent understanding the product, people, and culture. I\nwas surprised by the volume and quality of the documentation done at the\ncompany. For a company which prides itself in being one of the fastest growing\nstartups in the world, this kind of emphasis on documentation was something\nunheard of. And because of these hundreds of beautifully crafted documents, by\nthe end of the first week itself, I was participating in their BAU (Business As\nUsual) meetings. (How many interns can claim this? 😜)\n\nChapter 2: Reading\n15th April 2019\n\nI was no longer a newbie in the company. I was having 1:1s with different\nstakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and\nworking tirelessly on my dedicated projects.\n\nDuring the course of these all, one day I reached out to my mentor for\nsuggestions on how to prioritise among different features. This was his\nresponse:\n\n> “Read Abhishek, Read. What differentiates a good Product Manager from an average\none is his/her willingness to learn, and reading is the first and most important\nstep there.”\nHe gave me different links to read, (37 to be precise) which ranged from Product\nPrioritization, Product Design, Product Critique, Design Heuristics and even the\nPsychology involved in product success. As I pored through them, I realised\nProduct Management is not as random as it seems from outside. In fact, it is a\nfine cocktail of art and science mixed in just the right proportion.\n\nChapter 3: Inclusion\n23rd April 2019\n\nBy this point, I had completed my first project, got positive feedback, and was\nabout to finish the second. In the meantime, being a part of so many BAU\nmeetings had boosted my confidence and now I was chipping in with suggestions.\n\nDuring one such meetings, I raised a point in contradiction to what the other\nteam was saying. I tried to explain my point of view but we were not able to\ncome to an agreement. When I came out, I realised that I should have dealt with\nthe situation differently. I went to my mentor and explained as much.\n\n> To this, he said: “Sometimes it’s not only about how you or your team is looking\nat things. You also have to look at what is the value proposition of other teams\ninvolved”\nThis was the second important lesson which I learnt: being a PM your job is to\nfirst bring everyone at the table to a common ground before pushing any agenda. \nWhether it is inter-team or intra-team, to get the job done, you have to bring\npeople to your side by understanding what they want and why they want it.\n\nChapter 4: Relevance\n30th April 2019\n\nI had just finished my second project when I met a senior engineer while passing\nthrough the pantry area. He asked how it’s going and what I was working on. I,\nwith full excitement, told him many ideas I came up with.\n\nAnd then he said: “Man, it doesn’t matter how cool the ideas are or how great\nthey sound. Judge them on their relevance. Are they correctly solving the\nproblem intended? Are they adding value to the lives of relevant stakeholders?”\nAnd then he gave me a set of 10 similar questions and said that if after\nanswering these 10 questions, you still believe you should implement the idea, \nthen it matters.\n\nChapter 5: Impact\n7th May 2019\n\nI had started understanding the nitty-gritty of product management and was\nraring to pick a more challenging project. And then I got this mail from my\nmanager:\n\nReally??? After such nice product & strategy based projects, this is what you\nwant me to do!!\n\n> But again, that was my inexperience talking.\nDuring the course of the next week, I learnt one more valuable lesson: “Look at\nthe impact of your work, not how cool it sounds. Being a PM, the world is your\ndomain and processes are as important as the product itself. If you want your\nproduct to succeed, you need to oil the whole machinery.”\n\nRecently, I came to know that a senior PM found the document to be super good\nand now it is being used across the substreams to onboard new hires. (I’m\nallowed one humblebrag right? 😅)\n\nChapter 6: Communication\n21st May 2019\n\nThe changing weather of Bangalore had hit me hard and I had to take a leave\nowing to ill health. I sent a message each to my manager and mentor regarding\nthe same. My mentor replied asking me to inform the whole team, which I missed\nand read quite late. When I did, I figured I am an intern anyway, and don’t have\nany current projects with the team. Even if I don’t send the mail to them, it\ndoesn’t matter much.\n\nWhen I met my mentor the next day, he asked why I didn’t send the mail, and I\nexplained why. He said: “Abhishek, it doesn’t matter whether you have a current\nproject with the team or not. Being a PM, one of the most important skills is\nbeing very clear in communication. There might be situations where you wouldn’t\neven know and people would be waiting for you. Not only in this case, but in\nevery everything you do, a PM needs to be a clear and careful communicator.”\n\nChapter 7: Ownership\n24th May 2019\n\nMy internship was nearing it’s end, and I reached out to my mentor for some\nsuggestions on the last project I was working on. During our conversation, he\nasked if my previous one had gone live in production. I said no, but clarified\nthat my part is done and it is stuck on other collaborating teams.\n\nThat’s when I realised I had one last lesson left to learn:\n\n> “Being a PM it’s your job to get it from conception to production. If there are\nblockers, you have to proactively reach out to remove them. Being a PM is a\ntricky job, once you have dirtied your hand, the onus comes on you to get it to\ncompletion.”\n> “Once you have picked up something — It’s All Yours.”\nEpilogue\nToday, when I look back, my internship at Gojek was a short, but sweet journey\nwhich taught me many lessons. As I go back for my second year at IIMA, I am much\nmore confident when it comes to Product Management.\n\n\n--------------------------------------------------------------------------------\n\nSpecial thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit\nSrivastava, and all the members of the Transport team who were always ready to\nhelp me during the course of my journey.\n\n\n--------------------------------------------------------------------------------\n\nWant more updates on how we build scalable systems for Southeast Asia’s\n#SuperApp? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Abhishek Kumar</p><h1 id=\"prologue\">Prologue</h1><p><strong><strong>August 2018</strong></strong></p><p>I had just completed my first semester at IIM Ahmedabad. As the Summer Placements semester got going in full swing, I decided to pursue an internship in the Product Management domain.</p><p>When someone asked me: “Which is your dream company?”, I was not sure. I realised that although there were renowned names coming on campus, for some reason, I wanted something more exciting.</p><p>After days of pondering, I decided to apply off campus. A list was compiled, and the options trickled down to three: Google, LinkedIn and Gojek! Thankfully, Gojek had a PM internship opening. I applied, interviews went well and I was extended an offer at the Bangalore office.</p><h1 id=\"chapter-1-documentation\">Chapter 1: Documentation</h1><p><strong><strong>1st April 2019</strong></strong></p><p>I reached the office full of enthusiasm, ready to make a mark of my own. The whole day went in different formalities and it was almost evening when I got to meet my team. To my surprise, by the end of the day, I was part of all relevant communication channels, team drives and had clarity on what I would work on for the next four weeks.</p><p>I just loved the agility shown by my manager to enable me to embark on my journey. In the process, I also realised why my undergrad friends working at Gojek used to say that if you love speed, this is the place to be.</p><p>The next few days were spent understanding the product, people, and culture. I was surprised by the volume and quality of the documentation done at the company. For a company which prides itself in being one of the fastest growing startups in the world, this kind of emphasis on documentation was something unheard of. And because of these hundreds of beautifully crafted documents, by the end of the first week itself, I was participating in their BAU (Business As Usual) meetings. (How many interns can claim this? 😜)</p><h1 id=\"chapter-2-reading\">Chapter 2: Reading</h1><p><strong><strong>15th April 2019</strong></strong></p><p>I was no longer a newbie in the company. I was having 1:1s with different stakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and working tirelessly on my dedicated projects.</p><p>During the course of these all, one day I reached out to my mentor for suggestions on how to prioritise among different features. This was his response:</p><blockquote>“Read Abhishek, Read. What differentiates a good Product Manager from an average one is his/her willingness to learn, and reading is the first and most important step there.”</blockquote><p>He gave me different links to read, (37 to be precise) which ranged from Product Prioritization, Product Design, Product Critique, Design Heuristics and even the Psychology involved in product success. As I pored through them, I realised Product Management is not as random as it seems from outside. In fact, it is a fine cocktail of art and science mixed in just the right proportion.</p><h1 id=\"chapter-3-inclusion\">Chapter 3: Inclusion</h1><p><strong><strong>23rd April 2019</strong></strong></p><p>By this point, I had completed my first project, got positive feedback, and was about to finish the second. In the meantime, being a part of so many BAU meetings had boosted my confidence and now I was chipping in with suggestions.</p><p>During one such meetings, I raised a point in contradiction to what the other team was saying. I tried to explain my point of view but we were not able to come to an agreement. When I came out, I realised that I should have dealt with the situation differently. I went to my mentor and explained as much.</p><blockquote><em><em>To this, he said: “Sometimes it’s not only about how you or your team is looking at things. You also have to look at what is the value proposition of other teams involved”</em></em></blockquote><p>This was the second important lesson which I learnt: <strong><strong>being a PM your job is to first bring everyone at the table to a common ground before pushing any agenda.</strong></strong> Whether it is inter-team or intra-team, to get the job done, you have to bring people to your side by understanding what they want and why they want it.</p><h1 id=\"chapter-4-relevance\">Chapter 4: Relevance</h1><p><strong><strong>30th April 2019</strong></strong></p><p>I had just finished my second project when I met a senior engineer while passing through the pantry area. He asked how it’s going and what I was working on. I, with full excitement, told him many ideas I came up with.</p><p>And then he said: “Man, it doesn’t matter how cool the ideas are or how great they sound. Judge them on their relevance. Are they correctly solving the problem intended? Are they adding value to the lives of relevant stakeholders?” And then he gave me a set of 10 similar questions and said that if after answering these 10 questions, you still believe you should implement the idea, <em><em>then</em></em> it matters.</p><h1 id=\"chapter-5-impact\">Chapter 5: Impact</h1><p><strong><strong>7th May 2019</strong></strong></p><p>I had started understanding the nitty-gritty of product management and was raring to pick a more challenging project. And then I got this mail from my manager:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1212/1*EmNFi0hTp_OczKryjJuYoQ.png\" class=\"kg-image\"></figure><p><strong><strong><em><em>Really??? After such nice product &amp; strategy based projects, this is what you want me to do!!</em></em></strong></strong></p><blockquote>But again, that was my inexperience talking.</blockquote><p>During the course of the next week, I learnt one more valuable lesson: “Look at the impact of your work, not how cool it sounds. Being a PM, the world is your domain and processes are as important as the product itself. If you want your product to succeed, you need to oil the whole machinery.”</p><p>Recently, I came to know that a senior PM found the document to be super good and now it is being used across the substreams to onboard new hires. (I’m allowed one humblebrag right? 😅)</p><h1 id=\"chapter-6-communication\">Chapter 6: Communication</h1><p><strong><strong>21st May 2019</strong></strong></p><p>The changing weather of Bangalore had hit me hard and I had to take a leave owing to ill health. I sent a message each to my manager and mentor regarding the same. My mentor replied asking me to inform the whole team, which I missed and read quite late. When I did, I figured I am an intern anyway, and don’t have any current projects with the team. Even if I don’t send the mail to them, it doesn’t matter much.</p><p>When I met my mentor the next day, he asked why I didn’t send the mail, and I explained why. He said: “Abhishek, it doesn’t matter whether you have a current project with the team or not. Being a PM, one of the most important skills is being very clear in communication. There might be situations where you wouldn’t even know and people would be waiting for you. Not only in this case, but in every everything you do, a PM needs to be a clear and careful communicator.”</p><h1 id=\"chapter-7-ownership\">Chapter 7: Ownership</h1><p><strong><strong>24th May 2019</strong></strong></p><p>My internship was nearing it’s end, and I reached out to my mentor for some suggestions on the last project I was working on. During our conversation, he asked if my previous one had gone live in production. I said no, but clarified that my part is done and it is stuck on other collaborating teams.</p><p>That’s when I realised I had one last lesson left to learn:</p><blockquote><em><em>“Being a PM it’s your job to get it from conception to production. If there are blockers, you have to proactively reach out to remove them. Being a PM is a tricky job, once you have dirtied your hand, the onus comes on you to get it to completion.”</em></em></blockquote><blockquote>“Once you have picked up something — It’s All Yours.”</blockquote><h1 id=\"epilogue\">Epilogue</h1><p>Today, when I look back, my internship at Gojek was a short, but sweet journey which taught me many lessons. As I go back for my second year at IIMA, I am much more confident when it comes to Product Management.</p><hr><p><em><em>Special thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit Srivastava, and all the members of the Transport team who were always ready to help me during the course of my journey.</em></em></p><hr><p>Want more updates on how we build scalable systems for Southeast Asia’s #SuperApp? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a><br></p>","url":"https://gojek-ghost.zysk.in/the-story-of-my-gojek-internship/","canonical_url":null,"uuid":"ff0e2a75-69e3-4a50-9786-b98b3e7f48ca","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca737aa22c4066f83b78","reading_time":5}},{"node":{"id":"Ghost__Post__5eb1194bf7c7da001effcc98","title":"How Kafka Solved a Culture Problem at Gojek","slug":"how-kafka-solved-a-culture-problem-at-gojek","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Kafka.jpg","excerpt":"Software stopped us from scaling, software set us free.","custom_excerpt":"Software stopped us from scaling, software set us free.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"14 February, 2019","updated_at_pretty":"02 June, 2020","created_at":"2020-05-05T13:14:11.000+05:30","published_at":"2019-02-14T13:14:00.000+05:30","updated_at":"2020-06-02T12:19:39.000+05:30","meta_title":"How Kafka Solved a Culture Problem at Gojek","meta_description":"Software stopped us from scaling, software set us free.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Software can solve cultural problems. While that might seem outlandish, if\nyou’re a developer, you might just get what I mean. Think about it carefully; it\ncan repeat mundane tasks, making people more productive. It can solve complex\nproblems, so devs can focus on pressing tasks.\n\nHowever, it can also complicate culture; like introducing a biometric system to\ntrack employee attendance, and have software track sick leaves.\n\n> In essence, an organisation’s tech stack will reflect the health of the company.\nIf you’re focused on writing beautiful code, it’s likely that employees are\ndisciplined, organised, and believe in the company’s values. It’s really not\nthat far-fetched a correlation.\n\nThis is a similar story; the story of Kafka — an open source tool that solved\nculture for us. Will try and simplify this for a broad audience, so devs, please\nbear with me if some explanations seem obvious and trite.\n\nBefore the Law — Chaos\nIn late 2015, unprecedented scale and failures were routine at Gojek. It also\nweighed heavily on culture\n[https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20] \n— because firefighting when systems are down bogs down morale and creates a\nfractious lot. It was truly Kafkaesque. (See what I did there? 😉). These\nfractures were common in our early days, because all developers depended on our\ncore systems.\n\nWe had about 10+ products at the time and about 60+ developers (Today, we have\n18+ products with 250+ developers overseeing them). These 60 passionate devs saw\nthe chance to build products, solve complex problems and moved fast to meet\nrapacious demand. Naturally, people were doing their own work, writing code in\ntheir own style, and had to sync with others to deploy what they wrote.\n\nAt the core of Gojek is ‘Allocations\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32]\n’; — a classic matchmaking engine between the driver and the customer. All\nsurrounding teams depended on this one team to add features, beta test their\nofferings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some\norders, they had to raise a ‘ticket’ with the Allocations team. The Allocations\nteam then processed this for GO-FOOD.\n\nNow, think of 50 developers asking Allocations to push their features first.\n\nSoon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a\nstrong relationship with Jane in Allocations, Ekta would get preference on her\nfeatures. This became problematic for us and as the org scaled, it added more\ncultural biases. Jane also became the defacto gatekeeper. Everyone had to toe\nher line if they wanted to build and deploy their own features. To add to this,\nAllocations was pushing back and severely lagging behind, because 50-odd\ndevelopers were adding and testing 10 features a day.\n\nBefore you knew it, Allocations became the bottleneck to scale the org. As if\nall that wasn’t enough, the team was not doing its own testing and experiments\nto make Allocations better and sharper. Things were spiralling downwards.\n\nA patch would not do, we needed a fix\nIt was apparent we had to fix this problem — once and for all. The \n‘Relationship-as-a-Service’ model was a disaster. RaaS was endemic in the org.\nThings were fine at a macro level, but at the base of it, we were failing.\n\nWe needed a solution that gave everyone the freedom to build and experiment. We\nwanted folks to think they’re building individual products from scratch without\nany reliance. Easier said that done, right?\n\n> This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to\nbuild startups within a startup.\nWe wanted to unleash our best minds to build, and not worry about RaaS.After\nsome research and consensus across the board, we were all sold on Kafka. \nSoftware was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn\nright.\n\nForget the morose writer\nEvery team was mandated to broadcast events on Kafka. If a driver booking was\nmade, it was sent to Kafka. If a driver completed the ride, it was sent to\nKafka. Kafka became the bus that carried the millions of events happening inside\nGojek.\n\n> Anything and everything individual teams did was visible to anyone and everyone\ninside Gojek.\nIf a team wanted to test features or roll out updates, they merely had to rely\non Kafka. No more RaaS. No more long waiting periods. This unleashed the\nproductivity of every developer. The day we rolled out Kafka, we killed the\ngatekeeper. Information was free and accessible to all. We were solving software\nproblems, but deep down, culture was the bigger fix.\n\n> Today, we emit 350,000,000 messages on Kafka and it’s every engineers’\nplayground.\nOur two-pizza team rule became far more efficient, and now we were solving\nbigger problems. This is also an example of how we look at Lean Engineering, but\nthat’s a story for another day.\n\nDas Urteil — But positive Metamorphosis\n‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913.\nMetamorphosis was published in 1915. The latter talks about how a salesman\nturned into an insect and struggles to live. It’s classic Franz Kafka; deeply\nsad, complex and incredibly gut-wrenching.\n\nIn our case, The Judgement was of an insect metamorphosing into a butterfly. It\ndidn’t happen overnight, but this was our tipping point. Our tech stack began to\nreflect organisation culture.\n\nKafka solved a critical cultural problem for us. 💪\n\nLiked what you read? Have our stories delivered straight to your inbox by \nsigning up for our newsletter [https://mailchi.mp/go-jek/gojek-tech-newsletter]!","html":"<p>Software can solve cultural problems. While that might seem outlandish, if you’re a developer, you might just get what I mean. Think about it carefully; it can repeat mundane tasks, making people more productive. It can solve complex problems, so devs can focus on pressing tasks.</p><p>However, it can also complicate culture; like introducing a biometric system to track employee attendance, and have software track sick leaves.</p><blockquote>In essence, an organisation’s tech stack will reflect the health of the company.</blockquote><p>If you’re focused on writing beautiful code, it’s likely that employees are disciplined, organised, and believe in the company’s values. It’s really not that far-fetched a correlation.</p><p><strong><strong>This is a similar story; the story of Kafka — an open source tool that solved culture for us.</strong></strong> Will try and simplify this for a broad audience, so devs, please bear with me if some explanations seem obvious and trite.</p><h3 id=\"before-the-law-chaos\">Before the Law — Chaos</h3><p>In late 2015, unprecedented scale and failures were routine at Gojek. It also weighed heavily on <a href=\"https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20\" rel=\"noopener\">culture</a> — because firefighting when systems are down bogs down morale and creates a fractious lot. It was truly Kafkaesque. (See what I did there? 😉). These fractures were common in our early days, because all developers depended on our core systems.</p><p>We had about 10+ products at the time and about 60+ developers (Today, we have 18+ products with 250+ developers overseeing them). These 60 passionate devs saw the chance to build products, solve complex problems and moved fast to meet rapacious demand. Naturally, people were doing their own work, <strong><strong>writing code in their own style,</strong></strong> and had to sync with others to deploy what they wrote.</p><p>At the core of Gojek is ‘<a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">Allocations</a>’; — a classic matchmaking engine between the driver and the customer. All surrounding teams depended on this one team to add features, beta test their offerings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some orders, they had to raise a ‘ticket’ with the Allocations team. The Allocations team then processed this for GO-FOOD.</p><p><em><em>Now, think of 50 developers asking Allocations to push their features first.</em></em></p><p>Soon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a strong relationship with Jane in Allocations, Ekta would get preference on her features. This became problematic for us and as the org scaled, it added more cultural biases. <strong><strong>Jane also became the defacto gatekeeper.</strong> </strong>Everyone had to toe her line if they wanted to build and deploy their own features. To add to this, Allocations was pushing back and severely lagging behind, because 50-odd developers were adding and testing 10 features a day.</p><p>Before you knew it, <strong><strong>Allocations became the bottleneck to scale the org. </strong></strong>As if all that wasn’t enough, the team was not doing its own testing and experiments to make Allocations better and sharper. Things were spiralling downwards.</p><h3 id=\"a-patch-would-not-do-we-needed-a-fix\">A patch would not do, we needed a fix</h3><p>It was apparent we had to fix this problem — once and for all. The <strong><strong>‘Relationship-as-a-Service’</strong></strong> model was a disaster. <strong><strong>RaaS</strong></strong> was endemic in the org. Things were fine at a macro level, but at the base of it, we were failing.</p><p>We needed a solution that gave everyone the freedom to build and experiment. We wanted folks to think they’re building individual products from scratch without any reliance. <strong><strong>Easier said that done, right?</strong></strong></p><blockquote>This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to build startups within a startup.</blockquote><p>We wanted to unleash our best minds to build, and not worry about <strong><strong>RaaS.</strong></strong>After some research and consensus across the board, we were all sold on Kafka.<strong><strong> Software was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn right</strong></strong>.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_TKa_fTjcIPBZr71sSMTaFA.jpeg\" class=\"kg-image\"></figure><h3 id=\"forget-the-morose-writer\">Forget the morose writer</h3><p>Every team was mandated to broadcast events on Kafka. If a driver booking was made, it was sent to Kafka. If a driver completed the ride, it was sent to Kafka. Kafka became the bus that carried the millions of events happening inside Gojek.</p><blockquote>Anything and everything individual teams did was visible to anyone and everyone inside Gojek.</blockquote><p>If a team wanted to test features or roll out updates, they merely had to rely on Kafka. No more RaaS<strong><strong>.</strong></strong> No more long waiting periods. This unleashed the productivity of every developer. <strong><strong>The day we rolled out Kafka, we killed the gatekeeper. Information was free and accessible to all. </strong></strong>We were solving software problems, but deep down, culture was the bigger fix.</p><blockquote>Today, we emit 350,000,000 messages on Kafka and it’s every engineers’ playground.</blockquote><p>Our two-pizza team rule became far more efficient, and now we were solving bigger problems. This is also an example of how we look at Lean Engineering, but that’s a story for another day.</p><h3 id=\"das-urteil-but-positive-metamorphosis\">Das Urteil — But positive Metamorphosis</h3><p>‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913. Metamorphosis was published in 1915. The latter talks about how a salesman turned into an insect and struggles to live. It’s classic Franz Kafka; deeply sad, complex and incredibly gut-wrenching.</p><p>In our case, The Judgement was of an insect metamorphosing into a butterfly. It didn’t happen overnight, but this was our tipping point. Our tech stack began to reflect organisation culture.</p><p><strong><strong>Kafka solved a critical cultural problem for us.</strong></strong> 💪</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg.png\" class=\"kg-image\"></figure><p>Liked what you read? Have our stories delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter</a>!</p>","url":"https://gojek-ghost.zysk.in/how-kafka-solved-a-culture-problem-at-gojek/","canonical_url":null,"uuid":"e542a670-4560-4afc-af69-049af2d26ac2","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1194bf7c7da001effcc98","reading_time":4}},{"node":{"id":"Ghost__Post__5eb128c6f7c7da001effcd94","title":"Gojek Engineering — Guiding Principles 101","slug":"gojek-engineering-guiding-principles-101","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Culture1.gif","excerpt":"Pointers that help us build and run a unicorn startup,","custom_excerpt":"Pointers that help us build and run a unicorn startup,","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"04 January, 2017","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:20:14.000+05:30","published_at":"2017-01-04T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:57.000+05:30","meta_title":null,"meta_description":"Pointers that help us build and run a unicorn startup.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Ajey Gore\n\nWorking at Gojek means working with the best and brightest on the most\ncutting-edge technologies. While it is extremely rewarding, it is also\nchallenging. This is because we often work on tough problems with no clear\nsolution — which involves taking risks and learning things on the fly.\n\nAll this, while competing with the best in the industry.\n\nThat’s why our guiding principles serve as a great reference point to deal with\nsituations that arise every day. Here are some that we abide by:\n\nEveryone writes code — At Gojek, we believe that Software\nPrincipals/Architects/Engineers can only do the right thing when they work on\ncode themselves. It’s the only way to decide what’s working and what’s not. We\ndon’t believe that software requires a 50,000 foot overview with people\nexclusively working on the blueprint. At Gojek, writing software is not a\nlow-level task; it’s at the very core of what we do.\n\nLeaders who code are better judges of technical skill.\n\nEveryone needs to ‘walk the talk’ — We respect people who get down in the\ntrenches and take a hands-on approach to problem solving. Based on our\nexperience, standing at a distance and issuing commandments has many a time been\ninefficient and error prone, and hence we avoid this.\n\nLeaders are grown and not made — We believe in acquired respect and leadership,\nnot leadership by position. At Gojek, you earn your leadership mettle. We\nbelieve in helping our people grow into leadership roles by giving them chances,\nrisk appetite and freedom. We trust our people and support them to do the right\nthing at any given moment. In my own career, I’ve been privileged enough to have\nfound some amazing mentors, and I am glad to be able to continue the legacy at\nGojek.\n\nEvery decision is correct at the time it is made — Swift decision-making is\nextremely important in a fast paced environment like ours. Once a decision is\nmade, we don’t constantly agonise over it or second guess. We trust that\nwhenever someone makes a decision, it is the right one, given the information\navailable to them at that time. Only the passage of time can tell us whether a\nparticular decision was right or wrong. It’s OK to change decisions, and we\nencourage people to not be afraid to make a decision.\n\nEvery person has some strengths, even if we don’t always see them — A great team\nis built with a group of people who have complementary skill sets. A combination\nof different strengths make teams that can tackle all kinds of situations. At\nGojek, we believe each one of us is unique and has unique strengths. It’s just a\nmatter of finding the right role to match the skills. Teams become super strong\nwhen they appreciate each other’s strengths.\n\nWorking in tech means learning all the time — Learning is important in every\nfield. In the technology industry, it is a matter of life and death. Technology\nis changing all the time, what worked a decade ago may be completely obsolete\nnow. For example, practices that worked in Waterfall don’t work in Agile, and\nuser experiences on mobile apps were unimaginable a few years back. So, we\nconstantly look for and admire people who are curious and willing to learn.\n\nThe best part? Such people will always hire people they can learn from!\n\nPair Programming and Test-Driven Development (TDD) work — If they didn’t, our\nteams wouldn’t exist. Wherever we have followed this, we found our team’s job on\nsupporting software is more around features than bugs! We have experienced over\ndecades that this helps us build features faster, and mature teams organically.\nThe bottom line is : to write beautiful code, we believe there is no better way\nthan rigorous pair programming and practising TDD.","html":"<p>By Ajey Gore</p><p>Working at Gojek means working with the best and brightest on the most cutting-edge technologies. While it is extremely rewarding, it is also challenging. This is because we often work on tough problems with no clear solution — which involves taking risks and learning things on the fly.</p><p><em><em>All this, while competing with the best in the industry.</em></em></p><p>That’s why our guiding principles serve as a great reference point to deal with situations that arise every day. Here are some that we abide by:</p><p><strong><strong>Everyone writes code — </strong></strong>At Gojek, we believe that Software Principals/Architects/Engineers can only do the right thing when they work on code themselves. It’s the only way to decide what’s working and what’s not. We don’t believe that software requires a 50,000 foot overview with people exclusively working on the blueprint. At Gojek, writing software is <strong><strong>not</strong></strong> a low-level task; it’s at the very core of what we do.</p><p>Leaders who code are better judges of technical skill.</p><p><strong><strong>Everyone needs to ‘walk the talk’ — </strong></strong>We respect people who get down in the trenches and take a hands-on approach to problem solving. Based on our experience, standing at a distance and issuing commandments has many a time been inefficient and error prone, and hence we avoid this.</p><p><strong><strong>Leaders are grown and not made</strong></strong> — We believe in acquired respect and leadership, not leadership by position. At Gojek, you earn your leadership mettle. We believe in helping our people grow into leadership roles by giving them chances, risk appetite and freedom. We trust our people and support them to do the right thing at any given moment. In my own career, I’ve been privileged enough to have found some amazing mentors, and I am glad to be able to continue the legacy at Gojek.</p><p><strong><strong>Every decision is correct at the time it is made</strong></strong> — Swift decision-making is extremely important in a fast paced environment like ours. Once a decision is made, we don’t constantly agonise over it or second guess. We trust that whenever someone makes a decision, it is the right one, given the information available to them at that time. Only the passage of time can tell us whether a particular decision was right or wrong. It’s OK to change decisions, and we encourage people to not be afraid to make a decision.</p><p><strong><strong>Every person has some strengths, even if we don’t always see them</strong></strong> — A great team is built with a group of people who have complementary skill sets. A combination of different strengths make teams that can tackle all kinds of situations. At Gojek, we believe each one of us is unique and has unique strengths. It’s just a matter of finding the right role to match the skills. Teams become super strong when they appreciate each other’s strengths.</p><p><strong><strong>Working in tech means learning all the time</strong></strong> — Learning is important in every field. In the technology industry, it is a matter of life and death. Technology is changing all the time, what worked a decade ago may be completely obsolete now. For example, practices that worked in Waterfall don’t work in Agile, and user experiences on mobile apps were unimaginable a few years back. So, we constantly look for and admire people who are curious and willing to learn.</p><p>The best part? Such people will always hire people they can learn from!</p><p><strong><strong>Pair Programming and Test-Driven Development (TDD) work </strong></strong>— If they didn’t, our teams wouldn’t exist. Wherever we have followed this, we found our team’s job on supporting software is more around features than bugs! We have experienced over decades that this helps us build features faster, and mature teams organically. The bottom line is : to write beautiful code, we believe there is no better way than rigorous pair programming and practising TDD.</p>","url":"https://gojek-ghost.zysk.in/gojek-engineering-guiding-principles-101/","canonical_url":null,"uuid":"9afc126f-c3cc-4649-8eb1-6b1f10431f93","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128c6f7c7da001effcd94","reading_time":3}}]},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}}]}},"pageContext":{"slug":"culture","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}