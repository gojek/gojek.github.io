{"componentChunkName":"component---src-templates-all-posts-js","path":"/page/3/","result":{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5eb0ff055524cd001e73924a","title":"Beast: Moving Data from Kafka to BigQuery","slug":"beast-moving-data-from-kafka-to-bigquery-2","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dc5zljnB3Xzp17C7sZ3d-Q.jpg","excerpt":"Gojek's open source solution for rapid movement of data from Kafka to Google BigQuery","custom_excerpt":"Gojek's open source solution for rapid movement of data from Kafka to Google BigQuery","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"11 July, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T11:22:05.000+05:30","published_at":"2019-07-11T09:30:00.000+05:30","updated_at":"2020-05-12T11:53:53.000+05:30","meta_title":"Beast: Moving Data from Kafka to BigQuery","meta_description":"Gojek's open source solution for rapid movement of data from Kafka to Google BigQuery","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"by Rajat Goyal [http://medium.com/@rajat404] and Maulik Soneji\n[https://medium.com/@maulik.soneji]\n\nIn order to serve customers across 19+ products, GOJEK places a lot of emphasis\non data. Our Data Warehouse [https://en.wikipedia.org/wiki/Data_warehouse],\nbuilt by integrating data from multiple applications and sources, helps our team\nof data scientists, as well as business and product analysts make solid,\ndata-driven decisions.\n\nThis post explains our open source solution for easy movement of data from Kafka\nto BigQuery.\n\nData Warehouse setup at GOJEK\nWe use Google Bigquery [https://cloud.google.com/bigquery/] (BQ) as our Data\nWarehouse, which serves as a powerful tool for interactive analysis. This has\nproven extremely valuable for our use cases.\n\nOur approach to push data to our warehouse is to first push the data to Kafka.\nWe rely on multiple Kafka clusters to ingest relevant events across teams.\n\nA common approach to push data from Kafka to BigQuery is to first push it to\nGCS, and then import said data into BigQuery from GCS. While this solves the use\ncase of running analytics on historical data, we also use BigQuery for\nnear-real-time analytics & reporting. This analysis in-turn provides valuable\ninsights to make the right business decisions in a short time frame.\n\nThe initial approach\nOur original implementation used an individual code base for each topic in Kafka\nand use them to push data to BQ.\n\nThis required a lot of maintenance in order to keep up with the new topics and\nnew fields to existing topics being added to Kafka. Such changes required the\nmanual intervention of a dev/analyst to update the schema in both code and BQ\ntable. We also witnessed incidents of data loss on a few occasions, which\nrequired manually loading data from GCS.\n\nThe need for a new solution\nNew topics are added almost every other day to the several Kafka clusters in the\norganisation. Given that GOJEK has expanded its operations to several countries,\nmanaging the agglomeration of individual scripts for each topic was a massive\nordeal.\n\nIn order to deal with scaling issues, we decided to write a new system from\nscratch and take into account learnings from our previous experiences. Our\nsolution was a system that could ingest all the data pushed to Kafka and write\nit to Bigquery.\n\nWe decided to call it ‘Beast’ as it has to ingest all data that is generated in\nGOJEK.\n\nBefore starting with development, we had the following requirements to take care\nof:\n\n * No data loss: Every single message should be pushed from Kafka to BQ at least\n   once\n * Single codebase: A single repository able to handle any proto schema, for any\n   topic, without any code changes\n * Scalability: The app needs to be able to handle substantially high throughput\n * Observability: A dev should be able to see the state of the system at any\n   given point of time\n * Painless upgrades: Updating the schema for a topic should be a simple\n   operation\n\nArchitecture\n\nBeast takes inspiration from Sakaar\n[https://blog.gojekengineering.com/sakaar-taking-kafka-data-to-cloud-storage-at-go-jek-7839da20b5f3]\n, our in-house solution for pushing data from Kafka to GCS. Like Sakaar, Beast\nutilises Java’s blocking queues, for consuming, processing, pushing and\ncommitting the messages. Blocking queues allow us to make each of these stages\nindependent of the other, letting us optimise each stage in and of itself.\n\nEach Beast instance packs the following components:\n\n * Consumer: A native Kafka consumer, which consumes messages in batches from\n   Kafka, translates them to BQ compatible format, and pushes all of them into\n   two blocking queues — Read Queue and Commit Queue.\n * BQ Workers: A group of worker threads which pick messages from the read\n   queue, and push to BigQuery. Once a message batch is pushed successfully, the\n   BQ worker adds the committed offset of the batch to the Acknowledgement Set.\n   This offset acts as an acknowledgement of the batch being successfully\n   pushed.\n * Kafka Committer: A thread which keeps polling the head of the commit queue,\n   to get the earliest message batch. The committer looks for the commit offset\n   of that batch in the Acknowledgement Set. If the acknowledgement is available\n   (implying that the batch was successfully pushed to BQ), then the offset of\n   that batch is committed back to Kafka, and it’s removed from the commit\n   queue.\n\nSalient Features\nBeast is entirely cloud native, thus scaling it is a piece of cake.\n\nFor high throughput topics, all we need to do is spawn more pods. Since Beast\nrelies on Kafka consumers, we can have as many consumers as the number of\npartitions, and as long as they have the same consumer group, Kafka will ensure\nthat all the consumers receive unique messages.\n\nBeast takes a proto-descriptor file, which defines the details of all the protos\nin the registry. It then simply picks the details of the proto, specified in the\nconfiguration. This allows us to use the same codebase for all deployments, and\nalso makes the upgrades a breeze.\n\nBeast is open source ? ?\nBeast is now part of the open source domain. Do give it a shot!\n\nYou can find Beast here: ?\n\nhttps://github.com/gojek/beast\n\nHelm chart for the same can be found here\n[https://github.com/gojektech/charts/tree/master/incubator/beast].\n\nContributions, criticism, feedback, and bug reports are always welcome. ?\n\n\n--------------------------------------------------------------------------------\n\nIf you like what you read and want our stories delivered straight to your inbox, \nsign up for our newsletter [https://mailchi.mp/go-jek/gojek-tech-newsletter].","html":"<p>by <a href=\"http://medium.com/@rajat404\" rel=\"noopener\">Rajat Goyal</a> and <a href=\"https://medium.com/@maulik.soneji\" rel=\"noopener\">Maulik Soneji</a></p><p>In order to serve customers across 19+ products, GOJEK places a lot of emphasis on data. Our <a href=\"https://en.wikipedia.org/wiki/Data_warehouse\" rel=\"noopener\">Data Warehouse</a>, built by integrating data from multiple applications and sources, helps our team of data scientists, as well as business and product analysts make solid, data-driven decisions.</p><p>This post explains our open source solution for easy movement of data from Kafka to BigQuery.</p><h1 id=\"data-warehouse-setup-at-gojek\">Data Warehouse setup at GOJEK</h1><p>We use <a href=\"https://cloud.google.com/bigquery/\" rel=\"noopener\">Google Bigquery</a> (BQ) as our Data Warehouse, which serves as a powerful tool for interactive analysis. This has proven extremely valuable for our use cases.</p><p><em><em>Our approach to push data to our warehouse is to first push the data to Kafka. We rely on multiple Kafka clusters to ingest relevant events across teams.</em></em></p><p>A common approach to push data from Kafka to BigQuery is to first push it to GCS, and then import said data into BigQuery from GCS. While this solves the use case of running analytics on historical data, we also use BigQuery for near-real-time analytics &amp; reporting. This analysis in-turn provides valuable insights to make the right business decisions in a short time frame.</p><h1 id=\"the-initial-approach\">The initial approach</h1><p>Our original implementation used an individual code base for each topic in Kafka and use them to push data to BQ.</p><p>This required a lot of maintenance in order to keep up with the new topics and new fields to existing topics being added to Kafka. Such changes required the manual intervention of a dev/analyst to update the schema in both code and BQ table. We also witnessed incidents of data loss on a few occasions, which required manually loading data from GCS.</p><h1 id=\"the-need-for-a-new-solution\">The need for a new solution</h1><p>New topics are added almost every other day to the several Kafka clusters in the organisation. Given that GOJEK has expanded its operations to several countries, managing the agglomeration of individual scripts for each topic was a massive ordeal.</p><p>In order to deal with scaling issues, we decided to write a new system from scratch and take into account learnings from our previous experiences. Our solution was a system that could ingest all the data pushed to Kafka and write it to Bigquery.</p><p>We decided to call it ‘<strong>Beast’</strong> as it has to ingest all data that is generated in GOJEK.</p><p>Before starting with development, we had the following requirements to take care of:</p><ul><li><strong><strong>No data loss: </strong></strong>Every single message should be pushed from Kafka to BQ at least once</li><li><strong><strong>Single codebase: </strong></strong>A single repository able to handle any proto schema, for any topic, without any code changes</li><li><strong><strong>Scalability:</strong></strong> The app needs to be able to handle substantially high throughput</li><li><strong><strong>Observability:</strong></strong> A dev should be able to see the state of the system at any given point of time</li><li><strong><strong>Painless upgrades:</strong></strong> Updating the schema for a topic should be a simple operation</li></ul><h1 id=\"architecture\">Architecture<br></h1><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1373/1*MlBXLLD33_MwOyILGivskg.png\" class=\"kg-image\"></figure><p>Beast takes inspiration from <a href=\"https://blog.gojekengineering.com/sakaar-taking-kafka-data-to-cloud-storage-at-go-jek-7839da20b5f3\" rel=\"noopener\">Sakaar</a>, our in-house solution for pushing data from Kafka to GCS. Like Sakaar, Beast utilises Java’s blocking queues, for consuming, processing, pushing and committing the messages. Blocking queues allow us to make each of these stages independent of the other, letting us optimise each stage in and of itself.</p><p>Each Beast instance packs the following components:</p><ul><li><strong><strong>Consumer:</strong></strong> A native Kafka consumer, which consumes messages in batches from Kafka, translates them to BQ compatible format, and pushes all of them into two blocking queues — Read Queue and Commit Queue.</li><li><strong><strong>BQ Workers: </strong></strong>A group of worker threads which pick messages from the read queue, and push to BigQuery. Once a message batch is pushed successfully, the BQ worker adds the committed offset of the batch to the Acknowledgement Set. This offset acts as an acknowledgement of the batch being successfully pushed.</li><li><strong><strong>Kafka Committer:</strong></strong> A thread which keeps polling the head of the commit queue, to get the earliest message batch. The committer looks for the commit offset of that batch in the Acknowledgement Set. If the acknowledgement is available (implying that the batch was successfully pushed to BQ), then the offset of that batch is committed back to Kafka, and it’s removed from the commit queue.</li></ul><h1 id=\"salient-features\">Salient Features</h1><p>Beast is entirely cloud native, thus scaling it is a piece of cake.</p><p>For high throughput topics, all we need to do is spawn more pods. Since Beast relies on Kafka consumers, we can have as many consumers as the number of partitions, and as long as they have the same consumer group, Kafka will ensure that all the consumers receive unique messages.</p><p>Beast takes a proto-descriptor file, which defines the details of all the protos in the registry. It then simply picks the details of the proto, specified in the configuration. This allows us to use the same codebase for all deployments, and also makes the upgrades a breeze.</p><h1 id=\"beast-is-open-source-\">Beast is open source ? ?</h1><p>Beast is now part of the open source domain. Do give it a shot!</p><p><strong><strong>You can find Beast here: ?</strong></strong></p><p><a href=\"https://github.com/gojek/beast\">https://github.com/gojek/beast</a></p><p>Helm chart for the same can be found <a href=\"https://github.com/gojektech/charts/tree/master/incubator/beast\" rel=\"noopener\">here</a>.</p><p>Contributions, criticism, feedback, and bug reports are always welcome. ?</p><hr><p>If you like what you read and want our stories delivered straight to your inbox, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">sign up for our newsletter</a>. </p>","url":"https://gojek-ghost.zysk.in/beast-moving-data-from-kafka-to-bigquery-2/","canonical_url":null,"uuid":"3c91fa54-e0f7-43a2-88d8-55bf7fd56c9c","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb0ff055524cd001e73924a","reading_time":4}},{"node":{"id":"Ghost__Post__5ec2ca737aa22c4066f83b78","title":"The Story of My Gojek Internship","slug":"the-story-of-my-gojek-internship","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_8RjlIWbn2EYI3fdzy-8HqA.jpeg","excerpt":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","custom_excerpt":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"04 July, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:18:35.000+05:30","published_at":"2019-07-04T09:30:00.000+05:30","updated_at":"2020-05-18T23:56:40.000+05:30","meta_title":null,"meta_description":"What does it mean to be a Product Manager? Here’s an intern’s first person account of life as a PM and the lessons learned.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Abhishek Kumar\n\nPrologue\nAugust 2018\n\nI had just completed my first semester at IIM Ahmedabad. As the Summer\nPlacements semester got going in full swing, I decided to pursue an internship\nin the Product Management domain.\n\nWhen someone asked me: “Which is your dream company?”, I was not sure. I\nrealised that although there were renowned names coming on campus, for some\nreason, I wanted something more exciting.\n\nAfter days of pondering, I decided to apply off campus. A list was compiled, and\nthe options trickled down to three: Google, LinkedIn and Gojek! Thankfully,\nGojek had a PM internship opening. I applied, interviews went well and I was\nextended an offer at the Bangalore office.\n\nChapter 1: Documentation\n1st April 2019\n\nI reached the office full of enthusiasm, ready to make a mark of my own. The\nwhole day went in different formalities and it was almost evening when I got to\nmeet my team. To my surprise, by the end of the day, I was part of all relevant\ncommunication channels, team drives and had clarity on what I would work on for\nthe next four weeks.\n\nI just loved the agility shown by my manager to enable me to embark on my\njourney. In the process, I also realised why my undergrad friends working at\nGojek used to say that if you love speed, this is the place to be.\n\nThe next few days were spent understanding the product, people, and culture. I\nwas surprised by the volume and quality of the documentation done at the\ncompany. For a company which prides itself in being one of the fastest growing\nstartups in the world, this kind of emphasis on documentation was something\nunheard of. And because of these hundreds of beautifully crafted documents, by\nthe end of the first week itself, I was participating in their BAU (Business As\nUsual) meetings. (How many interns can claim this? 😜)\n\nChapter 2: Reading\n15th April 2019\n\nI was no longer a newbie in the company. I was having 1:1s with different\nstakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and\nworking tirelessly on my dedicated projects.\n\nDuring the course of these all, one day I reached out to my mentor for\nsuggestions on how to prioritise among different features. This was his\nresponse:\n\n> “Read Abhishek, Read. What differentiates a good Product Manager from an average\none is his/her willingness to learn, and reading is the first and most important\nstep there.”\nHe gave me different links to read, (37 to be precise) which ranged from Product\nPrioritization, Product Design, Product Critique, Design Heuristics and even the\nPsychology involved in product success. As I pored through them, I realised\nProduct Management is not as random as it seems from outside. In fact, it is a\nfine cocktail of art and science mixed in just the right proportion.\n\nChapter 3: Inclusion\n23rd April 2019\n\nBy this point, I had completed my first project, got positive feedback, and was\nabout to finish the second. In the meantime, being a part of so many BAU\nmeetings had boosted my confidence and now I was chipping in with suggestions.\n\nDuring one such meetings, I raised a point in contradiction to what the other\nteam was saying. I tried to explain my point of view but we were not able to\ncome to an agreement. When I came out, I realised that I should have dealt with\nthe situation differently. I went to my mentor and explained as much.\n\n> To this, he said: “Sometimes it’s not only about how you or your team is looking\nat things. You also have to look at what is the value proposition of other teams\ninvolved”\nThis was the second important lesson which I learnt: being a PM your job is to\nfirst bring everyone at the table to a common ground before pushing any agenda. \nWhether it is inter-team or intra-team, to get the job done, you have to bring\npeople to your side by understanding what they want and why they want it.\n\nChapter 4: Relevance\n30th April 2019\n\nI had just finished my second project when I met a senior engineer while passing\nthrough the pantry area. He asked how it’s going and what I was working on. I,\nwith full excitement, told him many ideas I came up with.\n\nAnd then he said: “Man, it doesn’t matter how cool the ideas are or how great\nthey sound. Judge them on their relevance. Are they correctly solving the\nproblem intended? Are they adding value to the lives of relevant stakeholders?”\nAnd then he gave me a set of 10 similar questions and said that if after\nanswering these 10 questions, you still believe you should implement the idea, \nthen it matters.\n\nChapter 5: Impact\n7th May 2019\n\nI had started understanding the nitty-gritty of product management and was\nraring to pick a more challenging project. And then I got this mail from my\nmanager:\n\nReally??? After such nice product & strategy based projects, this is what you\nwant me to do!!\n\n> But again, that was my inexperience talking.\nDuring the course of the next week, I learnt one more valuable lesson: “Look at\nthe impact of your work, not how cool it sounds. Being a PM, the world is your\ndomain and processes are as important as the product itself. If you want your\nproduct to succeed, you need to oil the whole machinery.”\n\nRecently, I came to know that a senior PM found the document to be super good\nand now it is being used across the substreams to onboard new hires. (I’m\nallowed one humblebrag right? 😅)\n\nChapter 6: Communication\n21st May 2019\n\nThe changing weather of Bangalore had hit me hard and I had to take a leave\nowing to ill health. I sent a message each to my manager and mentor regarding\nthe same. My mentor replied asking me to inform the whole team, which I missed\nand read quite late. When I did, I figured I am an intern anyway, and don’t have\nany current projects with the team. Even if I don’t send the mail to them, it\ndoesn’t matter much.\n\nWhen I met my mentor the next day, he asked why I didn’t send the mail, and I\nexplained why. He said: “Abhishek, it doesn’t matter whether you have a current\nproject with the team or not. Being a PM, one of the most important skills is\nbeing very clear in communication. There might be situations where you wouldn’t\neven know and people would be waiting for you. Not only in this case, but in\nevery everything you do, a PM needs to be a clear and careful communicator.”\n\nChapter 7: Ownership\n24th May 2019\n\nMy internship was nearing it’s end, and I reached out to my mentor for some\nsuggestions on the last project I was working on. During our conversation, he\nasked if my previous one had gone live in production. I said no, but clarified\nthat my part is done and it is stuck on other collaborating teams.\n\nThat’s when I realised I had one last lesson left to learn:\n\n> “Being a PM it’s your job to get it from conception to production. If there are\nblockers, you have to proactively reach out to remove them. Being a PM is a\ntricky job, once you have dirtied your hand, the onus comes on you to get it to\ncompletion.”\n> “Once you have picked up something — It’s All Yours.”\nEpilogue\nToday, when I look back, my internship at Gojek was a short, but sweet journey\nwhich taught me many lessons. As I go back for my second year at IIMA, I am much\nmore confident when it comes to Product Management.\n\n\n--------------------------------------------------------------------------------\n\nSpecial thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit\nSrivastava, and all the members of the Transport team who were always ready to\nhelp me during the course of my journey.\n\n\n--------------------------------------------------------------------------------\n\nWant more updates on how we build scalable systems for Southeast Asia’s\n#SuperApp? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Abhishek Kumar</p><h1 id=\"prologue\">Prologue</h1><p><strong><strong>August 2018</strong></strong></p><p>I had just completed my first semester at IIM Ahmedabad. As the Summer Placements semester got going in full swing, I decided to pursue an internship in the Product Management domain.</p><p>When someone asked me: “Which is your dream company?”, I was not sure. I realised that although there were renowned names coming on campus, for some reason, I wanted something more exciting.</p><p>After days of pondering, I decided to apply off campus. A list was compiled, and the options trickled down to three: Google, LinkedIn and Gojek! Thankfully, Gojek had a PM internship opening. I applied, interviews went well and I was extended an offer at the Bangalore office.</p><h1 id=\"chapter-1-documentation\">Chapter 1: Documentation</h1><p><strong><strong>1st April 2019</strong></strong></p><p>I reached the office full of enthusiasm, ready to make a mark of my own. The whole day went in different formalities and it was almost evening when I got to meet my team. To my surprise, by the end of the day, I was part of all relevant communication channels, team drives and had clarity on what I would work on for the next four weeks.</p><p>I just loved the agility shown by my manager to enable me to embark on my journey. In the process, I also realised why my undergrad friends working at Gojek used to say that if you love speed, this is the place to be.</p><p>The next few days were spent understanding the product, people, and culture. I was surprised by the volume and quality of the documentation done at the company. For a company which prides itself in being one of the fastest growing startups in the world, this kind of emphasis on documentation was something unheard of. And because of these hundreds of beautifully crafted documents, by the end of the first week itself, I was participating in their BAU (Business As Usual) meetings. (How many interns can claim this? 😜)</p><h1 id=\"chapter-2-reading\">Chapter 2: Reading</h1><p><strong><strong>15th April 2019</strong></strong></p><p>I was no longer a newbie in the company. I was having 1:1s with different stakeholders, attending IPMs (Internal Planning Meetings), BAU meetings and working tirelessly on my dedicated projects.</p><p>During the course of these all, one day I reached out to my mentor for suggestions on how to prioritise among different features. This was his response:</p><blockquote>“Read Abhishek, Read. What differentiates a good Product Manager from an average one is his/her willingness to learn, and reading is the first and most important step there.”</blockquote><p>He gave me different links to read, (37 to be precise) which ranged from Product Prioritization, Product Design, Product Critique, Design Heuristics and even the Psychology involved in product success. As I pored through them, I realised Product Management is not as random as it seems from outside. In fact, it is a fine cocktail of art and science mixed in just the right proportion.</p><h1 id=\"chapter-3-inclusion\">Chapter 3: Inclusion</h1><p><strong><strong>23rd April 2019</strong></strong></p><p>By this point, I had completed my first project, got positive feedback, and was about to finish the second. In the meantime, being a part of so many BAU meetings had boosted my confidence and now I was chipping in with suggestions.</p><p>During one such meetings, I raised a point in contradiction to what the other team was saying. I tried to explain my point of view but we were not able to come to an agreement. When I came out, I realised that I should have dealt with the situation differently. I went to my mentor and explained as much.</p><blockquote><em><em>To this, he said: “Sometimes it’s not only about how you or your team is looking at things. You also have to look at what is the value proposition of other teams involved”</em></em></blockquote><p>This was the second important lesson which I learnt: <strong><strong>being a PM your job is to first bring everyone at the table to a common ground before pushing any agenda.</strong></strong> Whether it is inter-team or intra-team, to get the job done, you have to bring people to your side by understanding what they want and why they want it.</p><h1 id=\"chapter-4-relevance\">Chapter 4: Relevance</h1><p><strong><strong>30th April 2019</strong></strong></p><p>I had just finished my second project when I met a senior engineer while passing through the pantry area. He asked how it’s going and what I was working on. I, with full excitement, told him many ideas I came up with.</p><p>And then he said: “Man, it doesn’t matter how cool the ideas are or how great they sound. Judge them on their relevance. Are they correctly solving the problem intended? Are they adding value to the lives of relevant stakeholders?” And then he gave me a set of 10 similar questions and said that if after answering these 10 questions, you still believe you should implement the idea, <em><em>then</em></em> it matters.</p><h1 id=\"chapter-5-impact\">Chapter 5: Impact</h1><p><strong><strong>7th May 2019</strong></strong></p><p>I had started understanding the nitty-gritty of product management and was raring to pick a more challenging project. And then I got this mail from my manager:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1212/1*EmNFi0hTp_OczKryjJuYoQ.png\" class=\"kg-image\"></figure><p><strong><strong><em><em>Really??? After such nice product &amp; strategy based projects, this is what you want me to do!!</em></em></strong></strong></p><blockquote>But again, that was my inexperience talking.</blockquote><p>During the course of the next week, I learnt one more valuable lesson: “Look at the impact of your work, not how cool it sounds. Being a PM, the world is your domain and processes are as important as the product itself. If you want your product to succeed, you need to oil the whole machinery.”</p><p>Recently, I came to know that a senior PM found the document to be super good and now it is being used across the substreams to onboard new hires. (I’m allowed one humblebrag right? 😅)</p><h1 id=\"chapter-6-communication\">Chapter 6: Communication</h1><p><strong><strong>21st May 2019</strong></strong></p><p>The changing weather of Bangalore had hit me hard and I had to take a leave owing to ill health. I sent a message each to my manager and mentor regarding the same. My mentor replied asking me to inform the whole team, which I missed and read quite late. When I did, I figured I am an intern anyway, and don’t have any current projects with the team. Even if I don’t send the mail to them, it doesn’t matter much.</p><p>When I met my mentor the next day, he asked why I didn’t send the mail, and I explained why. He said: “Abhishek, it doesn’t matter whether you have a current project with the team or not. Being a PM, one of the most important skills is being very clear in communication. There might be situations where you wouldn’t even know and people would be waiting for you. Not only in this case, but in every everything you do, a PM needs to be a clear and careful communicator.”</p><h1 id=\"chapter-7-ownership\">Chapter 7: Ownership</h1><p><strong><strong>24th May 2019</strong></strong></p><p>My internship was nearing it’s end, and I reached out to my mentor for some suggestions on the last project I was working on. During our conversation, he asked if my previous one had gone live in production. I said no, but clarified that my part is done and it is stuck on other collaborating teams.</p><p>That’s when I realised I had one last lesson left to learn:</p><blockquote><em><em>“Being a PM it’s your job to get it from conception to production. If there are blockers, you have to proactively reach out to remove them. Being a PM is a tricky job, once you have dirtied your hand, the onus comes on you to get it to completion.”</em></em></blockquote><blockquote>“Once you have picked up something — It’s All Yours.”</blockquote><h1 id=\"epilogue\">Epilogue</h1><p>Today, when I look back, my internship at Gojek was a short, but sweet journey which taught me many lessons. As I go back for my second year at IIMA, I am much more confident when it comes to Product Management.</p><hr><p><em><em>Special thanks to my manager Vikrama Dhiman, my mentor Manas J Saloi, Shobhit Srivastava, and all the members of the Transport team who were always ready to help me during the course of my journey.</em></em></p><hr><p>Want more updates on how we build scalable systems for Southeast Asia’s #SuperApp? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a><br></p>","url":"https://gojek-ghost.zysk.in/the-story-of-my-gojek-internship/","canonical_url":null,"uuid":"ff0e2a75-69e3-4a50-9786-b98b3e7f48ca","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca737aa22c4066f83b78","reading_time":5}},{"node":{"id":"Ghost__Post__5ec2d7e47aa22c4066f83ca4","title":"Good Morning, Vietnam — How GOJEK Went International","slug":"good-morning-vietnam-how-gojek-went-international","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/3.gif","excerpt":"From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.","custom_excerpt":"From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"18 June, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-19T00:15:56.000+05:30","published_at":"2019-06-18T09:30:00.000+05:30","updated_at":"2020-05-19T00:40:35.000+05:30","meta_title":null,"meta_description":"From Indonesia’s glittering waters to Vietnam’s wooded forests — how GOJEK set up operations in its first international location.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Sooraj Rajmohan\n\nYou are reading part two of a three-part series chronicling GOJEK’s entry into\ninternational markets, and the team that helped make it possible. If you haven’t\nread part one, get up to speed here.\n\nPart 2/3 | Initiation\nWhen we left Trifecta — the team responsible for charting GOJEK’s international\nexpansion — in the last part of this series, the team was working on setting up\na new environment for launch in Vietnam. But now, there were new problems to\ntackle.\n\nProblem #1: Configuration drift\n\nUntil this point, GOJEK had always operated within Indonesia, but Trifecta was\nnow in unmapped territory, building a completely new environment for GOJEK’s\nservices in Vietnam. The services now needed to be configured separately across\ngeographies, and there was no central location to manage these configurations\neffectively. This meant there was a chance of configuration inconsistencies\ncreeping in over time (hence the term ‘drift’).\n\nProblem #2: Deployment drift\n\nEven if the team hacked a solution for the first problem, deploying the code\nwould pose another one. It was imperative that the same version of code run on\nall the environments (the existing one in Indonesia, the one being built for\nVietnam, and any future ones). Failing this, supporting services across\ncountries would be a nightmare.\n\n> That wasn’t the kind of risk a startup that expounds lean engineering could\nafford to take.\nProblem #3: A logging and monitoring solution for the Kubernetes cluster.\n\nAs this was the first time containers were being used by GOJEK, a new logging\nsolution would be required for future debugging needs.\n\nMuch time had been lost already, it was time to bring in the big guns.\n\nEven as the team dodged obstacles and took detours, making the best use of\navailable resources, Project Managers Sourabh Gupta and Sanchit Juneja had been\ncommunicating with other teams for backup. They had found some ad-hoc support,\nbut to see this journey through would need more seasoned soldiers.\n\nFinally, this effort came to fruition.\n\nTrifecta V2.0\nAfter some negotiation, the team got the go-ahead for Sumit Gupta, another GOJEK\nveteran, to make the transition from GOJEK’s Atlas team to join Trifecta full\ntime. Sumit had led GOJEK’s scaling efforts back in 2015, when the company was\nin constant firefighting mode, and knew a thing or two about dealing with the\nkind of situation the team was in. He would now assume the role of Trifecta’s\nTech Lead.\n\nWith a renewed sense of purpose, the team looked back at the roadmap and\nreassessed priorities. This would be a challenging project. Daunting, yes.\nInsurmountable? Not quite.\n\n> If you’ve read GOJEK’s essential reading list\n[https://blog.gojekengineering.com/the-go-jek-reading-list-1088712ccc14], you\nmay have noticed that The Mythical Man Month is one of the books we swear by,\nand one of its core tenets is: “Adding more people to a late software project\nmakes it later.”\n> We added four more engineers to the team.\n\n--------------------------------------------------------------------------------\n\nDimensions and distant visions\nGOJEK did not have previously devised solutions for the drifts it was dealing\nwith. It needed new ones.\n\nTackling configuration drift.\n\nIt would now be Trifecta’s job to create a location within which services for\ndifferent environments could be configured and accessed.\n\nThe solution was a service that used a new API to update configurations across\ngeographies. These were then migrated to a configuration store.\n\nThis store was named Yggdrasil, the mythical Norse tree that connects the nine\nrealms. Even in the frenzied sprint to accomplish a daunting task, we could\nnever resist the temptation of poetic nomenclature. 😅\n\n> Yggdrasil changed how configs were stored and managed in GOJEK.\nTackling deployment drift\n\nCode.\n\nCode fuels GOJEK, and ensuring that updated code is running in sync is one of\nthe primary objectives of any team. Trifecta was no different — except for\nscale.\n\nThe team needed to figure out a way to ensure that the same version of code ran\nacross multiple, disconnected environments. It was time to forge a new\naccessory.\n\n> A Palantir — a seeing stone.\nWhen new versions of an application are released, there is a need to deploy the\nsame version on all countries for the given environment. Palantir would take\ncare of figuring out which countries the given deployment should go to.\n\nThe team also built a UI for Palantir, which gave a view of what version of a\nservice was deployed in which cluster and sent alerts when there was a drift.\n\nTackling the logging problem\n\nAs launch date drew closer, this particular problem required non-linear\nthinking. Trifecta implemented an out-of-the-box solution using Stackdriver to\nunblock themselves for the launch. This was not optimal, but it provided enough\nbreathing room to get through launch (post which specific tooling for logging on\ncontainers could be created).\n\nOnce again, the destination appeared near. With Yggdrasil keeping the services\nstable and Palantir keeping watch on code, GO-VIET was no longer a wistful\ndream, it was a visible apparition.\n\n\n--------------------------------------------------------------------------------\n\nRun with Red\nIf you visit Indonesia, chances are you’ll see bright flecks of green amidst the\ntraffic.\n\n> Green jackets, green helmets, green… everywhere. Green is now part of GOJEK’s\nidentity in Indonesia, it is instant mental recall for the brand.\n> But this was not Indonesia.\n> GO-VIET, it was decided, would be born in red.\nA local leadership team was put together in order to assemble other teams\nrequired for launch. This team was also flown to Jakarta to understand GOJEK’s\nvalues and how it works. These would serve as the core values for GO-VIET as\nwell, with the leadership adapting things as required to suit Vietnam.\n\nMeanwhile, Trifecta was stabilising the launch environment, collaborating with\nthe newly-minted team in Vietnam, and working with multiple GOJEK teams.\n\nBy June of 2018, the backend was ready. A working driver and consumer app, as\nwell as on-boarding portals for driver partners had been set up, along with\ncrucial business-related teams like BI and Fraud. GO-VIET was taking shape right\nin front of its makers’ eyes.\n\n> Now for the testing:\nOver the next one month, the app, and by extension, the new environment and\nassorted services, were put through the wringer. First, employees mocking as\ndrivers tried it in a staging environment, then the actual on-boarded drivers\nwere given a shot, so the team could record their feedback.\n\nTesting then moved to the production environment. It was time for the real deal.\nThe dry runs began, and in the final phase of testing, early adopters were given\naccess to try out the alpha version of the app.\n\nFinally, it was done. The environment, the services, the app, the operations,\nthe tree, the stone… they had all survived.\n\n> GO-VIET was ready.\n\n--------------------------------------------------------------------------------\n\nThe final push\nJuly 31, 2018 — Vietnam Beckoned\n\nThe environment was ready, everything was up and running. The app was live, with\nconfigurations changed so drivers would not be visible to anyone who downloaded\nit.\n\nGearing up for launch.At 11.30 pm, the toggle was switched and test bookings\nwere made on production with actual drivers and employees. The GO-VIET COO took\nthe first ride. All was good.\n\nExcitement was running high, and even GOJEK CEO Nadiem Makarim was in Ho-Chi\nMinh City (the first of GO-VIET’s operation centres) for the launch.\n\nAs the clock struck midnight, Trifecta hit the button, and specks of red lit up\non the map within users’ GO-VIET apps. A few driver partners present at the\nlaunch venue confirmed that everything was working according to plan. It was\ndone, we were live.\n\nCelebrating a job well done.> GOJEK had gone international.\nCheers, high fives, applause, congratulations, the pop of celebratory drinks.\n\nVietnam, we’re here!Rumour has it, everyone present tried to guess how many\norders GO-VIET would garner on its first day. Expectations were exceeded. The\nbrand new service did >2,500 orders on day one, more than what GOJEK achieved on\nits first day in Indonesia.\n\nIt had been a long journey of planning and learning. The job was done; the path\nto Vietnam was charted. In the month of September, a formal launch was held,\nadding Hanoi to the list of cites the service operated in.\n\nGOJEK, Indonesia’s first unicorn, had finally left home to find its place in the\nworld. Now, all eyes turned to Thailand. Read what awaited us there in the part\nthree [http://bit.ly/2SmYCZ3] of this series.\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Have our updates delivered straight to your inbox. Sign up\nfor our newsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Sooraj Rajmohan</p><p>You are reading part two of a three-part series chronicling GOJEK’s entry into international markets, and the team that helped make it possible. If you haven’t read part one, get up to speed here.</p><h1 id=\"part-2-3-initiation\">Part 2/3 | Initiation</h1><p>When we left Trifecta — the team responsible for charting GOJEK’s international expansion — in the last part of this series, the team was working on setting up a new environment for launch in Vietnam. But now, there were new problems to tackle.</p><p><strong><strong>Problem #1: Configuration drift</strong></strong></p><p>Until this point, GOJEK had always operated within Indonesia, but Trifecta was now in unmapped territory, building a completely new environment for GOJEK’s services in Vietnam. The services now needed to be configured separately across geographies, and there was no central location to manage these configurations effectively. This meant there was a chance of configuration inconsistencies creeping in over time (hence the term ‘drift’).</p><p><strong><strong>Problem #2: Deployment drift</strong></strong></p><p>Even if the team hacked a solution for the first problem, deploying the code would pose another one. It was imperative that the same version of code run on all the environments (the existing one in Indonesia, the one being built for Vietnam, and any future ones). Failing this, supporting services across countries would be a nightmare.</p><blockquote><em><em>That wasn’t the kind of risk a startup that expounds lean engineering could afford to take.</em></em></blockquote><p><strong><strong>Problem #3: A logging and monitoring solution for the Kubernetes cluster.</strong></strong></p><p>As this was the first time containers were being used by GOJEK, a new logging solution would be required for future debugging needs.</p><p><em><em>Much time had been lost already, it was time to bring in the big guns.</em></em></p><p>Even as the team dodged obstacles and took detours, making the best use of available resources, Project Managers Sourabh Gupta and Sanchit Juneja had been communicating with other teams for backup. They had found some ad-hoc support, but to see this journey through would need more seasoned soldiers.</p><p>Finally, this effort came to fruition.</p><h1 id=\"trifecta-v2-0\">Trifecta V2.0</h1><p>After some negotiation, the team got the go-ahead for Sumit Gupta, another GOJEK veteran, to make the transition from GOJEK’s Atlas team to join Trifecta full time. Sumit had led GOJEK’s scaling efforts back in 2015, when the company was in constant firefighting mode, and knew a thing or two about dealing with the kind of situation the team was in. He would now assume the role of Trifecta’s Tech Lead.</p><p>With a renewed sense of purpose, the team looked back at the roadmap and reassessed priorities. This would be a challenging project. <strong><strong>Daunting, yes. Insurmountable? Not quite.</strong></strong></p><blockquote><em><em><em>If you’ve read </em><a href=\"https://blog.gojekengineering.com/the-go-jek-reading-list-1088712ccc14\" rel=\"noopener\"><em>GOJEK’s essential reading list</em></a><em>, you may have noticed that </em>The Mythical Man Month<em> is one of the books we swear by, and one of its core tenets is: “Adding more people to a late software project makes it later.”</em></em></em></blockquote><blockquote>We added four more engineers to the team.</blockquote><hr><h1 id=\"dimensions-and-distant-visions\">Dimensions and distant visions</h1><p>GOJEK did not have previously devised solutions for the drifts it was dealing with. It needed new ones.</p><p><strong><strong>Tackling configuration drift.</strong></strong></p><p>It would now be Trifecta’s job to create a location within which services for different environments could be configured and accessed.</p><p>The solution was a service that used a new API to update configurations across geographies. These were then migrated to a configuration store.</p><p>This store was named Yggdrasil, the mythical Norse tree that connects the nine realms. Even in the frenzied sprint to accomplish a daunting task, we could never resist the temptation of poetic nomenclature. 😅</p><blockquote>Yggdrasil changed how configs were stored and managed in GOJEK.</blockquote><p><strong><strong>Tackling deployment drift</strong></strong></p><p><em><em>Code</em></em>.</p><p>Code fuels GOJEK, and ensuring that updated code is running in sync is one of the primary objectives of any team. Trifecta was no different — except for scale.</p><p>The team needed to figure out a way to ensure that the same version of code ran across multiple, disconnected environments. It was time to forge a new accessory.</p><blockquote>A Palantir — a seeing stone.</blockquote><p>When new versions of an application are released, there is a need to deploy the same version on all countries for the given environment. Palantir would take care of figuring out which countries the given deployment should go to.</p><p>The team also built a UI for Palantir, which gave a view of what version of a service was deployed in which cluster and sent alerts when there was a drift.</p><p><strong><strong>Tackling the logging problem</strong></strong></p><p>As launch date drew closer, this particular problem required non-linear thinking. Trifecta implemented an out-of-the-box solution using Stackdriver to unblock themselves for the launch. This was not optimal, but it provided enough breathing room to get through launch (post which specific tooling for logging on containers could be created).</p><p>Once again, the destination appeared near. With Yggdrasil keeping the services stable and Palantir keeping watch on code, GO-VIET was no longer a wistful dream, it was a visible apparition.</p><hr><h1 id=\"run-with-red\">Run with Red</h1><p>If you visit Indonesia, chances are you’ll see bright flecks of green amidst the traffic.</p><blockquote><em><em>Green jackets, green helmets, green… everywhere. Green is now part of GOJEK’s identity in Indonesia, it is instant mental recall for the brand.</em></em></blockquote><blockquote><em><em>But this was not Indonesia.</em></em></blockquote><blockquote>GO-VIET, it was decided, would be born in red.</blockquote><p>A local leadership team was put together in order to assemble other teams required for launch. This team was also flown to Jakarta to understand GOJEK’s values and how it works. These would serve as the core values for GO-VIET as well, with the leadership adapting things as required to suit Vietnam.</p><p>Meanwhile, Trifecta was stabilising the launch environment, collaborating with the newly-minted team in Vietnam, and working with multiple GOJEK teams.</p><p>By June of 2018, the backend was ready. A working driver and consumer app, as well as on-boarding portals for driver partners had been set up, along with crucial business-related teams like BI and Fraud. GO-VIET was taking shape right in front of its makers’ eyes.</p><blockquote>Now for the testing:</blockquote><p>Over the next one month, the app, and by extension, the new environment and assorted services, were put through the wringer. First, employees mocking as drivers tried it in a staging environment, then the actual on-boarded drivers were given a shot, so the team could record their feedback.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/2592/1*dTinrKKxi8iegPBzQWP9Hg.jpeg\" class=\"kg-image\"></figure><p>Testing then moved to the production environment. It was time for the real deal. The dry runs began, and in the final phase of testing, early adopters were given access to try out the alpha version of the app.</p><p>Finally, it was done. The environment, the services, the app, the operations, the tree, the stone… they had all survived.</p><blockquote>GO-VIET was ready.</blockquote><hr><h1 id=\"the-final-push\">The final push</h1><p><strong><strong><em><em>July 31, 2018 — Vietnam Beckoned</em></em></strong></strong></p><p>The environment was ready, everything was up and running. The app was live, with configurations changed so drivers would not be visible to anyone who downloaded it.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/4032/1*qskOob8GzQG4dfQNtb6__Q.jpeg\" class=\"kg-image\"><figcaption>Gearing up for launch.</figcaption></figure><p>At 11.30 pm, the toggle was switched and test bookings were made on production with actual drivers and employees. The GO-VIET COO took the first ride. All was good.</p><p>Excitement was running high, and even GOJEK CEO Nadiem Makarim was in Ho-Chi Minh City (the first of GO-VIET’s operation centres) for the launch.</p><p>As the clock struck midnight, Trifecta hit the button, and specks of red lit up on the map within users’ GO-VIET apps. A few driver partners present at the launch venue confirmed that everything was working according to plan. It was done, we were live.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1280/1*rGFDGc901ooLhdNl_GL7gw.jpeg\" class=\"kg-image\"><figcaption>Celebrating a job well done.</figcaption></figure><blockquote>GOJEK had gone international.</blockquote><p><em><em>Cheers, high fives, applause, congratulations, the pop of celebratory drinks.</em></em></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2592/1*dhwgBni28DIMJSGDuGr_vQ.jpeg\" class=\"kg-image\"><figcaption>Vietnam, we’re here!</figcaption></figure><p>Rumour has it, everyone present tried to guess how many orders GO-VIET would garner on its first day. Expectations were exceeded. The brand new service did &gt;2,500 orders on day one, more than what GOJEK achieved on its first day in Indonesia.</p><p>It had been a long journey of planning and learning. The job was done; the path to Vietnam was charted. In the month of September, a formal launch was held, adding Hanoi to the list of cites the service operated in.</p><p>GOJEK, Indonesia’s first unicorn, had finally left home to find its place in the world. Now, all eyes turned to Thailand. Read what awaited us there in the <a href=\"http://bit.ly/2SmYCZ3\" rel=\"noopener\">part three</a> of this series.</p><hr><p>Liked what you read? Have our updates delivered straight to your inbox. <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/good-morning-vietnam-how-gojek-went-international/","canonical_url":null,"uuid":"e532311c-c2fe-4c5e-b749-0485b54d8f93","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2d7e47aa22c4066f83ca4","reading_time":6}},{"node":{"id":"Ghost__Post__5ec2aba47aa22c4066f83a79","title":"Gojek acquires AirCTO, expands operations in India","slug":"gojek-acquires-aircto-expands-operations-in-india","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_pv9f5vZHkiQGWL-ymwtzgA.jpeg","excerpt":"The AirCTO team will aid GOJEK’s hiring efforts. The company also announced its first office in Gurgaon with the intent to hire 100 employees.","custom_excerpt":"The AirCTO team will aid GOJEK’s hiring efforts. The company also announced its first office in Gurgaon with the intent to hire 100 employees.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"12 June, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T21:07:08.000+05:30","published_at":"2019-06-12T09:30:00.000+05:30","updated_at":"2020-05-18T21:19:30.000+05:30","meta_title":null,"meta_description":"The AirCTO team will aid GOJEK’s hiring efforts. The company also announced its first office in Gurgaon with the intent to hire 100 employees.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"News","slug":"news","description":"The latest official updates from Gojek—announcements, press releases, and news stories.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"News","slug":"news","description":"The latest official updates from Gojek—announcements, press releases, and news stories.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":" * GOJEK acquires AirCTO, a Bangalore-based company that uses AI tools to\n   accelerate recruitment\n * GOJEK also opens office in Gurgaon, to hire 100+ people and expand operations\n * Plans to acquire companies to add to the existing talent pool\n\nGURGAON: GOJEK [https://www.gojek.io/], the Super App of Southeast Asia,\nacquired AirCTO, a Bangalore-based Artificial Intelligence recruitment platform,\nand opened its second engineering and product development centre in Gurgaon.\n\nAs part of the deal, the AirCTO team will be joining GOJEK with immediate effect\nand will be looking into building products that accelerate the recruitment of\ntalent for GOJEK. The acquisition aligns with GOJEK’s focus on hiring premium\ntalent to support the development of its ‘Super App\n[https://www.gojek.io/superapp/]’. Terms of the deal were not disclosed.\n\nThe company has also announced the opening of a new office in Gurgaon, for which\nGOJEK plans to hire 100 employees aiming to reach a total headcount of 500 in\nIndia by the year-end. As part of its expansion plans, the company is also\nconsidering further acquisitions in India.\n\nThe Indonesian-headquartered company is actively interested in companies with\ncomplementary expertise in engineering, design and product management.\n\nQuotes:\n\n“Our investment in Gurgaon underlines our commitment to growing the GOJEK India\nstory. We have looked at multiple ways to expand our operations and concluded\nthat Gurgaon is a logical destination to set up shop, not least because of the\namazing talent we have found in the area. GOJEK recorded an annualized Gross\nTransaction Value (GTV) of US$9 billion as of 2018, and the hyper-growth journey\nwe’ve been on demands talent who are willing to take risks, fail, learn and\ncontinue to scale a company that aims to solve everyday problems for Southeast\nAsia. With operations underway in Singapore, Thailand and Vietnam, we will now\nconsider whether further acquisitions are needed as we seek to bring in\nentrepreneurial teams who can help us further develop the multi-service business\nmodel that makes GOJEK a leader in Southeast Asia,” said Sidu Ponnappa, MD India\nat GOJEK.\n\nOn the acquisition of AirCTO, Sidu added, “I’m super thrilled to have AirCTO’s\ntalented team join us. The team will use technology to help us scale up our\nhiring processes. Finding quality talent is always a challenge, and Atif and\nteam are here to find technology-based solutions that will help us to overcome\nthis challenge.”\n\nAtif Haider, Founder, AirCTO, said, “At AirCTO we’ve focused on the pain points\ntechnology firms experience as they seek to find talent that fits their\nrequirements. We believe that recruiting as an industry needs a major upheaval,\nand we started AirCTO with this in mind. Over the past three years, we’ve helped\na range of startups and corporates source qualified candidates for critical\ntechnology roles. We were in talks with a number of other tech giants, but we\nfound GOJEK to be the best fit, as we share similar DNA — something that’s\nreally important for us. We intend to use our prowess in recruitment to\ncontribute to the hyper-growth GOJEK is currently experiencing across Southeast\nAsia.”\n\nLocated at DLF CyberHub, Gurgaon, the 18,000+ sq.ft office is equipped to seat\naround 150+ employees. The centre offers all amenities including a 24/7 office\nwith a cafeteria. The interiors reflect GOJEK’s signature combination of green\nand white with a touch of wood. The office will be a combination of open spaces,\nbreakout areas for discussions, meeting rooms and coder caves.\n\nThe GOJEK Bangalore office recently won an Institute of Indian Interior\nDesigners (IIID) award for the ‘Best Design’ category.\n\nAs part of the expansion, GOJEK’s largest India-based product team, GO-FOOD,\nwill setup product divisions in the Gurgaon office. GOJEK is the largest\nsingle-market food delivery app in the world outside of China. It is the largest\nfood delivery app in SoutheastAsia with over 400,000 merchants — 85% of these\nare small micro-entrepreneurs that rely heavily on GO-FOOD for revenue.\n\nWorking at GOJEK gives an opportunity to solve real challenges and transform\nlives across Southeast Asia. Earlier this year, Melinda Gates, Co-Chair of the\nBill & Melinda Gates Foundation\n[https://twitter.com/gojektech/status/1095372174070665216], called out GOJEK’s\nuse of technology as a case study on how digital tools can help increase growth\nand inclusion. The company’s vision has fuelled the culture of ‘Social Impact’\nand its deep narratives that can help the lives of millions.\n\nGOJEK currently runs one of the largest JRuby, Clojure, Java and Go clusters in\nAsia. Its robust tech-infrastructure is built and managed by just 350+ engineers\npositively impacting millions in Indonesia, Singapore, Thailand and Vietnam.\n\nAt the beginning of the year, GOJEK announced the first closing of its ongoing\nSeries F funding round led by Google, JD.com, and Tencent, along with Mitsubishi\nCorporation and Provident Capital. For more information click here\n[https://www.gojek.io/google-jdcom-and-tencent-lead-first-closing-of-gojeks-series-f-funding-round/]\n.\n\n\n--------------------------------------------------------------------------------\n\nFor media queries, contact apoorva.babu@go-jek.com.","html":"<ul><li><em><em>GOJEK acquires AirCTO, a Bangalore-based company that uses AI tools to accelerate recruitment</em></em></li><li><em><em>GOJEK also opens office in Gurgaon, to hire 100+ people and expand operations</em></em></li><li><em><em>Plans to acquire companies to add to the existing talent pool</em></em></li></ul><p><strong><strong>GURGAON:</strong></strong> <a href=\"https://www.gojek.io/\" rel=\"noopener\">GOJEK</a>, the Super App of Southeast Asia, acquired AirCTO, a Bangalore-based Artificial Intelligence recruitment platform, and opened its second engineering and product development centre in Gurgaon.</p><p>As part of the deal, the AirCTO team will be joining GOJEK with immediate effect and will be looking into building products that accelerate the recruitment of talent for GOJEK. The acquisition aligns with GOJEK’s focus on hiring premium talent to support the development of its ‘<a href=\"https://www.gojek.io/superapp/\" rel=\"noopener\">Super App</a>’. Terms of the deal were not disclosed.</p><p>The company has also announced the opening of a new office in Gurgaon, for which GOJEK plans to hire 100 employees aiming to reach a total headcount of 500 in India by the year-end. As part of its expansion plans, the company is also considering further acquisitions in India.</p><p><strong><strong>The Indonesian-headquartered company is actively interested in companies with complementary expertise in engineering, design and product management.</strong></strong></p><p><strong><strong>Quotes:</strong></strong></p><p>“Our investment in Gurgaon underlines our commitment to growing the GOJEK India story. We have looked at multiple ways to expand our operations and concluded that Gurgaon is a logical destination to set up shop, not least because of the amazing talent we have found in the area. GOJEK recorded an annualized Gross Transaction Value (GTV) of US$9 billion as of 2018, and the hyper-growth journey we’ve been on demands talent who are willing to take risks, fail, learn and continue to scale a company that aims to solve everyday problems for Southeast Asia. With operations underway in Singapore, Thailand and Vietnam, we will now consider whether further acquisitions are needed as we seek to bring in entrepreneurial teams who can help us further develop the multi-service business model that makes GOJEK a leader in Southeast Asia,” said <strong><strong>Sidu Ponnappa, MD India at GOJEK.</strong></strong></p><p>On the acquisition of AirCTO, <strong><strong>Sidu </strong></strong>added, “I’m super thrilled to have AirCTO’s talented team join us. The team will use technology to help us scale up our hiring processes. Finding quality talent is always a challenge, and Atif and team are here to find technology-based solutions that will help us to overcome this challenge.”</p><p><strong><strong>Atif Haider, Founder, AirCTO,</strong></strong> said, “At AirCTO we’ve focused on the pain points technology firms experience as they seek to find talent that fits their requirements. We believe that recruiting as an industry needs a major upheaval, and we started AirCTO with this in mind. Over the past three years, we’ve helped a range of startups and corporates source qualified candidates for critical technology roles. We were in talks with a number of other tech giants, but we found GOJEK to be the best fit, as we share similar DNA — something that’s really important for us. We intend to use our prowess in recruitment to contribute to the hyper-growth GOJEK is currently experiencing across Southeast Asia.”</p><p>Located at DLF CyberHub, Gurgaon, the 18,000+ sq.ft office is equipped to seat around 150+ employees. The centre offers all amenities including a 24/7 office with a cafeteria. The interiors reflect GOJEK’s signature combination of green and white with a touch of wood. The office will be a combination of open spaces, breakout areas for discussions, meeting rooms and coder caves.</p><p>The GOJEK Bangalore office recently won an Institute of Indian Interior Designers (IIID) award for the ‘Best Design’ category.</p><p>As part of the expansion, GOJEK’s largest India-based product team, GO-FOOD, will setup product divisions in the Gurgaon office. GOJEK is the largest single-market food delivery app in the world outside of China. It is the largest food delivery app in SoutheastAsia with over 400,000 merchants — 85% of these are small micro-entrepreneurs that rely heavily on GO-FOOD for revenue.</p><p>Working at GOJEK gives an opportunity to solve real challenges and transform lives across Southeast Asia. Earlier this year, <a href=\"https://twitter.com/gojektech/status/1095372174070665216\" rel=\"noopener\">Melinda Gates, Co-Chair of the Bill &amp; Melinda Gates Foundation</a>, called out GOJEK’s use of technology as a case study on how digital tools can help increase growth and inclusion. The company’s vision has fuelled the culture of ‘Social Impact’ and its deep narratives that can help the lives of millions.</p><p>GOJEK currently runs one of the largest JRuby, Clojure, Java and Go clusters in Asia. Its robust tech-infrastructure is built and managed by just 350+ engineers positively impacting millions in Indonesia, Singapore, Thailand and Vietnam.</p><p>At the beginning of the year, GOJEK announced the first closing of its ongoing Series F funding round led by Google, JD.com, and Tencent, along with Mitsubishi Corporation and Provident Capital. For more information click <a href=\"https://www.gojek.io/google-jdcom-and-tencent-lead-first-closing-of-gojeks-series-f-funding-round/\" rel=\"noopener\">here</a><strong><strong>.</strong></strong></p><hr><p><strong><strong>For media queries, contact apoorva.babu@go-jek.com.</strong></strong></p>","url":"https://gojek-ghost.zysk.in/gojek-acquires-aircto-expands-operations-in-india/","canonical_url":null,"uuid":"35c09fb1-63c9-4cb6-b269-bfaf50b40990","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2aba47aa22c4066f83a79","reading_time":3}},{"node":{"id":"Ghost__Post__5eb11d87f7c7da001effccc0","title":"A Tale of Two Designs","slug":"a-tale-of-two-designs","featured":false,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/3.gif","excerpt":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.","custom_excerpt":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"16 May, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T13:32:15.000+05:30","published_at":"2019-05-16T09:30:00.000+05:30","updated_at":"2020-05-12T11:54:33.000+05:30","meta_title":"A Tale of Two Desings","meta_description":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 3 of 3) Back to the drawing board.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Fatema Raja\n\nThis is the final part of a three-part series documenting the redesign of\nGoFood’s Checkout experience.\n\nThe story so far: The GoFood redesign started by showing some much needed love\nto the ‘Checkout’ flow (read about the problems in part 1\n[http://bit.ly/2U8mm7s] of this series). We moved from an overwhelming single\npage with too much information, to a more intuitive two-step design with a hope\nthat the new design will help our users navigate the flow better (detailed in \npart two [http://bit.ly/2FUiYDo]).\n\nWe rolled out the design to beta on August 12, 2018.\n\nThis is what our redesigned flow looked like?\n\nOne week later:\nA 10% drop in our orders!!?\n\nThat… did not go according to plan. ?\n\nBut here’s the fun part: The app worked, and the bookings went through. No major\nout-of-whack tech issues. Yet, there we were, steadily losing orders.\n\nBugs? No.\n\nServer issues? Nope.\n\nDowntime, then? Nuh-uh.\n\nAfter many such questions and no answer, we were left with just one conclusion.\n?\n\nThe design change had made things worse.\n\nJust when I thought my job was done, I realised it was only the beginning. For I\nknew, no solution was good enough until users were successfully using it.\n\nStrap in, we’re in the Endgame now ?\nPrior to launch, we had rallied the team around a common definition of success —\none that was quantifiable and easily measured. 10% drop in our orders did seem\ntragic, but we knew looking at a single metric wasn’t going to give us the full\nstory.\n\nHence along with defining success metrics for our overall conversions, we also\ndefined and tracked metrics for the smaller tasks, tasks that led the user to\nthe final goal. This helped us monitor whether users were navigating through the\nflow as intended. As a designer it was important to not restrict myself to just\nwireframes and workflows, but participate and know these numbers inside out.\n\n“Designers who are involved in setting success metrics are far better at driving\nimpact than designers who are not”\n\n— Julie Zhuo\n\nFocusing on post launch productivity ?\nWhen the overall booking rate dropped, we started digging deeper to find where\nthe frictions were in the flow. We started sifting through the finer details and\nclosely analysed the smaller tasks, the results were a bit surprising.\n\n * By moving the location card to the top, our cancellation rate for wrong\n   address selected dropped by 2% —First win☝️\n * There was no significant drop in the notes or dishes added to the cart. Much\n   to our relief, the new interface was intuitive, users were able to locate the\n   notes button and other dish details— Second win ✌️\n * Similar affirmative results with our payments and location card designs too — \n   More wins! ?\n * But, there was one issue. Most users who abandoned the flow, left it on the\n   first step itself. Which meant nearly 8% of users did not even land on the\n   second step of the redesigned flow — Big Loss ?\n\nOur sanest conclusion was to wait, and give our users some time to get a hang of\nthe new designs. After all, old habits die hard. Thousands of our users who were\npreviously used to a single step now had to break a solid habit.\n\nYes, the old design was unacceptable (well, in the designer world at least ?).\nThe new design — despite featuring enhanced UX — broke some habits for our\nusers.\n\nA week passed… then two…\n\nNothing changed. ️\n\nAfter shuffling through tons of data, we found ourselves with a bunch of\nquestions. Who were the users who abandoned their food at checkout? What were\nthey thinking? Why would they do this?\n\nTo get these answered we coupled our quantitative data with some qualitative\nresearch — below are some crude user thoughts ?\n\nThere were two major problems:\n\n 1. Previously used to a single step, users weren’t prepared for a step 2.\n\n2. Most users added only 1–2 dishes, and for them the blank white space meant\nloading. Resulting in high uncertainty and agitation ?\n\nHence, most of them were reluctant to click on NEXT with the fear of placing the\norder — without them knowing the payment method or location ?\n\nWe were evidently drowning, but before we called for the lifebuoy, we tried to\nswim up ourselves. Not ready to give up on our precious designs, we decided to\nbring down the uncertainty by changing the copy on the button to Proceed To Pay.\nWe hoped this would nudge users to realise there is a step 2 containing payment\ninformation.\n\n\nThe Hail Mary play.Did it work? Did the uncertainty drop?\n\nMuch to our despair…nothing changed, no major impact. Neither were we able to\nbring down the booking time, nor were we able to increase the conversion rate.\nNot even close to what we anticipated.\n\nMurder your darlings ??\nWe had to be more open minded. If most of our users seemed unhappy with the\ndesign. we simply had to change it, Period ✋. It was time to hit the dashboards,\nanalyse the problems, and form new ideas for improvements. With the growing\nnumbers, one thing was clear, users wanted to bring back the single page.\n\nFor our final solution we shifted from logic to emotion, focusing more on user’s\nthoughts and feelings at the time of ordering.\n\nI asked myself, if I were a user and I had to know three things about my order,\nwhat would those be? ? — Card sorting came in super handy\n\n * Location Card — I want my food to come to me. I am hungry and the last thing\n   I want is my food going to someone else ?. With a drop in the cancellation\n   rate forwrong address selected, we knew retaining location card at the top\n   worked like magic.\n * Dish Card — If I am craving for a pizza, I better order the right pizza. \n   Right below the location card was the dish card, helping users easily double\n   check the dishes they added ?\n * Total amount and mode of payment — Once I get my pizza, I don’t want to run\n   around looking for cash. By sticking the total amount and payment method with\n   the order button at bottom of the screen, we saved our users a long scroll.\n   This also created a neat space to surface discounts and savings ?\n\nThe final design was a single page with all three important fields (location,\ndish and payment) above the fold and easily accessible. An example of how it\nworked ?\n\nThese lightweight and progressive changes, helped our users cultivate new habits\nslowly and steadily, making the redesign bearable for them ?\n\nShipping — Climbing back onto the boat ?‍♀️\nWe were finally ready to roll, no leap of faith this time!\n\nOn September 5, 2018. We rolled out our final solution to ~50k users, without\nrolling back any of the previous designs. We now had three designs live with\nthree different user groups.\n\n * Group 1 — Control Group (users with existing designs i.e. long scroll)\n * Group 2 — Two-step checkout redesign\n * Group 3 — Single step redesign\n\nSuch a meaty chance to dissect and compare quantitative results. ? It helped me\nstudy and analyse the impact of all three designs against each other.\n\nA day passed…\n\nThen two…\n\nThen a week or three later\n\nWe checked the data, ran the numbers, and validated our original hypothesis.\n\nIt had worked ?\n\nThe simplified single page was stabilising the order graph. Soon, our booking\nrate was moving north (obviously not in a dramatic way), but it had gone up by\n~5% and we saw a significant drop in the booking time.\n\n\nThese lightweight and progressive changes, helped our users cultivate new habits\nslowly and steadily, making the redesign bearable for them ?\n\nShipping — Climbing back onto the boat ?‍♀️\nWe were finally ready to roll, no leap of faith this time!\n\nOn September 5, 2018. We rolled out our final solution to ~50k users, without\nrolling back any of the previous designs. We now had three designs live with\nthree different user groups.\n\n * Group 1 — Control Group (users with existing designs i.e. long scroll)\n * Group 2 — Two-step checkout redesign\n * Group 3 — Single step redesign\n\nSuch a meaty chance to dissect and compare quantitative results. ? It helped me\nstudy and analyse the impact of all three designs against each other.\n\nA day passed…\n\nThen two…\n\nThen a week or three later\n\nWe checked the data, ran the numbers, and validated our original hypothesis.\n\nIt had worked ?\n\nThe simplified single page was stabilising the order graph. Soon, our booking\nrate was moving north (obviously not in a dramatic way), but it had gone up by\n~5% and we saw a significant drop in the booking time.\n\nAfter enough validation, we incrementally rolled back the previous designs and\nmoved all our users to the new designs one group at a time. And finally, the\nfirst piece of the GoFood redesign pie, was baked to perfection. The sweet taste\nof success! (We like food puns, it can’t be helped! ??‍♀️)\n\nOne part was over, designs were done!\n\nOr were they?\n\nGoFood is a fast-growing product, either adding features or enhancing current\nexperience. Not a lot of time had passed after the design rollout, that the team\ndecides to up-sell dishes on the checkout screen. It is interesting how (Sajesh\nJose\n[https://medium.com/u/b1f28485b3fa?source=post_page-----8c6a57fbfe05----------------------] \nand Sugam Anand\n[https://medium.com/u/1414f939f610?source=post_page-----8c6a57fbfe05----------------------]\n) are trying to fit yet another component on the checkout screen, here’s a\nglimpse?\n\nDesign is a journey, not a destination ❤️\n\nThe idea is to keep measuring, learning and evolving, whether it is adding a\nfeature or enhancing the current experience.\n\nDesign is in fact a continuous feedback loop that cajoles you into believing\nthere’s such a thing as product perfection.\n\nThis series was a way to disseminate my most important learnings from the GoFood\nredesign. I’ll leave you with a few key lessons learnt along the way:\n\nIf you fail: question it and fix it.\n\nIf you succeed: question it still, and make it better.\n\nIterate. Release. Validate. Repeat.\n\nFin.\n\n\n--------------------------------------------------------------------------------\n\n(Special shoutout to Debayan Sen\n[https://medium.com/u/65fccde63fdf?source=post_page-----8c6a57fbfe05----------------------]\n, Parveen Suhag\n[https://medium.com/u/29aa9cd53075?source=post_page-----8c6a57fbfe05----------------------] \nand @geppegalih\n[https://medium.com/u/6549243f2318?source=post_page-----8c6a57fbfe05----------------------]\n).","html":"<p>By Fatema Raja</p><p>This is the final part of a three-part series documenting the redesign of GoFood’s Checkout experience.</p><p><strong><strong>The story so far:</strong></strong> The GoFood redesign started by showing some much needed love to the ‘Checkout’ flow (read about the problems in <a href=\"http://bit.ly/2U8mm7s\" rel=\"noopener\">part 1</a> of this series). We moved from an overwhelming single page with too much information, to a more intuitive two-step design with a hope that the new design will help our users navigate the flow better (detailed in <a href=\"http://bit.ly/2FUiYDo\" rel=\"noopener\">part two</a>).</p><p>We rolled out the design to beta on August 12, 2018.</p><p><strong><strong>This is what our redesigned flow looked like?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1434/1*wC6FYnnJilFxFkYwab1kLw.png\" class=\"kg-image\"></figure><h2 id=\"one-week-later-\">One week later:</h2><p>A 10% drop in our orders!!?</p><p>That… did not go according to plan. ?</p><p>But here’s the fun part: <strong><strong>The app worked, and the bookings went through.</strong></strong> No major out-of-whack tech issues. Yet, there we were, steadily losing orders.</p><p><em><em>Bugs? No.</em></em></p><p><em><em>Server issues? Nope.</em></em></p><p><em><em>Downtime, then? Nuh-uh.</em></em></p><p>After many such questions and no answer, we were left with just one conclusion. ?</p><p><strong><strong>The design change had made things worse.</strong></strong></p><p>Just when I thought my job was done, I realised it was only the beginning. For I knew, no solution was good enough until users were <strong><strong><em><em>successfully</em></em> </strong></strong>using it.</p><h1 id=\"strap-in-we-re-in-the-endgame-now-\">Strap in, we’re in the Endgame now ?</h1><p>Prior to launch, we had rallied the team around a common definition of success — one that was quantifiable and easily measured. 10% drop in our orders did seem tragic, but we knew looking at a single metric wasn’t going to give us the full story.</p><p>Hence along with defining success metrics for our overall conversions, we also defined and tracked metrics for the smaller tasks, tasks that led the user to the final goal. This helped us monitor whether users were navigating through the flow as intended. As a designer it was important to not restrict myself to just wireframes and workflows, but participate and know these numbers inside out.</p><p>“Designers who are involved in setting success metrics are far better at driving impact than designers who are not”</p><p>— Julie Zhuo</p><h1 id=\"focusing-on-post-launch-productivity-\">Focusing on post launch productivity ?</h1><p>When the overall booking rate dropped, we started digging deeper to find where the frictions were in the flow. We started sifting through the finer details and closely analysed the smaller tasks, the results were a bit surprising.</p><ul><li>By moving the location card to the top, our cancellation rate for <code>wrong address selected</code> dropped by 2% —<strong><strong>First win</strong></strong>☝️</li><li>There was no significant drop in the notes or dishes added to the cart. Much to our relief, the new interface was intuitive, users were able to locate the notes button and other dish details— <strong><strong>Second win</strong></strong> ✌️</li><li>Similar affirmative results with our payments and location card designs too — <strong><strong>More wins! ?</strong></strong></li><li>But, there was one issue. Most users who abandoned the flow, left it on the first step itself. Which meant nearly 8% of users did not even land on the second step of the redesigned flow<strong><strong><em><em> — </em></em>Big Loss<em><em> </em></em>?</strong></strong></li></ul><p>Our sanest conclusion was to wait, and give our users some time to get a hang of the new designs. <strong><strong>After all, old habits die hard</strong></strong>. Thousands of our users who were previously used to a single step now had to break a solid habit.</p><p>Yes, the old design was unacceptable (well, in the designer world at least ?). The new design — despite featuring enhanced UX — broke some habits for our users.</p><p><strong><strong><em><em>A week passed… then two…</em></em></strong></strong></p><p>Nothing changed. ️</p><p>After shuffling through tons of data, we found ourselves with a bunch of questions. W<em><em>ho were the users who abandoned their food at checkout? What were they thinking? Why would they do this?</em></em></p><p>To get these answered we coupled our quantitative data with some qualitative research — below are some crude user thoughts ?</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3300/1*cv8FcC0pl0SQe4YkF8LHLQ.png\" class=\"kg-image\"></figure><p><strong><strong>There were two major problems:</strong></strong></p><ol><li>Previously used to a single step, users weren’t prepared for a step 2.</li></ol><p>2. Most users added only 1–2 dishes, and for them the blank white space meant loading. Resulting in high uncertainty and agitation ?</p><p>Hence, most of them were reluctant to click on <code>NEXT</code> with the fear of placing the order — without them knowing the payment method or location ?</p><p>We were evidently drowning, but before we called for the lifebuoy, we tried to swim up ourselves. Not ready to give up on our precious designs, we decided to bring down the uncertainty by changing the copy on the button to <code>Proceed To Pay</code>. We hoped this would nudge users to realise there is a step 2 containing payment information.<br></p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1275/1*2FPbepaD2x3qVwjjFlUM8g.png\" class=\"kg-image\"><figcaption>The Hail Mary play.</figcaption></figure><p><strong><strong><em><em>Did it work? Did the uncertainty drop?</em></em></strong></strong></p><p><strong><strong>Much to our despair…nothing changed, no major impact.</strong></strong> Neither were we able to bring down the booking time, nor were we able to increase the conversion rate. Not even close to what we anticipated.</p><h1 id=\"murder-your-darlings-\">Murder your darlings ??</h1><p>We had to be more open minded. If most of our users seemed unhappy with the design. we simply had to change it, Period ✋. It was time to hit the dashboards, analyse the problems, and form new ideas for improvements. With the growing numbers, one thing was clear, users wanted to <strong><strong>bring back the single page.</strong></strong></p><p>For our final solution we shifted from logic to emotion, focusing more on user’s thoughts and feelings at the time of ordering.</p><p>I asked myself, if I were a user and I had to know three things about my order, what would those be? ? — Card sorting came in super handy</p><ul><li><strong><strong>Location Card</strong></strong> — I want my food to come to me<strong><strong>. </strong></strong>I am hungry and the last thing I want is my food going to someone else ?. With a drop in the cancellation rate for<code>wrong address selected,</code> we knew retaining location card at the top worked like magic.</li><li><strong><strong>Dish Card — </strong></strong>If I am craving for a pizza, I better order the right pizza.<strong><strong> </strong></strong>Right below the location card was the<strong><strong> </strong></strong>dish card, helping users easily double check the dishes they added ?</li><li><strong><strong>Total amount and mode of payment — </strong></strong>Once I get my pizza, I don’t want to run around looking for cash. By sticking the total amount and payment method with the order button at bottom of the screen, we saved our users a long scroll. This also created a neat space to surface discounts and savings ?</li></ul><p><em><em><strong><strong>The final design was a single page with all three important fields (location, dish and payment) above the fold and easily accessible. An example of how it worked </strong></strong>?</em></em></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2808/1*P-Z4jTY31hMIs6FSqnLTmw.gif\" class=\"kg-image\"></figure><p>These lightweight and progressive changes, helped our users cultivate new habits slowly and steadily, making the redesign bearable for them ?</p><h1 id=\"shipping-climbing-back-onto-the-boat-\">Shipping — Climbing back onto the boat ?‍♀️</h1><p>We were finally ready to roll, no leap of faith this time!</p><p>On September 5, 2018. We rolled out our final solution to ~50k users, without rolling back any of the previous designs. We now had <strong><strong>three designs live </strong></strong>with three different user groups.</p><ul><li>Group 1 — Control Group (users with existing designs i.e. long scroll)</li><li>Group 2 — Two-step checkout redesign</li><li>Group 3 — Single step redesign</li></ul><p>Such a meaty chance to dissect and compare quantitative results. ? It helped me study and analyse the impact of all three designs against each other.</p><p><em><em>A day passed…</em></em></p><p><em><em>Then two…</em></em></p><p><em><em>Then a week or three later</em></em></p><p>We checked the data, ran the numbers, and validated our original hypothesis.</p><p>It had worked ?</p><p>The simplified single page was stabilising the order graph.<strong><strong> Soon, our booking rate was moving north (obviously not in a dramatic way), but it had gone up by ~5% and we saw a significant drop in the booking time.</strong></strong></p><p><br>These lightweight and progressive changes, helped our users cultivate new habits slowly and steadily, making the redesign bearable for them ?</p><h1 id=\"shipping-climbing-back-onto-the-boat--1\">Shipping — Climbing back onto the boat ?‍♀️</h1><p>We were finally ready to roll, no leap of faith this time!</p><p>On September 5, 2018. We rolled out our final solution to ~50k users, without rolling back any of the previous designs. We now had <strong><strong>three designs live </strong></strong>with three different user groups.</p><ul><li>Group 1 — Control Group (users with existing designs i.e. long scroll)</li><li>Group 2 — Two-step checkout redesign</li><li>Group 3 — Single step redesign</li></ul><p>Such a meaty chance to dissect and compare quantitative results. ? It helped me study and analyse the impact of all three designs against each other.</p><p><em><em>A day passed…</em></em></p><p><em><em>Then two…</em></em></p><p><em><em>Then a week or three later</em></em></p><p>We checked the data, ran the numbers, and validated our original hypothesis.</p><p>It had worked ?</p><p>The simplified single page was stabilising the order graph.<strong><strong> Soon, our booking rate was moving north (obviously not in a dramatic way), but it had gone up by ~5% and we saw a significant drop in the booking time.</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1233/1*jkIWit9XBQlFoqCjZEn2OA.png\" class=\"kg-image\"></figure><p>After enough validation, we incrementally rolled back the previous designs and moved all our users to the new designs one group at a time. And finally, the first piece of the GoFood redesign pie, was baked to perfection. The sweet taste of success! (We like food puns, it can’t be helped! ??‍♀️)</p><p><strong><strong>One part was over, designs were done!</strong></strong></p><p><em><em>Or were they?</em></em></p><p>GoFood is a fast-growing product, either adding features or enhancing current experience. Not a lot of time had passed after the design rollout, that the team decides to up-sell dishes on the checkout screen. It is interesting how (<a href=\"https://medium.com/u/b1f28485b3fa?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Sajesh Jose</a> and <a href=\"https://medium.com/u/1414f939f610?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Sugam Anand</a>) are trying to fit yet another component on the checkout screen, here’s a glimpse?</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3137/1*y23YjUSmlBR0HNbU7sSPbg.png\" class=\"kg-image\"></figure><p>Design is a journey, not a destination ❤️</p><p>The idea is to keep measuring, learning and evolving, whether it is adding a feature or enhancing the current experience.</p><p>Design is in fact a continuous feedback loop that cajoles you into believing there’s such a thing as product perfection.</p><p>This series was a way to disseminate my most important learnings from the GoFood redesign. I’ll leave you with a few key lessons learnt along the way:</p><p><em><em>If you fail: question it and fix it.</em></em></p><p><em><em>If you succeed: question it still, and make it better.</em></em></p><p><strong><strong><em><em>Iterate. Release. Validate. Repeat.</em></em></strong></strong></p><p>Fin.</p><hr><p>(Special shoutout to <a href=\"https://medium.com/u/65fccde63fdf?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Debayan Sen</a>, <a href=\"https://medium.com/u/29aa9cd53075?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">Parveen Suhag</a> and <a href=\"https://medium.com/u/6549243f2318?source=post_page-----8c6a57fbfe05----------------------\" rel=\"noopener\">@geppegalih</a>).</p>","url":"https://gojek-ghost.zysk.in/a-tale-of-two-designs/","canonical_url":null,"uuid":"7a9c1053-e3ca-402b-8187-1c7c7ede4c77","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb11d87f7c7da001effccc0","reading_time":7}},{"node":{"id":"Ghost__Post__5ec2d7d87aa22c4066f83c9e","title":"To New Frontiers — How GOJEK Went International","slug":"to-new-frontiers-how-gojek-went-international","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/2.gif","excerpt":"The story of how GOJEK ventured beyond Indonesia— and the team that charted our course.","custom_excerpt":"The story of how GOJEK ventured beyond Indonesia— and the team that charted our course.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"02 May, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-19T00:15:44.000+05:30","published_at":"2019-05-02T09:30:00.000+05:30","updated_at":"2020-05-19T00:40:23.000+05:30","meta_title":null,"meta_description":"The story of how GOJEK ventured beyond Indonesia— and the team that charted our course.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Sooraj Rajmohan\n\nPart 1/3 | Uncertainty\nIndonesia — a constellation of 17,000 islands sprinkled between two oceans. A\nmelting pot of ethnicities and cultures, home to the fourth largest population\nin the world, and ripe with business opportunity. This dazzling island nation is\nwhere GOJEK was born. Its chaotic streets were the playground where a scrappy\nyoung startup grew, and the love of its people saw GOJEK grow into a Super App.\n\n> For GOJEK, Indonesia is home. Comfortable. Familiar. Safe.\nThe story of a Super App, however, is about more than one country. It is about\ngrowing up, stepping out the door, and journeying into the unknown. This\nthree-part series details GOJEK’s journey beyond Indonesia’s borders, and the\nstory of the team that guided it through roads untraveled.\n\nThe mandate. The madness.\nIn late 2017, at a meeting of product leads at GOJEK’s Jakarta HQ, then COO\nRohan Monga confirmed the rumour that had been floating around hallways.\n\n> We were going abroad.\nOn paper, the idea was simple: GOJEK was targeting new markets in Southeast Asia\n— starting with Vietnam, Thailand and Philippines.\n\nThe reason for choosing these geographies went beyond the obvious (proximity).\nThese countries have similar dynamics to pre-GOJEK Indonesia. The population\nnumbers are in the same ballpark, broadband Internet penetration is high (and\ngrowing rapidly), the food delivery market is nascent, and there was no dominant\nplayer in the digital wallet space.\n\n> The conditions were ripe for disruption.\nThe plan was to launch swiftly and stealthily, and take competition by surprise.\nEach targeted geography even got its own codename. Vietnam was nicknamed Vogue,\nThailand dubbed Tatler, and Philippines — Fortune (notice a pattern? 😋)\n\nThis was only the beginning, however. The plan was more elaborate.\n\nIt was important to recreate this feeling of pride in the brand in the new\nmarkets as well. To achieve this, it was decided to launch the new offerings\nwith completely new branding — GO-VIET in Vietnam, and GET in Thailand.\nEverything about these new local brands was devised to emphasise the values of\nthat country.\n\nThe goal: to build a local champion — one that the people, as well as commercial\nand regulatory agencies — could get behind. The vision was solid. Everyone was\npumped.\n\nBut there was a problem:\n\n> Our existing tech stack was already buckling under the strain of ever-increasing\ndemand, and would not be able to handle new geographies.\nWe would need a different solution. GOJEK had crossed the borders of the\nfamiliar, into the unknown.\n\nOne of the options that made sense was to decouple from Indonesia and create new\nenvironments for the new countries. This way, the scaling issues affecting\nIndonesia would not affect the new geographies, and GOJEK developers also got\ngreater flexibility to customise and localise the app and products for the new\nmarkets.\n\nBut creating new environments/clusters (read mini-GOJEKs) came with its own set\nof complexities. This process also needed to be repeated in quick succession in\neach country.\n\nThe answer to this problem was using automation for cluster creation… but not on\nVM’s. To do something new, new technologies would have to be adopted. The path\nchosen was to use Kubernetes to automate cluster creation and service deployment\non containers.\n\nUnfortunately, no one at GOJEK had the insights or the bandwidth required to do\nthis at the time. We had the vision. We knew what needed to be done.\n\n> We needed the right people.\nEnter Team Trifecta\nIt all started with a Product Manager, who was tasked with putting together a\ngroup of people to accomplish the task ahead. About a week in, three QAs joined,\nfollowed in another week by an eight-member crack team who would develop the\ninitial Proof Of Concept (POC). The members of this team were cherry-picked from\nacross GOJEK product teams (with a fair bit of negotiation and bargaining\ninvolved 😅).\n\nIt would be this team’s duty to first run an efficient proof-of-concept (POC)\nfor the launch, and then develop frameworks, create playbooks, do product\ncustomisation and automate infrastructure creation and deployment. The idea was\nto create a scalable model and replicate it in any new country GOJEK wanted to\nlaunch in.\n\nInternational expansion was a big deal though, and an exciting challenge. As\nTrifecta’s work picked up steam, more people would put up their hands to work on\nthis exciting new project, over and above their existing responsibilities.\n\nWhile the core Trifecta team went about its business to create a POC, a\nspecialist four-person team was brought in. Their job was to work in parallel on\nour big play — automate cluster creation.\n\n> We had a fellowship. It was time for the journey.\nTrifecta’s first task was to figure out all the changes that had to be made to\nbuild a new app for each country. As soon as this project started, it became\napparent that a long uphill climb lay ahead.\n\nFor starters, the driver app was never built in a way to support any other\nlanguage besides Bahasa Indonesia. This had to be re-engineered so it could\nsupport localisation/i18n.\n\nAnd then there was Stan Marsh.\n\nStan Marsh [https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf] \nis a legendary name in the GOJEK mythos. It refers to our late legacy codebase.\nStan Marsh was the beast of burden that carried GOJEK through the early years,\nand each new commit made to it was often a desperate attempt to douse a fire and\nkeep GOJEK up and running. Understandably, a lot of legacy services and Stan\nMarsh were not designed to support GOJEK’s journey into new geographies.\n\nTrifecta members found stumbling blocks everywhere — there was no provision for\nnew currencies and time zones, for example. The pack mule was struggling to keep\nup with the party.\n\nOne thing was obvious — GOJEK’s entire mobile codebase had to be re-architected\nto be able to efficiently build multiple apps and designs on top of it.\n\n> Automation on Kubernetes would have to wait.\n> We had a detour to take.\nDescending into the mines\nFirst things first — Trifecta needed an environment to play around in and do the\ntesting without affecting the BAU. The team dusted off an old User Acceptance\nTesting (UAT) environment, which was not in use at the time, and proceeded to do\nexperimentation and development within it. Slowly, the GOJEK app was dismantled\nand rebuilt into a new avatar that would service new markets.\n\nThis turned out to be a lot more complicated than it first sounded (which is a\ncommon plot point throughout this story, as you will see 😐). Major changes\nneeded to be made to the driver onboarding portal, for instance, and the team\nneeded to figure out ways to transfer money from the wallets of driver partners\ninto their bank accounts.\n\nGOJEK was always used to having multiple support teams, and well-established\nbank integrations to help with such matters. In this new territory, it all\nneeded to be figured out from scratch. Add to the fact that GOJEK itself was\nrapidly evolving, making it difficult for the team to figure out which services\nshould be transitioned and which would soon be deprecated, and the job became\nmore complex. As Trifecta PM Sourabh Gupta puts it:\n\n> “It was like changing wheels on a moving car.”\nWhile the main team focussed on transforming existing services and mobile\narchitecture to build a working POC, a parallel team undertook the long and\npainful journey to understand inter-service dependencies that would need to be\ntackled.\n\nIronically, they were themselves depending on multiple GOJEK product teams to\nunderstand the dependencies of over 400 microservices. This was crucial in order\nto chart out a plan for automating the deployments and cluster creation.\n\nHours turned into days…\n\nDocumentation was scarce, and the team had to undertake the painstaking process\nof talking to service owners, and map out configurations. This also meant many\nGOJEK team members had to take time out of their daily routines to spend on\nknowledge transfer.\n\nIdentify, document, dismantle, develop. Over and over.\n\nAn emergence. A transformation.\nIt took some doing, but finally, there was a glimmer at the end of the tunnel.\nTrifecta emerged into the light of a new day with a finished POC. A relatively\ncomplete driver and consumer app that were worthy of upload to the Play store.\n\nThe deadline the team had given itself was three months.\n\nIt had only taken two-and-a-half.\n\nTrifecta’s eight-member crack team had accomplished what it set out to do, and\nbuilt a working POC. Their role in this journey was at an end, and so they\ndisbanded and went back to their product teams. The original fellowship was no\nmore.\n\n> The team working on dependencies however, was facing rough weather.\nSifting through those 100s of microservices was taking longer than expected, and\nthe knowledge transfer meetings were slowly losing attendance. Progress was\nimbalanced, and the parallel approach was not yielding results. There was only\none move that made sense: absorb the engineers into the core Trifecta team.\n\n> The birth of a new party for the next stage of the journey.\nThe constitution of the team had changed, but the goal remained the same. The\nfirst months of 2018 saw Trifecta work tirelessly to untangle the intricate\ndependency map of GOJEK’s microservices. The process was tedious, but it did\nhave a silver lining. We now had a ton of documentation about GOJEK’s product\nand service architecture — a path had been cut through the woods for others on\nsimilar journeys.\n\nFinally, a clear picture emerged.\n\nIt… looked a little like this:\n\nMonths of work, depicted in a single image. Complicated as it looks, this was a\nmajor breakthrough. The key to the codex.\n\nInitially, it was estimated that in order to launch with two key products\n(GO-RIDE and GO-SEND) GOJEK would need to deploy 40 microservices for the new\nclusters. With each new dependency unearthed, that number kept inflating.\nIntegration of GO-PAY services (which were required for maintaining a driver\nwallet, and to handle incentives and subsidies) brought its own set of\ncomplexities, as its services and tech architecture was modelled differently\nfrom the rest of GOJEK.\n\nAs the launch timeline drew closer, there were over 100 microservices to deploy.\nNot an easy task, but the team finally knew what needed to be done.\n\nThe fog of war was finally parting. Now, to build a working environment.\n\nGunning for the finish line\nThe work on automation and deployment scripts now continued as originally\nplanned. The wheels were in motion again, and passing through terrain GOJEK knew\nwell. It was time to build stuff.\n\nOpsTech, Transport, GO-SEND, Marketplace, Driver Platform, GO-PAY and Platform\nteams provided backup, and the products for Vietnam launch were developed (we\nwould launch with GO-RIDE and GO-SEND). The team was working efficiently, and as\nthe cool grip of winter began to give way to the warm summer months, a basic\nenvironment was up for app development.\n\n> Then came the next wave of trouble.\nAs the environment took shape, our inexperience in dealing with new geographies\ncame back to haunt us. Configuration mismatch across clusters and deployment\ndrift reared their heads. Suddenly, there were more questions that needed\nanswering:\n\n> 1.Where would we manage configuration of services for all the new markets?\n> 2. How would we deploy on containers and ensure that the same version of code\nwas running on all environments?\n> 3. What about logging and monitoring?\nThe goal seemed an eternity away, again.\n\nChaos ensued.\n\nFor the continued story of how GOJEK grappled with the challenges brought on by\na new geography, read part 2 [http://bit.ly/2Rm2cSC] of this 3 part series.\n\n\n--------------------------------------------------------------------------------\n\nWant our updates beamed straight to your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Sooraj Rajmohan</p><h1 id=\"part-1-3-uncertainty\">Part 1/3 | Uncertainty</h1><p>Indonesia — a constellation of 17,000 islands sprinkled between two oceans. A melting pot of ethnicities and cultures, home to the fourth largest population in the world, and ripe with business opportunity. This dazzling island nation is where GOJEK was born. Its chaotic streets were the playground where a scrappy young startup grew, and the love of its people saw GOJEK grow into a Super App.</p><blockquote><em>For GOJEK, Indonesia is home. Comfortable. Familiar. Safe.</em></blockquote><p>The story of a Super App, however, is about more than one country. It is about growing up, stepping out the door, and journeying into the unknown. This three-part series details GOJEK’s journey beyond Indonesia’s borders, and the story of the team that guided it through roads untraveled.</p><h1 id=\"the-mandate-the-madness-\"><strong>The mandate. The madness.</strong></h1><p>In late 2017, at a meeting of product leads at GOJEK’s Jakarta HQ, then COO Rohan Monga confirmed the rumour that had been floating around hallways.</p><blockquote><em><em>We were going abroad.</em></em></blockquote><p>On paper, the idea was simple: GOJEK was targeting new markets in Southeast Asia — starting with Vietnam, Thailand and Philippines.</p><p>The reason for choosing these geographies went beyond the obvious (proximity). These countries have similar dynamics to pre-GOJEK Indonesia. The population numbers are in the same ballpark, broadband Internet penetration is high (and growing rapidly), the food delivery market is nascent, and there was no dominant player in the digital wallet space.</p><blockquote><em>The conditions were ripe for disruption.</em></blockquote><p>The plan was to launch swiftly and stealthily, and take competition by surprise. Each targeted geography even got its own codename. Vietnam was nicknamed Vogue, Thailand dubbed Tatler, and Philippines — Fortune (notice a pattern? 😋)</p><p>This was only the beginning, however. The plan was more elaborate.</p><p>It was important to recreate this feeling of pride in the brand in the new markets as well. To achieve this, it was decided to launch the new offerings with completely new branding — GO-VIET in Vietnam, and GET in Thailand. Everything about these new local brands was devised to emphasise the values of that country.</p><p>The goal: to build a local champion — one that the people, as well as commercial and regulatory agencies — could get behind. The vision was solid. Everyone was pumped.</p><p>But there was a problem:</p><blockquote><em>Our existing tech stack was already buckling under the strain of ever-increasing demand, and would not be able to handle new geographies.</em></blockquote><p>We would need a different solution. GOJEK had crossed the borders of the familiar, into the unknown.</p><p>One of the options that made sense was to decouple from Indonesia and create new environments for the new countries. This way, the scaling issues affecting Indonesia would not affect the new geographies, and GOJEK developers also got greater flexibility to customise and localise the app and products for the new markets.</p><p>But creating new environments/clusters (read mini-GOJEKs) came with its own set of complexities. This process also needed to be repeated in quick succession in each country.</p><p>The answer to this problem was using automation for cluster creation… but not on VM’s. To do something new, new technologies would have to be adopted. The path chosen was to use Kubernetes to automate cluster creation and service deployment on containers.</p><p>Unfortunately, no one at GOJEK had the insights or the bandwidth required to do this at the time. We had the vision. We knew what needed to be done.</p><blockquote><em>We needed the right people.</em></blockquote><h1 id=\"enter-team-trifecta\"><strong>Enter Team Trifecta</strong></h1><p>It all started with a Product Manager, who was tasked with putting together a group of people to accomplish the task ahead. About a week in, three QAs joined, followed in another week by an eight-member crack team who would develop the initial Proof Of Concept (POC). The members of this team were cherry-picked from across GOJEK product teams (with a fair bit of negotiation and bargaining involved 😅).</p><p>It would be this team’s duty to first run an efficient proof-of-concept (POC) for the launch, and then develop frameworks, create playbooks, do product customisation and automate infrastructure creation and deployment. The idea was to create a scalable model and replicate it in any new country GOJEK wanted to launch in.</p><p>International expansion was a big deal though, and an exciting challenge. As Trifecta’s work picked up steam, more people would put up their hands to work on this exciting new project, over and above their existing responsibilities.</p><p>While the core Trifecta team went about its business to create a POC, a specialist four-person team was brought in. Their job was to work in parallel on our big play — automate cluster creation.</p><blockquote><em>We had a fellowship. It was time for the journey.</em></blockquote><p>Trifecta’s first task was to figure out all the changes that had to be made to build a new app for each country. As soon as this project started, it became apparent that a long uphill climb lay ahead.</p><p>For starters, the driver app was never built in a way to support any other language besides Bahasa Indonesia. This had to be re-engineered so it could support localisation/i18n.</p><p><strong><strong>And then there was Stan Marsh.</strong></strong></p><p><a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\">Stan Marsh</a> is a legendary name in the GOJEK mythos. It refers to our late legacy codebase. Stan Marsh was the beast of burden that carried GOJEK through the early years, and each new commit made to it was often a desperate attempt to douse a fire and keep GOJEK up and running. Understandably, a lot of legacy services and Stan Marsh were not designed to support GOJEK’s journey into new geographies.</p><p>Trifecta members found stumbling blocks everywhere — there was no provision for new currencies and time zones, for example. The pack mule was struggling to keep up with the party.</p><p>One thing was obvious — GOJEK’s entire mobile codebase had to be re-architected to be able to efficiently build multiple apps and designs on top of it.</p><blockquote><em>Automation on Kubernetes would have to wait.</em></blockquote><blockquote><em>We had a detour to take.</em></blockquote><h1 id=\"descending-into-the-mines\"><strong>Descending into the mines</strong></h1><p>First things first — Trifecta needed an environment to play around in and do the testing without affecting the BAU. The team dusted off an old User Acceptance Testing (UAT) environment, which was not in use at the time, and proceeded to do experimentation and development within it. Slowly, the GOJEK app was dismantled and rebuilt into a new avatar that would service new markets.</p><p>This turned out to be a lot more complicated than it first sounded (which is a common plot point throughout this story, as you will see 😐). Major changes needed to be made to the driver onboarding portal, for instance, and the team needed to figure out ways to transfer money from the wallets of driver partners into their bank accounts.</p><p>GOJEK was always used to having multiple support teams, and well-established bank integrations to help with such matters. In this new territory, it all needed to be figured out from scratch. Add to the fact that GOJEK itself was rapidly evolving, making it difficult for the team to figure out which services should be transitioned and which would soon be deprecated, and the job became more complex. As Trifecta PM Sourabh Gupta puts it:</p><blockquote>“It was like changing wheels on a moving car.”</blockquote><p>While the main team focussed on transforming existing services and mobile architecture to build a working POC, a parallel team undertook the long and painful journey to understand inter-service dependencies that would need to be tackled.</p><p>Ironically, they were themselves depending on multiple GOJEK product teams to understand the dependencies of over 400 microservices. This was crucial in order to chart out a plan for automating the deployments and cluster creation.</p><p><strong><strong>Hours turned into days…</strong></strong></p><p>Documentation was scarce, and the team had to undertake the painstaking process of talking to service owners, and map out configurations. This also meant many GOJEK team members had to take time out of their daily routines to spend on knowledge transfer.</p><p><em><em>Identify, document, dismantle, develop. Over and over.</em></em></p><h1 id=\"an-emergence-a-transformation-\"><strong>An emergence. A transformation.</strong></h1><p>It took some doing, but finally, there was a glimmer at the end of the tunnel. Trifecta emerged into the light of a new day with a finished POC. A relatively complete driver and consumer app that were worthy of upload to the Play store.</p><p><em><em>The deadline the team had given itself was three months.</em></em></p><p><strong><strong><em><em>It had only taken two-and-a-half.</em></em></strong></strong></p><p>Trifecta’s eight-member crack team had accomplished what it set out to do, and built a working POC. Their role in this journey was at an end, and so they disbanded and went back to their product teams. The original fellowship was no more.</p><blockquote><em>The team working on dependencies however, was facing rough weather.</em></blockquote><p>Sifting through those 100s of microservices was taking longer than expected, and the knowledge transfer meetings were slowly losing attendance. Progress was imbalanced, and the parallel approach was not yielding results. There was only one move that made sense: absorb the engineers into the core Trifecta team.</p><blockquote><em><em>The birth of a new party for the next stage of the journey.</em></em></blockquote><p>The constitution of the team had changed, but the goal remained the same. The first months of 2018 saw Trifecta work tirelessly to untangle the intricate dependency map of GOJEK’s microservices. The process was tedious, but it did have a silver lining. We now had a ton of documentation about GOJEK’s product and service architecture — a path had been cut through the woods for others on similar journeys.</p><p>Finally, a clear picture emerged.</p><p>It… looked a little like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/3456/0*DPnYDJeeyJxE8uSI\" class=\"kg-image\"></figure><p>Months of work, depicted in a single image. Complicated as it looks, this was a major breakthrough. The key to the codex.</p><p>Initially, it was estimated that in order to launch with two key products (GO-RIDE and GO-SEND) GOJEK would need to deploy 40 microservices for the new clusters. With each new dependency unearthed, that number kept inflating. Integration of GO-PAY services (which were required for maintaining a driver wallet, and to handle incentives and subsidies) brought its own set of complexities, as its services and tech architecture was modelled differently from the rest of GOJEK.</p><p>As the launch timeline drew closer, there were over 100 microservices to deploy. Not an easy task, but the team finally knew what needed to be done.</p><p>The fog of war was finally parting. Now, to build a working environment.</p><h1 id=\"gunning-for-the-finish-line\"><strong>Gunning for the finish line</strong></h1><p>The work on automation and deployment scripts now continued as originally planned. The wheels were in motion again, and passing through terrain GOJEK knew well. It was time to build stuff.</p><p>OpsTech, Transport, GO-SEND, Marketplace, Driver Platform, GO-PAY and Platform teams provided backup, and the products for Vietnam launch were developed (we would launch with GO-RIDE and GO-SEND). The team was working efficiently, and as the cool grip of winter began to give way to the warm summer months, a basic environment was up for app development.</p><blockquote>Then came the next wave of trouble.</blockquote><p>As the environment took shape, our inexperience in dealing with new geographies came back to haunt us. Configuration mismatch across clusters and deployment drift reared their heads. Suddenly, there were more questions that needed answering:</p><blockquote><em><em>1.Where would we manage configuration of services for all the new markets?</em></em></blockquote><blockquote><em><em>2. How would we deploy on containers and ensure that the same version of code was running on all environments?</em></em></blockquote><blockquote><em><em>3. What about logging and monitoring?</em></em></blockquote><p>The goal seemed an eternity away, again.</p><p>Chaos ensued.</p><p>For the continued story of how GOJEK grappled with the challenges brought on by a new geography, read <a href=\"http://bit.ly/2Rm2cSC\" rel=\"noopener\">part 2</a> of this 3 part series.</p><hr><p>Want our updates beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/to-new-frontiers-how-gojek-went-international/","canonical_url":null,"uuid":"c5cb2b17-100d-47e1-a26f-4f6c49eb16cb","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2d7d87aa22c4066f83c9e","reading_time":8}},{"node":{"id":"Ghost__Post__5eb11d7af7c7da001effccbc","title":"The Big Design Fix (And Miss)","slug":"the-big-design-fix-and-miss","featured":false,"feature_image":"https://res-4.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part2.gif","excerpt":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 2 of 3) | The new redesign","custom_excerpt":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 2 of 3) | The new redesign","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"04 April, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T13:32:02.000+05:30","published_at":"2019-04-04T09:30:00.000+05:30","updated_at":"2020-05-12T11:54:52.000+05:30","meta_title":"The Big Design Fix (And Miss)","meta_description":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 2 of 3) | The new redesign","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Fatema Raja\n\nYou are reading part two of a three-part series. Wondering how we got here? \nHere’s the story so far: we were redesigning the checkout experience for Gojek’s\nfood delivery product — GoFood.\n\nWhy did we do a design change? Because nearly 20% of our customers abandoned\nfood in the cart at the ‘Checkout’ page. ?\n\nWhat’s the reason for that? There’s a dozen of them! Read the first piece in\nthis series for details on how we went about our research to understand users’\npain points.\n\n> Clearly, our original flow had issues. We had to change the structure to not\nonly support the complexity of the page, but also make it seem easier and\nintuitive to use.\nThis piece is about solutions. Our ephemeral moment of joy. ??\n\nOnce everyone understood the problems, it was time to point the team towards a\ncommon vision. We knew that the main issue sprung from the user needing to\nperform multiple actions and verifications — on a single page.\n\nTo illustrate, below are the five components chopped from our old checkout page\n(that required three scrolls to navigate through).\n\nNumerous iterations (in double digits if I had to recall the number), countless\npaper sketches, and feedback sessions followed. It took us another month to\nfinally find and roll out the solution. Safe to say we kept the proverbial\nmidnight oil burning.\n\nThe ideal solution, here we go.. ?\nAs described in the last post [http://bit.ly/2U8mm7s], we had identified five\ndistinct problems with our old Checkout flow that frustrated around 20% of users\nenough that they abandoned their order. For each one of the problems we\nidentified, we came up with a corresponding solution:\n\nSolution 1 — Simplify Information\n(Problem: Verbose Information)\n\nIt was time to be brutal and cut down on information density. We started off by\nasking a few questions:\n\nWhat goes with what? Do we really need this, or that? — This approach helped us\ngroup similar content and reduce visual complexity by combining or eliminating\ninformation altogether.\n\nHere’s an example. Our existing dish card consisted of the following components:\n\n * Dish Name\n * Dish Price\n * Stepper (number of dishes added)\n * Notes (added by the user)\n * Dish Description\n\nOur primary aim was to shrink the size of the card by removing or hiding\nredundant information and adding delight. It conjured up Maeda’s Principle of\nSimplicity — SHE. (Shrink, Hide, Embody).\n\nOur redesigned dish card was laid out like this:\n\n * Dish Name, Number (stepper) and Price: This is the minimum information a user\n   requires to confirm the dish in the cart to move forward. So we decided to\n   retain this as is.\n * Notes: There was a huge argument about this one — some said “let’s remove\n   notes entirely” while the others debated “ let’s do it at cart level rather\n   than having them per dish”. But our data said otherwise: 7 out of 10 dishes\n   ordered had notes added. This is very much a cultural nuance in Indonesia;\n   people order in groups and want their food customised to a point that\n   bewilders someone from the outside, like me. For example: while ordering the\n   traditional Padang — notes look like this: (1) ayam pop, rice with ayam pop\n   plus gulai soup plus rendang seasoning, no papaya leaves, more ayam pop\n   sauce, spicy pleaseeee, wrap it in one pack… because people there have\n   different preferences on the level of spiciness and packaging. Hence, we\n   decided to retain notes, but Hide it behind a 16 x 16 button which saved us\n   over a 100 pixels ?.\n\nThe redesigned notes section :)Dish Description: Technically users need the dish description before adding it\nto the cart (to get a sense of the taste, of course!). So, finding no use for it\nin the cart page, we considered removing it altogether. BUT, we didn’t want to\nbombard the user with too many changes in the redesign. Hence, we decided to S\nhrink and reveal only a portion of the description, retaining the rest behind a\nclick. (After a lot of trial and error, we decided on revealing 3 lines max —\nkeeping in mind various device sizes and our content quality).\n\n * Dish Images: Our conversion rates for dishes with images was way better than\n   dishes without images (6 out of 10 dishes ordered had images ??). To make\n   up for the missing notes and shrunken description, we took full advantage of\n   the saved real estate to bring in dish images on the checkout page, in order\n   to drive monetary growth (ordered dishes) and improve business metrics. Oh,\n   and obviously, add more delight for our users. ?Hence Embodying the dish\n   card.\n\nDish description redesigned :)We applied the same principle to payments, delivery, voucher & billing. \nObviously, we shifted through troves of data points for each of these ?. We\nmade a few radical changes, but without overwhelming the user.\n\nSolution 2 — Progressive Disclosure\n\n(Problem: Cognitive overload)\n\nOur aim here was for each component to be self evident, It was important to not\nonly simplify each section, but also reveal them in order of relevance. Rather\nthan throwing information at our users, we wanted to gracefully present it — to\nmaintain their attention by reducing clutter and confusion.\n\nThings that are related logically, are related visually.\n\nAfter a lot of arguments and brainstorming around user behaviour and device\nsizes, we locked down on the two-step checkout design — we divided the five\ncomponents from a single page into two different steps.\n\nThis was a huge shift in thinking, and was going to add an element of confusion\namong our loyal users. Instead of taking 100 actions on one page, our fall back\nwas to divide and conquer. A calculated leap of faith ?\n\nPage 1 — Check dishes, Cross selling & Total price (food-related information)\n\nPage 2 — How to pay and where to deliver (checkout-related information)\n\nThis improved usability by presenting only the minimum data required for the\ntask at hand. It also helped us achieve the following:\n\n * Bring down cognitive overload.\n * Ease decision making.\n * Free up real estate for business and monetisation (banners, up-selling).\n\nTwo-step checkout designSolution 3 — Bring down checkout time\n\n(Problem: Prolonged Checkout)\n\nWith a simplified structure of divided steps, our on-point hypothesis was: \nlesser time taken to checkout ⏳. However, a lot of us also argued that the extra\nstep might increase the time instead. So we double-checked our hypothesis with a\nquick usability test. Much to our relief, the two-step process showed positive\nsigns and was proved to be faster.\n\nclick-click over scroll-scroll-scroll-click.\n\nAnother small change that saved time was to make the CTA sticky on both the\nsteps, this saved users from scrolling all the way to the bottom to take the\nprimary action.\n\nSolution 4 — Reduce Cancellations\n(Problem: High Cancellations)\n\nOne big way to solve this was to bring our location card in focus, hence we\nfeatured it prominently at the top on the second step (refer to the image\nabove), and not hidden behind a scroll. This made it easy for the user to\nimmediately verify delivery location as soon as they landed on this page,\nreducing cancellations caused by an incorrect delivery address.\n\nSolution 5 — Ship delight\n(Problem: Lacks love)\n\nShipping delight was critical for GoFood. As a brand, we were known to be fun\nand colloquial — we wanted our designs to reflect this trait visually ❤️\n\nHere’s an example of how we did it:\n\nOur old designs used the native pop-up to throw an error every time a GoFood\nuser placed an order above our maximum distance limit (25 km). It needed some\nlove, as we were dealing with hungry (and sometimes, cranky) minds. We tried to\nmake this screen more fun and informative.\n\nWe gave our users an understanding of why we don’t do food delivery above 25 km,\nand added a delightful illustration that was relatable for people in Indonesia.\n\nThe above illustration depicts a very common (funny) occurrence on the streets\nof Indonesia. Ever tried asking for an address or direction there? Well, chances\nare, you will end up exactly where you started. Yeah, that happens a lot! ?\n\nSome more examples of sprinkling love ❤\n\n❤ Delight all the wayyyy ❤Designing for edge cases ?\n\nAnother important step (often forgotten by designers) under the redesign sparkle\nwas solving for edge cases. It helps us reinforce usability in our designs by\nensuring whatever the user is trying to do works.\n\n“Why can’t I place my food order? Why is the ORDER button disabled?”\n— From a user who added 3 pizzas to their shopping cart at around 8:45 pm and\nrevisited the cart at 9:30 pm to place the order.\n\nUnfortunately, the pizzeria shuts at 9 pm. But, there was no way for the user to\nknow that since she accessed the cart directly from the homepage. ?\n\nSolving for the maximum in the happy flow, we didn’t sweat on edge cases \ninitially, but now that we had fleshed out our designs, it was time to turn the\nspotlight on our beloved edge cases . This helped reduce drop offs due to\nuncertainty, and increase business by guiding the user through it.\n\nEdge Cases — The UnderdogsCollaborating with engineers ?‍?\n\nIt’s one thing to have solutions in static sketch files, and a whole different\nfeeling to see them in action. We provided the engineers with prototypes to help\nthem paint a better picture and make our solutions more believable. ?\n\nAnother efficient way we communicated design intent was to actually sit with\nengineers. We did frequent design QAs — this helped us execute the expected\nexperience and gave us the ultimate pleasure of seeing every working pixel\nmatching our sketches.\n\nReady to launch ?\nPHEW! DONE!!\n\nThe new design was finally ready to ship. We were super excited to hear what our\nusers thought and how much they like our new, redesigned Checkout flow. Pats on\nbacks for the amazing work, research, and collaboration.\n\nThis was our moment of truth. All the months of hard work summed up in this\n6-second GIF ?\n\n\nGoing to Beta ?\n\nBefore rolling out to our millions of users, as is practice, we launched a beta\nversion to about 50K users. This was a good size for us to understand how things\nwere shaping up, and if we needed to go back to the drawing board.\n\nThings seemed okay — not too good or bad, no major dropoffs, the conversion\ngraph looked stable. Just like any good redesign, we were giving time to our\nusers to adapt to the new change before we received the desired applause.\n\nInstead…\n\nRadio Silence.\n\nTwo days into the new designs\nThings were not looking good. We took an entire week to collect meaningful data.\nWe lost a few thousand orders at peak. ??\n\nThat was not normal, that was the definition of a colossal mess up… The results\nwere the stark opposite to what we had anticipated.\n\nBy changing the UX flow on GoFood to supposedly offer a better experience, we\nlost thousands of bookings. A minor miscalculation in the decisions we took\n(well, in hindsight, major) had broken the flow for our most loyal users, and\nannoyed them enough to look elsewhere to satiate their tummies.\n\nWhat happened?… What went wrong? ?\n\nRead about how we identified what went wrong, and the steps we took to fix\nthings — in the third and final part [http://bit.ly/2HvbreJ] of this series.","html":"<p>By Fatema Raja</p><p>You are reading part two of a three-part series. Wondering how we got here? <strong><strong><em><em>Here’s the story so far:</em></em></strong></strong> we were redesigning the checkout experience for Gojek’s food delivery product — GoFood.</p><p><strong><strong>Why did we do a design change?</strong></strong> Because nearly 20% of our customers abandoned food in the cart at the ‘Checkout’ page. ?</p><p><strong><strong>What’s the reason for that? </strong></strong>There’s a dozen of them! Read the first piece in this series for details on how we went about our research to understand users’ pain points.</p><blockquote><em><em>Clearly, our original flow had issues. We had to change the structure to not only support the complexity of the page, but also make it seem easier and intuitive to use.</em></em></blockquote><p><strong><strong>This piece is about solutions. Our ephemeral moment of joy. </strong></strong>??</p><p>Once everyone understood the problems, it was time to point the team towards a common vision. We knew that the main issue sprung from the user needing to perform multiple actions and verifications — on a single page.</p><p>To illustrate, below are the five components chopped from our old checkout page (that required three scrolls to navigate through).</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://miro.medium.com/max/9621/1*oG0g_9vKuFvO3q59qk7Juw.png\" class=\"kg-image\"></figure><p>Numerous iterations (in double digits if I had to recall the number), countless paper sketches, and feedback sessions followed. It took us another month to finally find and roll out the solution. Safe to say we kept the proverbial midnight oil burning.</p><h1 id=\"the-ideal-solution-here-we-go-\">The ideal solution, here we go.. ?</h1><p>As described in <a href=\"http://bit.ly/2U8mm7s\" rel=\"noopener\">the last post</a>, we had identified five distinct problems with our old Checkout flow that frustrated around 20% of users enough that they abandoned their order. For each one of the problems we identified, we came up with a corresponding solution:</p><h2 id=\"solution-1-simplify-information\">Solution 1 — Simplify Information</h2><p><em><em>(Problem: Verbose Information)</em></em></p><p>It was time to be brutal and cut down on information density. We started off by asking a few questions:</p><p><strong><strong><em><em>What goes with what? Do we really need this, or that? </em></em></strong></strong><em><em>— </em></em>This approach helped us group similar content<em><em> </em></em>and reduce visual complexity by combining or eliminating information altogether.</p><p>Here’s an example. Our existing dish card consisted of the following components:</p><ul><li>Dish Name</li><li>Dish Price</li><li>Stepper (number of dishes added)</li><li>Notes (added by the user)</li><li>Dish Description</li></ul><p><em><em>Our primary aim was to shrink the size of the card by removing or hiding redundant information and adding delight. It conjured up <strong><strong>Maeda’s Principle of Simplicity — SHE</strong></strong>. (<strong><strong>S</strong></strong>hrink, <strong><strong>H</strong></strong>ide, <strong><strong>E</strong></strong>mbody).</em></em></p><p>Our redesigned dish card was laid out like this:</p><ul><li><strong><strong>Dish Name, Number (stepper) and Price:</strong></strong><em><em> </em></em>This is the minimum information a user requires to confirm the dish in the cart to move forward. So we decided to retain this as is.</li><li><strong><strong>Notes: </strong></strong>There was a huge argument about this one — some said <em><em>“let’s remove notes entirely” </em></em>while the others debated<em><em> “ let’s do it at cart level rather than having them per dish”.</em></em> But our <strong><strong>data said otherwise: 7 out of 10 dishes ordered had notes added</strong></strong>. This is very much a cultural nuance in Indonesia; people order in groups and want their food customised to a point that bewilders someone from the outside, like me. For example: while ordering the traditional Padang — <strong><strong>notes look like this: (1) ayam pop, rice with ayam pop plus gulai soup plus rendang seasoning, no papaya leaves, more ayam pop sauce, spicy pleaseeee, wrap it in one pack</strong></strong>… because people there have different preferences on the level of spiciness and packaging. Hence, we decided to retain notes, but <strong><strong>H</strong></strong>ide it behind a 16 x 16 button which saved us over a 100 pixels ?.</li></ul><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2560/1*lxRyLn7OhauJt-o1wF9YNA.png\" class=\"kg-image\"><figcaption>The redesigned notes section :)</figcaption></figure><p><strong><strong>Dish Description:</strong></strong><em><em> </em></em>Technically<em><em> </em></em>users need the dish description <em><em>before</em></em> adding it to the cart (to get a sense of the taste, of course!). So, finding no use for it in the cart page, we considered removing it altogether. BUT, we didn’t want to bombard the user with too many changes in the redesign. Hence, we decided to <strong><strong>S</strong></strong>hrink and reveal only a portion of the description, retaining the rest behind a click. (A<em><em>fter a lot of trial and error, we decided on revealing 3 lines max — keeping in mind various device sizes and our content quality</em></em>).</p><ul><li><strong><strong>Dish Images: </strong></strong>Our conversion rates for dishes with images was way better than dishes without images (<em><em>6 out of 10 dishes ordered had images </em></em>??). To make up for the missing notes and shrunken description, we took full advantage of the saved real estate to bring in dish images on the checkout page, in order to drive monetary growth (ordered dishes) and improve business metrics. Oh, and obviously, add more delight for our users. ?Hence<strong><strong> E</strong></strong>mbodying the dish card.</li></ul><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/8192/1*XD1Up4ZPcOBfcAI4hjgBjQ.png\" class=\"kg-image\"><figcaption>Dish description redesigned :)</figcaption></figure><p>We applied the same principle to <strong><strong>payments, delivery, voucher &amp; billing. </strong></strong>Obviously, we shifted through troves of data points for each of these ?. We made a few radical changes, but without overwhelming the user.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3832/1*XGfs2FbfyIYgmqU548uCtA.png\" class=\"kg-image\"></figure><p>Solution 2 — Progressive Disclosure</p><p><em><em>(Problem: Cognitive overload)</em></em></p><p>Our aim here was for each component to be self evident, It was important to not only simplify each section, but also reveal them in order of relevance. Rather than throwing information at our users, we wanted to gracefully <em><em>present </em></em>it — to maintain their attention by reducing clutter and confusion.</p><p>Things that are related logically, are related visually.</p><p>After a lot of arguments and brainstorming around user behaviour and device sizes, we locked down on the <strong><strong>two-step checkout design</strong></strong> — we divided the five components from a single page into two different steps.</p><p>This was a huge shift in thinking, and was going to add an element of confusion among our loyal users. Instead of taking 100 actions on one page, our fall back was to divide and conquer. A calculated leap of faith ?</p><p><em><em><strong><strong>Page 1 </strong></strong>— Check dishes, Cross selling &amp; Total price (food-related information)</em></em></p><p><em><em><strong><strong>Page 2</strong></strong> — How to pay and where to deliver (checkout-related information)</em></em></p><p>This improved usability by presenting only the minimum data required for the task at hand. It also helped us achieve the following:</p><ul><li>Bring down cognitive overload.</li><li>Ease decision making.</li><li>Free up real estate for business and monetisation (banners, up-selling).</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1646/1*CNqM5aQ_WM9on7xL1KJ3bQ.png\" class=\"kg-image\"><figcaption>Two-step checkout design</figcaption></figure><p>Solution 3 — Bring down checkout time</p><p><em><em>(Problem: Prolonged Checkout)</em></em></p><p>With a simplified structure of divided steps, our on-point hypothesis was: <strong><strong>lesser time taken to checkout ⏳</strong></strong>. However, a lot of us also argued that the extra step might increase the time instead. So we double-checked our hypothesis with a quick usability test. Much to our relief, the two-step process showed positive signs and was proved to be faster.</p><p><strong><strong><em><em>click-click </em></em></strong></strong>over<strong><strong><em><em> scroll-scroll-scroll-click.</em></em></strong></strong></p><p>Another small change that saved time was to make the CTA sticky on both the steps, this saved users from scrolling all the way to the bottom to take the primary action.</p><h2 id=\"solution-4-reduce-cancellations\">Solution 4 — Reduce Cancellations</h2><p><em><em>(Problem: High Cancellations)</em></em></p><p>One big way to solve this was to bring our location card in focus, hence we featured it prominently at the top on the second step (refer to the image above), and not hidden behind a scroll. This made it easy for the user to immediately verify delivery location as soon as they landed on this page, reducing cancellations caused by an incorrect delivery address.</p><h2 id=\"solution-5-ship-delight\">Solution 5 — Ship delight</h2><p><em><em>(Problem: Lacks love)</em></em></p><p>Shipping delight was critical for GoFood. As a brand, we were known to be fun and colloquial — we wanted our designs to reflect this trait visually ❤️</p><p>Here’s an example of how we did it:</p><p><strong><strong>Our old designs</strong></strong> used the native pop-up to throw an error every time a GoFood user placed an order above our maximum distance limit (25 km). It needed some love, as we were dealing with hungry (and sometimes, cranky) minds. We tried to make this screen more fun and informative.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1775/1*DKNTiA926KjyJyhR2rNPwQ.png\" class=\"kg-image\"></figure><p>We gave our users an understanding of why we don’t do food delivery above 25 km, and added a delightful illustration that was relatable for people in Indonesia.</p><p>The above illustration depicts a very common (funny) occurrence on the streets of Indonesia. Ever tried asking for an address or direction there? Well, chances are, you will end up exactly where you started. Yeah, that happens a lot! ?</p><p>Some more examples of sprinkling love ❤</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/4070/1*RJJw-wTDJMfrKJdndgsY_w.png\" class=\"kg-image\"><figcaption>❤ Delight all the wayyyy ❤</figcaption></figure><p>Designing for edge cases ?</p><p>Another important step (often forgotten by designers) under the redesign sparkle was solving for edge cases. It helps us reinforce usability in our designs by ensuring whatever the user is trying to do works.</p><p><em><em><em>“Why can’t I place my food order? Why is the ORDER button disabled?”</em></em></em><br><em><em>— From a user who added 3 pizzas to their shopping cart at around 8:45 pm and revisited the cart at 9:30 pm to place the order.</em></em></p><p>Unfortunately, the pizzeria shuts at 9 pm. But, there was no way for the user to know that since she accessed the cart directly from the homepage. ?</p><p>Solving for the maximum in the happy flow, we didn’t sweat on <strong><strong>edge cases </strong></strong>initially, but now that we had fleshed out our designs, it was time to turn the spotlight on our beloved edge cases . This helped reduce drop offs due to uncertainty, and increase business by guiding the user through it.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2869/1*4yrjldadvKavC9mA0V9-wQ.png\" class=\"kg-image\"><figcaption>Edge Cases — The Underdogs</figcaption></figure><p>Collaborating with engineers ?‍?</p><p>It’s one thing to have solutions in static sketch files, and a whole different feeling to see them in action. We provided the engineers with prototypes to help them paint a better picture and make our solutions more believable. ?</p><p>Another efficient way we communicated design intent was to actually sit with engineers. We did frequent design QAs — this helped us execute the expected experience and gave us the ultimate pleasure of seeing every working pixel matching our sketches.</p><h1 id=\"ready-to-launch-\">Ready to launch ?</h1><p>PHEW! DONE!!</p><p>The new design was finally ready to ship. We were super excited to hear what our users thought and how much they like our new, redesigned Checkout flow. Pats on backs for the amazing work, research, and collaboration.</p><p><strong><strong>This was our moment of truth. All the months of hard work summed up in this 6-second GIF </strong></strong>?<br></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/600/1*FtK9462_qZrZ-g_xSDIGyA.gif\" class=\"kg-image\"></figure><p>Going to Beta ?</p><p>Before rolling out to our millions of users, as is practice, we launched a beta version to about 50K users. This was a good size for us to understand how things were shaping up, and if we needed to go back to the drawing board.</p><p>Things seemed okay — not too good or bad, no major dropoffs, the conversion graph looked stable. Just like any good redesign, we were giving time to our users to adapt to the new change before we received the desired applause.</p><p>Instead…</p><p>Radio Silence.</p><h1 id=\"two-days-into-the-new-designs\">Two days into the new designs</h1><p>Things were not looking good. We took an entire week to collect meaningful data. We lost a few thousand orders at peak. ??</p><p>That was not normal, that was the definition of a colossal mess up… The results were the stark opposite to what we had anticipated.</p><p>By changing the UX flow on GoFood to <em><em>supposedly</em></em> offer a better experience, we lost thousands of bookings. A minor miscalculation in the decisions we took (well, in hindsight, major) had broken the flow for our most loyal users, and annoyed them enough to look elsewhere to satiate their tummies.</p><p><em><em>What happened?… What went wrong? </em></em>?</p><p><strong><strong>Read about how we identified what went wrong, and the steps we took to fix things — in the </strong></strong><a href=\"http://bit.ly/2HvbreJ\" rel=\"noopener\"><strong><strong>third and final part</strong></strong></a><strong><strong> of this series.</strong></strong></p>","url":"https://gojek-ghost.zysk.in/the-big-design-fix-and-miss/","canonical_url":null,"uuid":"6dc9f060-8403-439f-bf39-744e759aebbf","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb11d7af7c7da001effccbc","reading_time":8}},{"node":{"id":"Ghost__Post__5eb11d29f7c7da001effccb7","title":"How Design Can Build or Break a Business","slug":"how-design-can-build-or-break-a-business-1-of-3","featured":true,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Part1.gif","excerpt":"A UX case-study on redesigning the GoFood ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.","custom_excerpt":"A UX case-study on redesigning the GoFood ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 April, 2019","updated_at_pretty":"28 May, 2020","created_at":"2020-05-05T13:30:41.000+05:30","published_at":"2019-04-02T09:30:00.000+05:30","updated_at":"2020-05-28T13:54:56.000+05:30","meta_title":"How Design Can Build or Break a Business","meta_description":"A UX case-study on redesigning the GO-FOOD ‘Checkout’ experience | (Part 1 of 3) Why we needed a redesign.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Fatema Raja\n\nGoFood needs little by way of introduction. The largest food delivery service in\nSoutheast Asia, 300,000+ merchants, 16 million menu items… you get the drift.\nWith figures like that, you’d expect the GoFood user experience to be the best\nin the business.\n\nWhy then, did nearly 20% of GoFood users leave the checkout flow after adding\nitems to their cart?\n\nSomething wasn’t adding up.\n\nOur user flow was broken, and we needed to fix it.\n\nTL;DR: This post is part one of a three-part series highlighting the case study\nand critical considerations that went into redesigning the Checkout experience\nfor GoFood — Gojek’s food delivery product.\n\nLights, Camera… 💡🎥\nGOJEK was going through a major facelift in 2018. For a Super App with 19+\nproducts, we had all the scale-related issues one could imagine. We desperately\nneeded an efficient system for our designers and developers. This gave birth to \nAsphalt — GOJEK’s very own Design Language System [http://asphalt.gojek.io/].\n\nThe redesign started with our transport app — GoRide. It was then time to show\nsome love to Gojek’s prodigal child — GoFood. The product owner walked up to to\nme and said — “Let’s go beyond just the UI, and rethink the entire user\nexperience, instead of ceding over features as is.”\n\nWhat he meant — “Get ready! Lots of sleepless nights coming your way. We’re\ngoing to do a mammoth redesign, the likes of which minions like you will crumble\nunder.” ?\n\n🎬 Action!\nWe wanted our redesign to solve problems with specific business constraints, and\nwe knew it was impossible to do so without delving into user problems first.\n\nFinding the right problem to solve is harder (and more important) than finding\nthe right solution.\n\nFirst comes the framework\nTo achieve this, we pinned some critical thumb-rules before embarking on our\nredesign journey:\n\n * To be data-driven. (“Design is not about making things pretty” — I’m going to\n   parrot this line 10 times over in this blog and if you ever talk to me😅)\n * To incorporate the existing brand perception into all designs. (Marketing\n   says fun and creative but product looks dull and boring?Problem!)\n * To empathise with users and business requirements. (Always chase the full\n   story, be user-centric and business-driven)\n\nTo put the framework to use, we started white-boarding our in-app user flow. In\nthe journey graph, we noticed a large number of users were dropping-off at our\ncheckout page. That means nearly 20% of our users who added items to their cart,\nleft the flow right before placing the order (the last step) — the checkout page\n\nWe summed up the results to visually represent the emotional state of our in-app\nuser journey.Understand users’ pain points 😩\nThe second step was to understand our users’ pain points with the existing UX in\nthe checkout flow. To dig deeper into this, we reached out to our users directly\n(kudos to the research team for setting this up). We adapted both qualitative\nand quantitative methods to get to the root of every problem in the picture. We\nthen accumulated all our learnings into a consumer journey infographic.\n\nUser journey map | Courtesy: GoFood research team :)We wanted to involve the\nwhole GoFood team, beyond just research and design. This made it more\ncollaborative than the traditional sharing and feedback loop. To reinforce this,\nwe conducted several internal sharing and brainstorming sessions. The research\nteam also put together a fun quiz for user personas.\n\nInternal brainstorming sessions — Researchers, Engineers, Designers, PMs & UX\nwriters.What were the results?\n\nAs anticipated, our users felt agitated, confused and overwhelmed, resulting in\na big drop off at the Checkout page. Here’s some of the feedback from our users:\n\n“I find this step too confusing.”\n\n“A lot of times my order button is disabled (grey) and I don’t know why.”\n\n“I often miss rechecking some information at this step, most times I only focus\non payment.”\n\nThis entire process was important for us — to be able to go to the field, do\ninterviews, research, and speak to our customers directly. It gave us tremendous\ninsight into the product development, and is precisely what made our product so\ngood. This was not only fun but extremely useful.\n\nWith all the research and data at our disposal; we realised that redesigning the\ncheckout flow first will not only enhance the user experience, but help solve a\ncritical business problem.\n\n\nNeeds a lot of ❤, doesn’t it?The original page consists of five components on one single page. It was\nextremely overwhelming for most of our users:\n\n 1. Dish Details and Notes card\n\n2. Delivery Location Selection card\n\n3. Payment Method Selection card\n\n4. Voucher card\n\n5. Billing & Discounts card\n\nHats off to our users for being patient. I say this because every time a user\nlands on this page, they had to process a verbose set of information, and\nperform countless actions in a single page to just ‘confirm’ one food order.\nPainful. ?\n\nDesign is integral. Design is sacrosanct. While companies are now paying heed to\nthe importance of design, GOJEK, by virtue of being a #SuperApp, had to imbibe\ndesign logic into its very fabric.\n\nSo we got to work.\n\nDefining each problem ⚡️\nOnce we dissected the users’ goals and pain points, we had a clear picture of\nall the problems that plagued the Checkout flow. We narrowed our learnings to \nfive primary user problems to form a common understanding of what we were trying\nto solve.\n\nProblem 1: Verbose Information\nThe first thing most users did on this page was scroll, scroll and scroll. 3\nscrolls minimum. Also, did you notice the amount of text? We’re in the age of\nmicro-blogging and us millennials have the attention span of goldfishes, for\ncrying out loud!\n\nProblem 2: Cognitive overload\nThe page was overflowing with tasks that required explicit actions from the\nuser. Do this. And that. And hey, this too. Oh wait, THAT TOO. Chaotic. Select\ndelivery location but first find where it is, check the total, select payment\nmethod, glance through all the dishes added to the cart, apply your discount\nvoucher….?\n\nProblem 3: Prolonged Checkout\nToo many actions and redundant information caused users to spend more than 2\nminutes just to confirm and place a simple order. Time wasted, energy wasted,\ntummy still not fed. 😫\n\nProblem 4: High Cancellations\nA large sum of our users hurried through this step without actually\ndouble-checking delivery location details (buried under a scroll somewhere).\nThis resulted in nearly 3% of our users cancelling and reordering the same cart\nwith an updated address (that’s another story in itself).\n\nProblem 5: Lacks Love\nThere was nothing delightful about this page. The dishes didn’t have images on\ncheckout, the icons weren’t consistent, and had too much clutter. It was just\ntext and buttons stacked in the form of black and white cards. No, seriously,\neven the active ‘Add more items’ button was a plain grey.\n\nIn a nutshell, our flow lacked information hierarchy, delight, structure, was\ntoo complex, and in all… poor.\n\nIn order to fix this, we spent a month researching, ideating, and defining the\nproblem. Then we ideated some more, deliberated, chugged way too much beer (to\nadd some philosophical thinking), and tried to justify one solution after\nanother with the right data and metrics.\n\nWe were ready. We had all the answers. ?‍🤦‍♀️\n\n> Boy, were we wrong.\nIn the next post [http://bit.ly/2FUiYDo], I’ll detail all the steps we took to\narrive at this perfect (lol) solution — and how it all went downhill.\n\nWorking at GOJEK is an exercise in learning from experience. Sometimes, we find\nourselves confronted with undocumented and unsolved problems — which are\nexpected when building a Super App. We could use a hand in solving these\nproblems though. If you have the skills for the job, head over to gojek.jobs\n[http://bit.ly/2I4d8lx], and join the crew of our rocket ship. 🚀\n\ngojek.jobs [www.gojek.jobs]","html":"<p>By Fatema Raja</p><p>GoFood needs little by way of introduction. The largest food delivery service in Southeast Asia, 300,000+ merchants, 16 million menu items… you get the drift. With figures like that, you’d expect the GoFood user experience to be the best in the business.</p><p>Why then, did nearly 20% of GoFood users leave the checkout flow after adding items to their cart?</p><p>Something wasn’t adding up.</p><p>Our user flow was broken, and we needed to fix it.</p><p><strong><strong>TL;DR: </strong></strong>This post is <em><em>part one </em></em>of a three-part series highlighting the case study and critical considerations that went into redesigning the <strong><strong>Checkout</strong></strong> experience for GoFood — Gojek’s food delivery product.</p><h1 id=\"lights-camera-\">Lights, Camera… 💡🎥</h1><p>GOJEK was going through a major facelift in 2018. For a Super App with 19+ products, we had all the scale-related issues one could imagine. We desperately needed an efficient system for our designers and developers. This gave birth to<a href=\"http://asphalt.gojek.io/\" rel=\"noopener\"> Asphalt — GOJEK’s very own Design Language System</a>.</p><p>The redesign started with our transport app — GoRide. It was then time to show some love to Gojek’s prodigal child — GoFood.<em><em> </em></em>The product owner walked up to to me and said <em><em>— “Let’s go beyond just the UI, and rethink the entire user experience, instead of ceding over features as is.”</em></em></p><p>What he meant — <em><em>“Get ready! Lots of sleepless nights coming your way. We’re going to do a mammoth redesign, the likes of which minions like you will crumble under.”</em></em> ?</p><h1 id=\"-action-\">🎬 Action!</h1><p>We wanted our redesign to solve problems with specific business constraints, and we knew it was impossible to do so without delving into user problems first.</p><p>Finding the right problem to solve is harder (and more important) than finding the right solution.</p><h1 id=\"first-comes-the-framework\">First comes the framework</h1><p>To achieve this, we pinned some critical thumb-rules before embarking on our redesign journey:</p><ul><li><strong><strong>To be data-driven</strong></strong>. (“Design is not about making things pretty” — I’m going to parrot this line 10 times over in this blog and if you ever talk to me😅)</li><li><strong><strong>To</strong></strong> <strong><strong>incorporate the existing brand perception into all designs</strong></strong>. (Marketing says fun and creative but product looks dull and boring?Problem!)</li><li><strong><strong>To empathise with users and business requirements.</strong></strong> (Always chase the full story, be user-centric and business-driven)</li></ul><p>To put the framework to use, we started white-boarding our in-app user flow. In the journey graph, we noticed a large number of users were dropping-off<strong><strong><em><em> </em></em></strong></strong>at our checkout page<strong><strong><em><em>.</em></em></strong></strong> That means<strong><strong> nearly <em><em>20% </em></em>of our users who added items to their cart, left the flow right before placing the order (the last step) — the checkout page</strong></strong></p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2673/1*fJ2s_mHGtrYDeXV3kEajzg.png\" class=\"kg-image\"><figcaption>We summed up the results to visually represent the emotional state of our in-app user journey.</figcaption></figure><h1 id=\"understand-users-pain-points-\">Understand users’ pain points 😩</h1><p>The second step was to understand our users’ pain points with the existing UX in the checkout flow. To dig deeper into this, we reached out to our users directly (kudos to the research team for setting this up).<strong><strong> We adapted both qualitative and quantitative methods to get to the root of every problem in the picture.</strong></strong> We then accumulated all our learnings into a consumer journey infographic.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2572/1*3TzMeTjeKDD2oH4ZbPhp4w.png\" class=\"kg-image\"><figcaption>User journey map | Courtesy: GoFood research team :)</figcaption></figure><p>We wanted to involve the whole GoFood team, beyond just research and design. <strong><strong>This made it more collaborative than the traditional sharing and feedback loop. </strong></strong>To reinforce this, we conducted several internal sharing and brainstorming sessions. The research team also put together a fun quiz for user personas.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/2856/1*lyqCBZNfBuBOUsUVFUo3-g.png\" class=\"kg-image\"><figcaption>Internal brainstorming sessions — Researchers, Engineers, Designers, PMs &amp; UX writers.</figcaption></figure><p>What were the results?</p><p>As anticipated, our users felt agitated, confused and overwhelmed, resulting in a big drop off at the Checkout page. Here’s some of the feedback from our users:</p><p><strong><strong><em><em>“I find this step too confusing.”</em></em></strong></strong></p><p><strong><strong><em><em>“A lot of times my order button is disabled (grey) and I don’t know why.”</em></em></strong></strong></p><p><strong><strong><em><em>“I often miss rechecking some information at this step, most times I only focus on payment.”</em></em></strong></strong></p><p><em><em>This entire process was important for us — to be able to go to the field, do interviews, research, and speak to our customers directly. It gave us tremendous insight into the product development, and is precisely what made our product so good. This was not only fun but extremely useful.</em></em></p><p>With all the research and data at our disposal; we realised that redesigning the checkout flow first will not only enhance the user experience, but help solve a critical business problem.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/3278/1*T8b-QbwwRfMeWK14MOyKmg.png\" class=\"kg-image\"><figcaption>Needs a lot of ❤, doesn’t it?</figcaption></figure><p>The original page consists of <strong><strong><em><em>five</em></em></strong></strong> components on one <strong><strong><em><em>single</em></em></strong></strong> page. It was extremely overwhelming for most of our users:</p><ol><li>Dish Details and Notes card</li></ol><p>2. Delivery Location Selection card</p><p>3. Payment Method Selection card</p><p>4. Voucher card</p><p>5. Billing &amp; Discounts card</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://miro.medium.com/max/9621/1*X50izz9abnZyu81K55q_zA.png\" class=\"kg-image\"></figure><p>Hats off to our users for being patient. I say this because every time a user lands on this page, they had to process a verbose set of information, and perform countless actions<strong><strong><em><em> in a single page </em></em></strong></strong>to just <em><em>‘confirm’</em></em> one food order. Painful. ?</p><p><em><em>Design is integral. Design is sacrosanct. While companies are now paying heed to the importance of design, GOJEK, by virtue of being a #SuperApp, had to imbibe design logic into its very fabric.</em></em></p><p>So we got to work.</p><h1 id=\"defining-each-problem-\">Defining each problem ⚡️</h1><p>Once we dissected the users’ goals and pain points, we had a clear picture of all the problems that plagued the Checkout flow. We narrowed our learnings to <strong><strong><em><em>five</em></em></strong></strong> primary user problems to form a common understanding of what we were trying to solve.</p><h2 id=\"problem-1-verbose-information\">Problem 1: Verbose Information</h2><p>The first thing most users did on this page was <em><em>scroll, scroll and scroll</em></em>. <strong><strong><em><em>3 scrolls minimum</em></em>. </strong></strong>Also, did you notice the amount of text? We’re in the age of micro-blogging and us millennials have the attention span of goldfishes, for crying out loud!</p><h2 id=\"problem-2-cognitive-overload\">Problem 2: Cognitive overload</h2><p>The page was overflowing with tasks that required explicit actions from the user. Do this. And that. And hey, this too. Oh wait, THAT TOO. Chaotic. Select delivery location but first find where it is, check the total, select payment method, glance through all the dishes added to the cart, apply your discount voucher….?</p><h2 id=\"problem-3-prolonged-checkout\">Problem 3: Prolonged Checkout</h2><p>Too many actions and redundant information caused users to spend more than <strong><strong><em><em>2 minutes</em></em></strong></strong> just to confirm and place a simple order. Time wasted, energy wasted, tummy still not fed. 😫</p><h2 id=\"problem-4-high-cancellations\">Problem 4: High Cancellations</h2><p>A large sum of our users hurried through this step without actually double-checking delivery location details (<em><em>buried under a scroll somewhere</em></em>). This resulted in nearly 3% of our users cancelling and reordering the same cart with an updated address (that’s another story in itself).</p><h2 id=\"problem-5-lacks-love\">Problem 5: Lacks Love</h2><p>There was nothing delightful about this page. The dishes didn’t have images on checkout, the icons weren’t consistent, and had too much clutter. It was just text and buttons stacked in the form of black and white cards. No, seriously, even the active ‘<em><em>Add more items’ </em></em>button was a plain grey.</p><p><em><em>In a nutshell<strong><strong>,</strong></strong> our flow lacked information hierarchy, delight, structure, was too complex, and in all… poor.</em></em></p><p>In order to fix this, we spent a month researching, ideating, and defining the problem. Then we ideated some more, deliberated, chugged way too much beer (to add some philosophical thinking), and tried to justify one solution after another with the right data and metrics.</p><p>We were ready. We had all the answers. ?‍🤦‍♀️</p><blockquote>Boy, were we wrong.</blockquote><p>In the <a href=\"http://bit.ly/2FUiYDo\" rel=\"noopener\">next post</a>, I’ll detail all the steps we took to arrive at this perfect <em><em>(lol) </em></em>solution — and how it all went downhill.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-4.png\" class=\"kg-image\"></figure><p>Working at GOJEK is an exercise in learning from experience. Sometimes, we find ourselves confronted with undocumented and unsolved problems — which are expected when building a Super App. We could use a hand in solving these problems though. If you have the skills for the job, head over to <a href=\"http://bit.ly/2I4d8lx\" rel=\"noopener\">gojek.jobs</a>, and join the crew of our rocket ship. 🚀</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-3.jpeg\" class=\"kg-image\"><figcaption><a href=\"https://gojek-ghost.zysk.in/how-design-can-build-or-break-a-business-1-of-3/www.gojek.jobs\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/how-design-can-build-or-break-a-business-1-of-3/","canonical_url":null,"uuid":"8760ee83-2a89-4cca-b6b2-a202b45e4d4c","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb11d29f7c7da001effccb7","reading_time":6}},{"node":{"id":"Ghost__Post__5eb1194bf7c7da001effcc98","title":"How Kafka Solved a Culture Problem at Gojek","slug":"how-kafka-solved-a-culture-problem-at-gojek","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Kafka.jpg","excerpt":"Software stopped us from scaling, software set us free.","custom_excerpt":"Software stopped us from scaling, software set us free.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"14 February, 2019","updated_at_pretty":"02 June, 2020","created_at":"2020-05-05T13:14:11.000+05:30","published_at":"2019-02-14T13:14:00.000+05:30","updated_at":"2020-06-02T12:19:39.000+05:30","meta_title":"How Kafka Solved a Culture Problem at Gojek","meta_description":"Software stopped us from scaling, software set us free.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Software can solve cultural problems. While that might seem outlandish, if\nyou’re a developer, you might just get what I mean. Think about it carefully; it\ncan repeat mundane tasks, making people more productive. It can solve complex\nproblems, so devs can focus on pressing tasks.\n\nHowever, it can also complicate culture; like introducing a biometric system to\ntrack employee attendance, and have software track sick leaves.\n\n> In essence, an organisation’s tech stack will reflect the health of the company.\nIf you’re focused on writing beautiful code, it’s likely that employees are\ndisciplined, organised, and believe in the company’s values. It’s really not\nthat far-fetched a correlation.\n\nThis is a similar story; the story of Kafka — an open source tool that solved\nculture for us. Will try and simplify this for a broad audience, so devs, please\nbear with me if some explanations seem obvious and trite.\n\nBefore the Law — Chaos\nIn late 2015, unprecedented scale and failures were routine at Gojek. It also\nweighed heavily on culture\n[https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20] \n— because firefighting when systems are down bogs down morale and creates a\nfractious lot. It was truly Kafkaesque. (See what I did there? 😉). These\nfractures were common in our early days, because all developers depended on our\ncore systems.\n\nWe had about 10+ products at the time and about 60+ developers (Today, we have\n18+ products with 250+ developers overseeing them). These 60 passionate devs saw\nthe chance to build products, solve complex problems and moved fast to meet\nrapacious demand. Naturally, people were doing their own work, writing code in\ntheir own style, and had to sync with others to deploy what they wrote.\n\nAt the core of Gojek is ‘Allocations\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32]\n’; — a classic matchmaking engine between the driver and the customer. All\nsurrounding teams depended on this one team to add features, beta test their\nofferings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some\norders, they had to raise a ‘ticket’ with the Allocations team. The Allocations\nteam then processed this for GO-FOOD.\n\nNow, think of 50 developers asking Allocations to push their features first.\n\nSoon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a\nstrong relationship with Jane in Allocations, Ekta would get preference on her\nfeatures. This became problematic for us and as the org scaled, it added more\ncultural biases. Jane also became the defacto gatekeeper. Everyone had to toe\nher line if they wanted to build and deploy their own features. To add to this,\nAllocations was pushing back and severely lagging behind, because 50-odd\ndevelopers were adding and testing 10 features a day.\n\nBefore you knew it, Allocations became the bottleneck to scale the org. As if\nall that wasn’t enough, the team was not doing its own testing and experiments\nto make Allocations better and sharper. Things were spiralling downwards.\n\nA patch would not do, we needed a fix\nIt was apparent we had to fix this problem — once and for all. The \n‘Relationship-as-a-Service’ model was a disaster. RaaS was endemic in the org.\nThings were fine at a macro level, but at the base of it, we were failing.\n\nWe needed a solution that gave everyone the freedom to build and experiment. We\nwanted folks to think they’re building individual products from scratch without\nany reliance. Easier said that done, right?\n\n> This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to\nbuild startups within a startup.\nWe wanted to unleash our best minds to build, and not worry about RaaS.After\nsome research and consensus across the board, we were all sold on Kafka. \nSoftware was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn\nright.\n\nForget the morose writer\nEvery team was mandated to broadcast events on Kafka. If a driver booking was\nmade, it was sent to Kafka. If a driver completed the ride, it was sent to\nKafka. Kafka became the bus that carried the millions of events happening inside\nGojek.\n\n> Anything and everything individual teams did was visible to anyone and everyone\ninside Gojek.\nIf a team wanted to test features or roll out updates, they merely had to rely\non Kafka. No more RaaS. No more long waiting periods. This unleashed the\nproductivity of every developer. The day we rolled out Kafka, we killed the\ngatekeeper. Information was free and accessible to all. We were solving software\nproblems, but deep down, culture was the bigger fix.\n\n> Today, we emit 350,000,000 messages on Kafka and it’s every engineers’\nplayground.\nOur two-pizza team rule became far more efficient, and now we were solving\nbigger problems. This is also an example of how we look at Lean Engineering, but\nthat’s a story for another day.\n\nDas Urteil — But positive Metamorphosis\n‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913.\nMetamorphosis was published in 1915. The latter talks about how a salesman\nturned into an insect and struggles to live. It’s classic Franz Kafka; deeply\nsad, complex and incredibly gut-wrenching.\n\nIn our case, The Judgement was of an insect metamorphosing into a butterfly. It\ndidn’t happen overnight, but this was our tipping point. Our tech stack began to\nreflect organisation culture.\n\nKafka solved a critical cultural problem for us. 💪\n\nLiked what you read? Have our stories delivered straight to your inbox by \nsigning up for our newsletter [https://mailchi.mp/go-jek/gojek-tech-newsletter]!","html":"<p>Software can solve cultural problems. While that might seem outlandish, if you’re a developer, you might just get what I mean. Think about it carefully; it can repeat mundane tasks, making people more productive. It can solve complex problems, so devs can focus on pressing tasks.</p><p>However, it can also complicate culture; like introducing a biometric system to track employee attendance, and have software track sick leaves.</p><blockquote>In essence, an organisation’s tech stack will reflect the health of the company.</blockquote><p>If you’re focused on writing beautiful code, it’s likely that employees are disciplined, organised, and believe in the company’s values. It’s really not that far-fetched a correlation.</p><p><strong><strong>This is a similar story; the story of Kafka — an open source tool that solved culture for us.</strong></strong> Will try and simplify this for a broad audience, so devs, please bear with me if some explanations seem obvious and trite.</p><h3 id=\"before-the-law-chaos\">Before the Law — Chaos</h3><p>In late 2015, unprecedented scale and failures were routine at Gojek. It also weighed heavily on <a href=\"https://blog.gojekengineering.com/failures-make-us-stronger-part-2-a325cae09f20\" rel=\"noopener\">culture</a> — because firefighting when systems are down bogs down morale and creates a fractious lot. It was truly Kafkaesque. (See what I did there? 😉). These fractures were common in our early days, because all developers depended on our core systems.</p><p>We had about 10+ products at the time and about 60+ developers (Today, we have 18+ products with 250+ developers overseeing them). These 60 passionate devs saw the chance to build products, solve complex problems and moved fast to meet rapacious demand. Naturally, people were doing their own work, <strong><strong>writing code in their own style,</strong></strong> and had to sync with others to deploy what they wrote.</p><p>At the core of Gojek is ‘<a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">Allocations</a>’; — a classic matchmaking engine between the driver and the customer. All surrounding teams depended on this one team to add features, beta test their offerings, and much more. If GO-FOOD wanted to allocate a 4-star driver to some orders, they had to raise a ‘ticket’ with the Allocations team. The Allocations team then processed this for GO-FOOD.</p><p><em><em>Now, think of 50 developers asking Allocations to push their features first.</em></em></p><p>Soon, the org was heavily dependent on relationships. If Ekta from GO-BOX had a strong relationship with Jane in Allocations, Ekta would get preference on her features. This became problematic for us and as the org scaled, it added more cultural biases. <strong><strong>Jane also became the defacto gatekeeper.</strong> </strong>Everyone had to toe her line if they wanted to build and deploy their own features. To add to this, Allocations was pushing back and severely lagging behind, because 50-odd developers were adding and testing 10 features a day.</p><p>Before you knew it, <strong><strong>Allocations became the bottleneck to scale the org. </strong></strong>As if all that wasn’t enough, the team was not doing its own testing and experiments to make Allocations better and sharper. Things were spiralling downwards.</p><h3 id=\"a-patch-would-not-do-we-needed-a-fix\">A patch would not do, we needed a fix</h3><p>It was apparent we had to fix this problem — once and for all. The <strong><strong>‘Relationship-as-a-Service’</strong></strong> model was a disaster. <strong><strong>RaaS</strong></strong> was endemic in the org. Things were fine at a macro level, but at the base of it, we were failing.</p><p>We needed a solution that gave everyone the freedom to build and experiment. We wanted folks to think they’re building individual products from scratch without any reliance. <strong><strong>Easier said that done, right?</strong></strong></p><blockquote>This was the genesis of Gojek’s philosophy of building a #SuperApp — a chance to build startups within a startup.</blockquote><p>We wanted to unleash our best minds to build, and not worry about <strong><strong>RaaS.</strong></strong>After some research and consensus across the board, we were all sold on Kafka.<strong><strong> Software was going to solve our RaaS problem. Ambitious? Maybe. Pragmatic? Damn right</strong></strong>.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_TKa_fTjcIPBZr71sSMTaFA.jpeg\" class=\"kg-image\"></figure><h3 id=\"forget-the-morose-writer\">Forget the morose writer</h3><p>Every team was mandated to broadcast events on Kafka. If a driver booking was made, it was sent to Kafka. If a driver completed the ride, it was sent to Kafka. Kafka became the bus that carried the millions of events happening inside Gojek.</p><blockquote>Anything and everything individual teams did was visible to anyone and everyone inside Gojek.</blockquote><p>If a team wanted to test features or roll out updates, they merely had to rely on Kafka. No more RaaS<strong><strong>.</strong></strong> No more long waiting periods. This unleashed the productivity of every developer. <strong><strong>The day we rolled out Kafka, we killed the gatekeeper. Information was free and accessible to all. </strong></strong>We were solving software problems, but deep down, culture was the bigger fix.</p><blockquote>Today, we emit 350,000,000 messages on Kafka and it’s every engineers’ playground.</blockquote><p>Our two-pizza team rule became far more efficient, and now we were solving bigger problems. This is also an example of how we look at Lean Engineering, but that’s a story for another day.</p><h3 id=\"das-urteil-but-positive-metamorphosis\">Das Urteil — But positive Metamorphosis</h3><p>‘Das Urteil’ means ‘The Judgement’, and Franz Kafka published this book in 1913. Metamorphosis was published in 1915. The latter talks about how a salesman turned into an insect and struggles to live. It’s classic Franz Kafka; deeply sad, complex and incredibly gut-wrenching.</p><p>In our case, The Judgement was of an insect metamorphosing into a butterfly. It didn’t happen overnight, but this was our tipping point. Our tech stack began to reflect organisation culture.</p><p><strong><strong>Kafka solved a critical cultural problem for us.</strong></strong> 💪</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg.png\" class=\"kg-image\"></figure><p>Liked what you read? Have our stories delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter</a>!</p>","url":"https://gojek-ghost.zysk.in/how-kafka-solved-a-culture-problem-at-gojek/","canonical_url":null,"uuid":"e542a670-4560-4afc-af69-049af2d26ac2","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1194bf7c7da001effcc98","reading_time":4}},{"node":{"id":"Ghost__Post__5eb1065f5524cd001e7392a0","title":"What is a ‘Super App’?","slug":"what-is-a-super-app","featured":false,"feature_image":"https://res-4.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_cCPa4Lrj9cDM7uPI2uiwXA.jpg","excerpt":"Lessons in building an ecosystem — it’s always about thinking ahead for the long haul.","custom_excerpt":"Lessons in building an ecosystem — it’s always about thinking ahead for the long haul.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"11 February, 2019","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T11:53:27.000+05:30","published_at":"2019-02-11T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:12.000+05:30","meta_title":"What is a 'Super App'?","meta_description":"Lessons in building an ecosystem — it’s always about thinking ahead for the long haul.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"In early 2015, a Chinese documentary titled Under The Dome raked in 200 million\nviews in just three days. The 103-minute documentary didn’t release in a single\ntheatre.\n\nMore than 40% of viewers saw the movie on… wait for it… WeChat.\n\nWith more than a billion\n[https://www.statista.com/statistics/255778/number-of-active-wechat-messenger-accounts/] \n(Billion with a B ?) monthly active users, WeChat is the sort of phenomenon\nthat hasn’t been replicated anywhere else in the world. Till now. But more on\nthat later.\n\nWeChat is more than just an ‘app’ on a smartphone. Tencent, its parent company,\nhas unbundled the traditional desktop OS, or at least our idea of one. It’s one\napp for media sharing, social media, movie bookings (the irony?), taxi-hailing,\npayments, video calls, commerce and more. It also has its own Slack-like\ncorporate account. Hell, even government agencies use WeChat.\n\nUsers check the app at least 10 times a day on an average, and more than 80% of\nusers purchase products online. That kind of stickiness at such scale is\nunprecedented.\n\nIt’s not really an app as much as an Operating System for smartphones. WeChat is\na Super App.\n\nWhat makes for a Super App?\nIn 2010 [http://devblog.blackberry.com/2010/02/what-is-a-super-app/], Mike\nLazaridis, the Founder of Blackberry, took a stab at what a ‘Super App’\nconstitutes, “…representing a new class of mobile applications that make you\nwonder how you ever lived without them.” Lazaridis’ definition was a closed\necosystem of “many apps” that people would use everyday “…because they offer\nsuch a seamless, integrated, contextualised and efficient experience”.\nBlackberry, as you know, got unbundled because they charged the user to be on a\n‘platform’, without adding services to the platform. By building a walled\ngarden, the brand alienated its users.\n\nA Super App is many apps within an umbrella app. It’s an OS that unbundles the\ntyranny of apps. It’s the portal to the Internet for a mobile-first generation.\n\nMore often than not, it will likely be operate at the intersection of\nlogistics/hyper-local delivery, commerce, payments and social. To become a Super\nApp, you need at least two of these functions. The idea is to scale fast once\nyou have a user’s buy-in, and add multiple services to gain loyalty.\n\nOnce you have direct offerings, the next logical step is to open the app up to\nthird-party companies to build on a loyal user base. Now, you don’t build\nseparate apps. Instead, you can host your offerings on a single Super App.\nStep-by-step, the Super App becomes the OS.\n\nIn that context, there are a rare few who have what it takes to build a new-age,\nmobile-first OS that can be categorised as a Super App.\n\nSay hi to GOJEK*.\n\nWhat makes Gojek a Super App\nGojek is one app for ordering food, commuting, digital payments, shopping,\nhyper-local delivery, getting a massage, and two dozen services. It’s\nIndonesia’s first and fastest growing unicorn, building an on-demand empire.\nGojek runs the equivalent of three Indian unicorns rolled into one.\n\nMeet... the #SuperAppWith more than 125+ million app downloads, and total order\nvolumes growing 6600x in 36 months, Gojek already has 18+ products. Every year,\nthe company adds more ammunition to its arsenal. It’s the only hyper-growth\nstartup in the world from a developing country. One app, many use cases. Gojek\nis a #SuperApp.\n\nBut why a #SuperApp?\nBy removing clutter from a smartphone OS and its multiple apps, UX acts as a\nbait to get the next billion on a smartphone. Design becomes a language for the\nuninitiated. But among a dozen reasons why, here’s the most hilarious one:\n\nRemember India’s ‘Good Morning’ message phenomenon? Every day, India’s mobile\nusers send a ‘good morning’ image to their friends and family. According to a\nWSJ report\n[https://www.wsj.com/articles/the-internet-is-filling-up-because-indians-are-sending-millions-of-good-morning-texts-1516640068]\n, “These images have an overabundance of sun-dappled flowers, adorable toddlers,\nbirds and sunsets sent along with a cheery message.” As a result, one in three\nsmartphone users ran out of space daily, according to a Western Digital report.\n\nAnd the first thing they do to free up space is… delete apps.\n\nBut it’s not about space constraints anymore (that’s a thing of the past) — it’s\nabout breaking design language barriers so more baby boomers and the next\nbillion users can participate in the Internet economy.\n\nIn a nation of 1.3+ billion people, a little over a third of India has access to\nthe internet.\n\nIndia ranks well below the global average for mobile connectivity in the world.\nMobile broadband connectivity is only slightly better than Kenya.\n\nA Statista report\n[https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/] \nshows there are over four million apps available between just the Google Play\nstore and the Apple App Store, and the glut is painful for countries with\nlimited smartphone memory and a saturated market. A Super App corrects this\nimbalance. It sits on top of a mobile OS by shrinking the time taken to complete\na specific task and in turn, increase productivity. For the next billion users,\nit also adds UX elements that make it easier for users to get accustomed to\nmobile phone usage.\n\nIs it easy? No. Ask Facebook. For about two years, Facebook’s Messenger tried to\nbuild the WeChat of the West without much success. It remains to be seen if they\ncan do it in the current climate.\n\nWhich also makes GOJEK an interesting study.\n\nThe big sell for Gojek\n> The biggest moat Gojek built is payments. Once you’re handling money for a user,\nyou can build a castle of services within it.\nGoPay is accepted at close to 300,000 online and offline merchants in Indonesia,\nand processes $6.3 billion of annualised Gross Transaction Value (GTV). Talk\nabout disruption…\n\nGojek is one of the most interesting stories coming out of Southeast Asia and\nalso one of the least understood ones. It’s a fascinating story panning out in a\ndensely-populated geography riddled with opportunities.\n\n250+ engineers make software decisions that impact more than 261 million people.\nWe also practice what we preach — a ‘lean engineering mindset’ makes us automate\nmundane tasks and build a platform that has major social impacts. Technology is\nthe fulcrum on which a country is reinventing itself, and this change is the \nleast narrated story till date.\n\n*Disclosure: I’m [https://twitter.com/ponnappa] part of Gojek’s Board and run\nData Engineering @gojektech [https://twitter.com/gojektech].","html":"<p>In early 2015, a Chinese documentary titled <em><em>Under The Dome</em></em> raked in 200 million views in just three days. The 103-minute documentary didn’t release in a single theatre.</p><p><em><em>More than 40% of viewers saw the movie on… wait for it… <strong><strong>WeChat.</strong></strong></em></em></p><p>With more than a <a href=\"https://www.statista.com/statistics/255778/number-of-active-wechat-messenger-accounts/\" rel=\"noopener\">billion</a> (Billion with a B ?)<strong><strong> monthly active users</strong></strong>, WeChat is the sort of phenomenon that hasn’t been replicated anywhere else in the world. Till now. But more on that later.</p><p>WeChat is more than just an ‘app’ on a smartphone. Tencent, its parent company, has unbundled the traditional desktop OS, or at least our idea of one. It’s one app for media sharing, social media, movie bookings (the irony?), taxi-hailing, payments, video calls, commerce and more. It also has its own Slack-like corporate account. Hell, even government agencies use WeChat.</p><p>Users check the app at least 10 times a day on an average, and more than 80% of users purchase products online. That kind of stickiness at such scale is unprecedented.</p><p>It’s not really an app as much as an Operating System for smartphones. WeChat is a Super App.</p><h1 id=\"what-makes-for-a-super-app\">What makes for a Super App?</h1><p>In <a href=\"http://devblog.blackberry.com/2010/02/what-is-a-super-app/\" rel=\"noopener\">2010</a>, Mike Lazaridis, the Founder of Blackberry, took a stab at what a ‘Super App’ constitutes, “…representing a new class of mobile applications that make you wonder how you ever lived without them.” Lazaridis’ definition was a closed ecosystem of “many apps” that people would use everyday “…because they offer such a seamless, integrated, contextualised and efficient experience”. Blackberry, as you know, got unbundled because they charged the user to be on a ‘platform’, without adding services to the platform. <strong><strong>By building a walled garden, the brand alienated its users.</strong></strong></p><p><em><em>A Super App is many apps within an umbrella app. It’s an OS that unbundles the tyranny of apps. It’s the portal to the Internet for a mobile-first generation.</em></em></p><p>More often than not, it will likely be operate at the intersection of logistics/hyper-local delivery, commerce, payments and social. To become a Super App, you need at least two of these functions. The idea is to scale fast once you have a user’s buy-in, and add multiple services to gain loyalty.</p><p>Once you have direct offerings, the next logical step is to open the app up to third-party companies to build on a loyal user base. Now, you don’t build separate apps. Instead, you can host your offerings on a single Super App. Step-by-step, the Super App becomes the OS.</p><p>In that context, there are a rare few who have what it takes to build a new-age, mobile-first OS that can be categorised as a Super App.</p><p><strong><strong>Say hi to GOJEK*.</strong></strong></p><h1 id=\"what-makes-gojek-a-super-app\">What makes Gojek a Super App</h1><p>Gojek is one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, getting a massage, and two dozen services. It’s Indonesia’s first and fastest growing unicorn, building an on-demand empire. Gojek runs the equivalent of three Indian unicorns rolled into one.</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/Tn4MGnTkF8c?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><figcaption>Meet... the #SuperApp</figcaption></figure><p>With more than 125+ million app downloads, and total order volumes growing 6600x in 36 months, Gojek already has 18+ products. Every year, the company adds more ammunition to its arsenal. It’s the only hyper-growth startup in the world from a developing country. One app, many use cases. Gojek is a #SuperApp.</p><h1 id=\"but-why-a-superapp\">But why a #SuperApp?</h1><p>By removing clutter from a smartphone OS and its multiple apps, UX acts as a bait to get the <em><em>next billion</em></em> on a smartphone. <strong><strong>Design becomes a language</strong></strong> for the uninitiated. But among a dozen reasons why, here’s the most hilarious one:</p><p>Remember India’s ‘Good Morning’ message phenomenon? Every day, India’s mobile users send a ‘good morning’ image to their friends and family. According to a WSJ <a href=\"https://www.wsj.com/articles/the-internet-is-filling-up-because-indians-are-sending-millions-of-good-morning-texts-1516640068\" rel=\"noopener\">report</a>, “These images have an overabundance of sun-dappled flowers, adorable toddlers, birds and sunsets sent along with a cheery message.” As a result, one in three smartphone users ran out of space daily, according to a Western Digital report.</p><p>And the first thing they do to free up space is… <strong>delete apps.</strong></p><p>But it’s not about space constraints anymore (that’s a thing of the past) — it’s about breaking design language barriers so more baby boomers and the next billion users can participate in the Internet economy.</p><p><em><em>In a nation of 1.3+ billion people, a little over a third of India has access to the internet.</em></em></p><p>India ranks well below the global average for mobile connectivity in the world. Mobile broadband connectivity is only slightly better than Kenya.</p><p>A Statista <a href=\"https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/\" rel=\"noopener\">report</a> shows there are over four million apps available between just the Google Play store and the Apple App Store, and the glut is painful for countries with limited smartphone memory and a saturated market. <strong><strong>A</strong></strong> <strong><strong>Super App corrects this imbalance.</strong></strong> It sits on top of a mobile OS by shrinking the time taken to complete a specific task and in turn, increase productivity. For the next billion users, it also adds UX elements that make it easier for users to get accustomed to mobile phone usage.</p><p>Is it easy? No. Ask Facebook. For about two years, Facebook’s Messenger tried to build the WeChat of the West without much success. It remains to be seen if they can do it in the current climate.</p><p><em><em>Which also makes GOJEK an interesting study.</em></em></p><h1 id=\"the-big-sell-for-gojek\">The big sell for Gojek</h1><blockquote>The biggest moat Gojek built is payments. Once you’re handling money for a user, you can build a castle of services within it.</blockquote><p><strong><strong>G</strong>oPay<strong> is accepted at close to 300,000 online and offline merchants in Indonesia, and processes $6.3 billion of annualised Gross Transaction Value (GTV). </strong></strong>Talk about disruption…</p><p>Gojek is one of the most interesting stories coming out of Southeast Asia and also one of the least understood ones. It’s a fascinating story panning out in a densely-populated geography riddled with opportunities.</p><p>250+ engineers make software decisions that impact more than 261 million people. We also practice what we preach — a ‘lean engineering mindset’ makes us automate mundane tasks and build a platform that has major social impacts. Technology is the fulcrum on which a country is reinventing itself, and this change is the<strong><strong> least narrated story till date</strong></strong>.</p><p><em><em>*Disclosure: </em></em><a href=\"https://twitter.com/ponnappa\" rel=\"noopener\"><em><em>I’m</em></em></a><em><em> part of G</em>ojek<em>’s Board and run Data Engineering </em></em><a href=\"https://twitter.com/gojektech\" rel=\"noopener\"><em><em>@gojektech</em></em></a><em><em>.</em></em></p>","url":"https://gojek-ghost.zysk.in/what-is-a-super-app/","canonical_url":null,"uuid":"943a4b3e-3532-4925-9356-174a0ecf24c5","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1065f5524cd001e7392a0","reading_time":4}},{"node":{"id":"Ghost__Post__5ec2af8a7aa22c4066f83abe","title":"Applying the Single Responsibility Principle to Microservices","slug":"applying-the-single-responsibility-principle-to-microservices","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_5lEpe0Ab9138LC9cY1QZSQ.jpeg","excerpt":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","custom_excerpt":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"05 February, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T21:23:46.000+05:30","published_at":"2019-02-05T09:30:00.000+05:30","updated_at":"2020-05-18T21:30:57.000+05:30","meta_title":null,"meta_description":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Soham Kamani\n\nThe single responsibility principle is one of the most tried-and-tested tenets\nof software design. Every module or class should do one thing, and do it well.\nWe found this principle was applicable, and incredibly important, while\ndesigning our systems.\n\nAbout a year ago, we released a new chat service (which we internally called \nIcebreaker). It allowed our users to communicate with drivers through the app\nitself, rather than use SMS (which cost both the driver and customer money).\n\nHowever, all was not well. For numerous reasons, the service gave us a lot of\nissues and late night pagers. This post details the lessons we learnt, and some\nof the decisions we took to make this service more reliable.\n\nThe Problem(s)\nIn a nutshell, Icebreaker depended on too many other services to function\nproperly. Let’s look at some of the tasks Icebreaker performed in order to\ncreate a channel:\n\n 1. Authorise the API call: This made a call to our authentication service.\n 2. Fetch the customer profile: This required an HTTP call to our customer\n    service.\n 3. Fetch the drivers’ profile: This required an HTTP call to our driver\n    service.\n 4. Verify if the customer-driver pair are in an active order: This made a call\n    to our active booking storage service.\n 5. Create the channel.\n\nIf any of these services failed, Icebreaker would fail as well.\n\nSimultaneous dependence on multiple services ensures that the dependent service\nis less stable than any of themEven if we could ensure 99% uptime for all\nservices in question, that still means the chances of all of them being up at\nthe same time was 96%.\n\nP(icebreaker active) = P(customer service active) * P(driver service active) *\nP(authentication service active) * P(active booking storage active) = 0.99 *\n0.99 * 0.99 * 0.99 ~= 0.96\n\nThis means our downtime has increased four times over (4%, as opposed to 1%).\n\nNot my job\nWhen a service starts to do too many things, it’s bound to fail sooner or later.\nIn this case, Icebreaker’s job was to create a channel between a customer and a\ndriver. However, it was doing all this extra stuff: like authentication,\nverification, and profile retrieval. 🤦‍♂\n\nLet’s take a look at the changes we made to get rid of each dependency:\n\nAuthentication\nEvery API call arriving to Icebreaker came with an API token which needed\nauthentication. To solve this, we added a Kong [https://konghq.com/] API\ngateway. This authenticated all requests and added information about the\nauthenticated user within the API headers.\n\nNow, every request arriving to Icebreaker was authenticated.\n\n> Key takeaway: Tell, don’t ask. The requests coming from the API gateway told the\nservice that they were authenticated, rather than Icebreaker having to ask\nanother service.\nProfile retrieval\nIn order to create a channel, we needed a piece of information called the ‘chat\ntoken’ for each user. This was stored in the customer service for the customer,\nand the driver service for the driver.\n\nSince Icebreaker was the only service using this token, we moved these tokens to\nit, and removed them from the customer and driver services.\n\nNow,Icebreaker had all the information it needed in its own database, which was\na more reliable source of truth as compared to a whole other HTTP service.\n\n> Key takeaway: If your service is the only one using any piece of information, it\nshould reside within the service itself\nActive booking storage\nIcebreaker used to create a channel on-demand every time the user hit its\nchannel creation API. This on-demand creation required us to verify that an\nactive booking existed, for which the user needed to create a channel. After\nall, it didn’t make sense to create a channel when the parties involved did not\nhave an order with each other.\n\nTo fix this, we moved to an asynchronous architecture for channel creation.\nInstead of on-demand channel creation, we made use of GO-JEKs data pipeline\n[https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929],\nthat published events every time a booking was made. Icebreaker now consisted of\ntwo components: the worker and the server.\n\n 1. The worker consumed booking events every time they were made. It then\n    created a channel between the customer and driver in the booking, and stored\n    the channel information on a Redis cache.\n 2. The server served channel creation requests as before. Only, this time, the\n    channels were already created and cached, along with the order number.\n    \n\nSo, instead of on demand channel creation, the channels were created and stored\nbeforehand. Since we were consuming booking events from our own data pipeline,\nthere was no need to verify whether the booking was genuine or not.\n\n> Key takeaway: Again, tell, don’t ask. The events coming from our data pipeline\ntold Icebreaker that the bookings were genuine. This meant it could create the\nchannel, instead of hitting a service to verify the authenticity of the booking.\nResults\nNow Icebreaker did only what it was truly meant to do: create channels.\n\nSince we removed dependencies on most external systems, we no longer had to\nworry about one system failure causing Icebraker to malfunction. The load on the\nexternal services also reduced, since Icebreaker was no longer using their\nendpoints for channel creation.\n\nMoving to the asynchronous architecture also led to a drastic reduction in\nresponse time, from ~200ms to ~10ms, since we were pre-creating and caching\nchannels for every order.\n\nThe takeaways we got from this experience conform with the single responsibility\nprinciple. In the end, it’s always better to ask ourselves: “Can this service do\nless?”\n\n\n--------------------------------------------------------------------------------\n\nWant our stories in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Soham Kamani</p><p>The single responsibility principle is one of the most tried-and-tested tenets of software design. Every module or class should do one thing, and do it well. We found this principle was applicable, and incredibly important, while designing our systems.</p><p>About a year ago, we released a new chat service (which we internally called <strong><strong>Icebreaker</strong></strong>). It allowed our users to communicate with drivers through the app itself, rather than use SMS (which cost both the driver and customer money).</p><p>However, all was not well. For numerous reasons, the service gave us a lot of issues and late night pagers. This post details the lessons we learnt, and some of the decisions we took to make this service more reliable.</p><h1 id=\"the-problem-s-\">The Problem(s)</h1><p>In a nutshell, Icebreaker depended on too many other services to function properly. Let’s look at some of the tasks Icebreaker performed in order to create a channel:</p><ol><li>Authorise the API call: This made a call to our authentication service.</li><li>Fetch the customer profile: This required an HTTP call to our customer service.</li><li>Fetch the drivers’ profile: This required an HTTP call to our driver service.</li><li>Verify if the customer-driver pair are in an active order: This made a call to our active booking storage service.</li><li>Create the channel.</li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1304/1*oSRgws5JNm767tOTJfq7EA.png\" class=\"kg-image\"></figure><p><strong><strong>If any of these services failed, Icebreaker would fail as well.</strong></strong></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1304/1*tpBpiBUBVK-N0chl5fkLGQ.png\" class=\"kg-image\"><figcaption>Simultaneous dependence on multiple services ensures that the dependent service is less stable than any of them</figcaption></figure><p>Even if we could ensure 99% uptime for all services in question, that still means the chances of all of them being up at the same time was 96%.</p><p><code>P(icebreaker active) = P(customer service active) * P(driver service active) * P(authentication service active) * P(active booking storage active) = 0.99 * 0.99 * 0.99 * 0.99 ~= 0.96</code></p><p>This means our downtime has increased four times over (4%, as opposed to 1%).</p><h1 id=\"not-my-job\">Not my job</h1><p>When a service starts to do too many things, it’s bound to fail sooner or later. In this case, Icebreaker’s job was to create a channel between a customer and a driver. However, it was doing all this extra stuff: like authentication, verification, and profile retrieval. 🤦‍♂</p><p>Let’s take a look at the changes we made to get rid of each dependency:</p><h2 id=\"authentication\">Authentication</h2><p>Every API call arriving to Icebreaker came with an API token which needed authentication. To solve this, we added a <a href=\"https://konghq.com/\" rel=\"noopener\">Kong</a> API gateway. This authenticated all requests and added information about the authenticated user within the API headers.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*2d7v8u_WVx7YDowNapZGNQ.png\" class=\"kg-image\"></figure><p>Now, every request arriving to Icebreaker was authenticated.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Tell, don’t ask. The requests coming from the API gateway told the service that they were authenticated, rather than Icebreaker having to ask another service.</em></em></em></blockquote><h2 id=\"profile-retrieval\">Profile retrieval</h2><p>In order to create a channel, we needed a piece of information called the ‘chat token’ for each user. This was stored in the customer service for the customer, and the driver service for the driver.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*dKBOVH4ODILeTSqgQIazcw.png\" class=\"kg-image\"></figure><p>Since Icebreaker was the only service using this token, we moved these tokens to it, and removed them from the customer and driver services.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*eXYrRFGNnEPqv0nvbwjbIA.png\" class=\"kg-image\"></figure><p>Now,Icebreaker had all the information it needed in its own database, which was a more reliable source of truth as compared to a whole other HTTP service.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: </em><em>If your service is the only one using any piece of information, it should reside within the service itself</em></em></em></blockquote><h1 id=\"active-booking-storage\">Active booking storage</h1><p>Icebreaker used to create a channel on-demand every time the user hit its channel creation API. This on-demand creation required us to verify that an active booking existed, for which the user needed to create a channel. After all, it didn’t make sense to create a channel when the parties involved did not have an order with each other.</p><p>To fix this, we moved to an asynchronous architecture for channel creation. Instead of on-demand channel creation, we made use of GO-JEKs <a href=\"https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929\" rel=\"noopener\">data pipeline</a>, that published events every time a booking was made. <strong><strong>Icebreaker now consisted of two components: the worker and the server.</strong></strong></p><ol><li>The worker consumed booking events every time they were made. It then created a channel between the customer and driver in the booking, and stored the channel information on a Redis cache.</li><li>The server served channel creation requests as before. Only, this time, the channels were already created and cached, along with the order number.<br></li></ol><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3283/1*hNR_iSrTKkyvUhwMviHX_g.png\" class=\"kg-image\"></figure><p>So, instead of on demand channel creation, the channels were created and stored beforehand. Since we were consuming booking events from our own data pipeline, there was no need to verify whether the booking was genuine or not.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Again, tell, don’t ask. The events coming from our data pipeline told Icebreaker that the bookings were genuine. This meant it could create the channel, instead of hitting a service to verify the authenticity of the booking.</em></em></em></blockquote><h1 id=\"results\">Results</h1><p>Now Icebreaker did only what it was truly meant to do: create channels.</p><p>Since we removed dependencies on most external systems, we no longer had to worry about one system failure causing Icebraker to malfunction. The load on the external services also reduced, since Icebreaker was no longer using their endpoints for channel creation.</p><p>Moving to the asynchronous architecture also led to a drastic reduction in response time, from ~200ms to ~10ms, since we were pre-creating and caching channels for every order.</p><p>The takeaways we got from this experience conform with the single responsibility principle. In the end, it’s always better to ask ourselves: <strong><strong><em><em>“Can this service do less?”</em></em></strong></strong></p><hr><p>Want our stories in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">Sign up for our newsletter!</a><br></p>","url":"https://gojek-ghost.zysk.in/applying-the-single-responsibility-principle-to-microservices/","canonical_url":null,"uuid":"8bb46a92-34cc-4bf4-a26e-65dc26a77873","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2af8a7aa22c4066f83abe","reading_time":4}},{"node":{"id":"Ghost__Post__5eb12c67f7c7da001effcdd8","title":"How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)","slug":"how-gojek-manages-1-million-drivers-with-12-engineers-part-2","featured":false,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dWQkpxR4YJawDR4G6JgYFw.jpg","excerpt":"An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App","custom_excerpt":"An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 July, 2018","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:35:43.000+05:30","published_at":"2018-07-02T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:24.000+05:30","meta_title":null,"meta_description":"An overburdened codebase, an updated tech stack, a big rewrite— how a lean team built the foundation for a Super App","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Adithya Venkatesan\n\nThis is Part 2 of a feature story profiling the ‘Allocations’ team at GOJEK. For\nPart 1 of the story, please click here. [http://bit.ly/gojekfeature]\n\nThe Infinite Onion\nEvery onion layer you peel is accompanied by more tears. It seems like an\nendless problem. And just when you think it’s done, there’s another layer. For\nthe next 3 months, it was onion after onion, layer after layer across teams at\nGOJEK. Downtimes were the new normal by the beginning of 2016.\n\nBack to square one.\n\nThe ‘Broadcast algorithm’ the bid engine team was relying on was failing. But\nhow?\n\nEvery driver was seeing the same order multiple times. The algorithm\n‘broadcasted’ the same order across its driver database. So if there were 100\norders in a specific area and 200 drivers, each driver would see the order, but\nnot necessarily be able to fulfil it. There was a three-fold problem to the\nalgorithm: Accountability, High-concurrency and promoting Unhealthy competition.\n\nAccountability: How can we reward the drivers who are doing more orders, zero\ncancellations etc… when he/she simply couldn’t accept the order? How can we deny\nbonus, because by design, a driver was not getting an order due to a dozen\nreasons? There was no accountability for the driver, or the business\nfundamentals.\n\nHigh-concurrency: The sheer volume of orders meant drivers were missing out on\norders because it was blasted across phones. Some orders were not being\nfulfilled because of multiple blasts and server loads. More orders, less drivers\n= some orders not being fulfilled, which resulted in a poor customer experience.\n\nNote: The location-based orders are a peculiar problem for GOJEK.\n\n> Why? In a distance of 20metres, you’ll spot more than 30+ GO-RIDE scooters, as\nopposed to maybe a maximum of 10 cars.\nUnhealthy competition: Once you’re blasting an order to all, you’re not\nfactoring in quality drivers for customers. We were also not getting the nearest\ndriver for an order. This breeds unhealthy competitiveness among drivers.\n\nThere is an adequate probability of doubt in the nature the algorithm was\ndesigned, and other constraints that are outside of the realm. Who gets the\norder became a function of the phone — better GPS, hardware, Internet, software;\nall played a critical portion. And that was unfair. So zero accountability and\nhigh congestion of drivers meant things were going awry.\n\n10x growth, 100% failure\nWhen Niranjan [https://twitter.com/niranjan_p] pulled a couple of all nighters\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32] \nand and rewrote the code, the core portion was rewritten to make it a SPIKE.\nWhat is a spike? You break the rules and throw caution to the air with the\nobjective of shipping something out to keep the company afloat. The problem with\nSPIKE is that it wasn’t the end-solution. And that meant more downtimes and more\nfailures. But, the team was in murky waters by late 2015.\n\nAt this point, GOJEK was managing 300,000+ orders every day. Failures were\nroutine. Again. Wherever Nadiem went, he was questioned on why the app was\ncrashing or users could simply not find customers. At this point, the tech team\nwas made up of around 10 people, who were firefighting every day. When Shobhit\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n, one of our star programmers, went to a Domino’s store nearby to grab a quick\nbite, drivers started questioning him. Anyone who wore a GOJEK T-shirt became\nthe unofficial complaint box. Something needed to change, and fast.\n\nThis was again an underestimation of how much Indonesians relied on GOJEK.\nEveryone wanted to use GOJEK. It made life easier in the traffic-congested glut\nthat was Indonesia. Importantly, jobs and lives depended on it.\n\nDecisions…\n\nNadiem’s internal mail> “No project has a budget and impact as big as this in\nGOJEK’s history”\nThe big rewrite — The Perfect Allocation\nThe team needed to work on a different algorithm: 1–1 personalisation, pin\naccountability on drivers, identify what a perfect driver looks like, and ideate\non how to frame this persona. The big rewrite began in the middle of 2016. The\n‘bid engine’ team was now rechristened as the ‘Allocations’ team. At this point,\nwe were still losing customers. There were leaky faucets that were not sealed.\nAfter all, the work of the Allocations team criss-crossed all of GOJEK’s\nproducts and services. It was time to revisit the mothership.\n\nHello Clojure.\n\nBack to square one. Back to taking risks. By now, the core team was all too\nfamiliar with handling high-pressure timelines and live codebases. Clojure was\nan obvious choice because of the specific complexities it intended to solve.\n\n> “Only two in the team knew Clojure then, but it solved an important business\nproblem. We went with it and we all had to learn. Back to school. Again.” — \nNiranjan Paranjape\n[https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------]\nThe first task was to replicate the bid engine logic. A 6-member team got to\nwork with Clojure. Why Clojure? Because the language designs better abstractions\nfor a specific problem the team needed to solve. While Golang was the modern\nsuperbike that had it all, Clojure was the cruiser — really simple and capable\nof designing complex code. Clojure ushered this idea of getting organised and\nensuring good software development practices.\n\nOn the left, you see the Allocation code in Go. On the right, the exact same\ncode in Clojure.\n\nThis is not to state one language is better than the other. It’s tempting to\narrive at that conclusion when you see the image above. There were trade-offs\nmade when the switch was made. While Go is superior in performance, the\ncapability to make changes and add features was hard. Language was traded for\ndesign.\n\nThe innate abstraction to sniff out what works when, how and why is what makes\nlean engineering so special at GOJEK.\n\n“The more boring a rewrite is, the sweeter the success,” — Shobhit\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n. After the 2-month long big rewrite, a stable product was live. Pause. Breathe.\nAfter 3 days of releasing, no one noticed there was a new codebase/algorithm in\nplace. That’s what success tastes like. Smooth as butter. No issues and\nachieving scale.\n\nShaping a mindset\nThat’s half the story told. A million mistakes later, we’re still making\nmistakes. But that’s the good part. We fail fast. We build fast. No hierarchy. \nThere’s an ingrained mentality of managing more with less. Anything that’s\nrepetitive gets automated. One could argue this was born out of the desperation\nof GOJEK products being the arteries criss-crossing through the heart of\nIndonesia. Regardless, the engineering psyche was passed down and filters\nthrough our recruitment. Here’s a reckoner on why GOJEK is hard to get into and\nequally hard to abandon.\n[https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790]\n\nThe simplification of the story would merely state the Allocation team allocates\ndrivers to customers. But their genesis is filled with fascinating engineering\ninsights. How do you factor supply and demand, how do you reward drivers, manage\ndriver health by reducing the workload, figure surge pricing, check for\nloopholes, and so on. Each function has dozens of people in similar startups at\nGOJEK’s scale. We are able to cut this down because of our emphasis on lean\nengineering. We don’t make compromises on our recruitment either. Leaders code.\nEveryone codes.\n\nEngineers are running their own startups in a startup. GOJEK is creating a one\nof a kind Super App with a platform for other startups to be part of\n\nToday, anyone within a 300-meter range can grab a ride. That’s only an average.\nIn popular malls near Jakarta, there are drivers every 10 metres or lesser. Then\ncame dashboards and data to crunch driver statistics, daily research to tweak\nthe algorithm. The last time I checked, GOJEK does more than 35+ orders each\nsecond across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc…\n\nThe ship of Theseus\nYou use a really old car to commute to office. It breaks, stutters and sometimes\nrefuses to move entirely. You can’t scrap it because it’s the only car you have.\nBut you want a supercar. So you go about buying the steering wheel and fixing it\nto the old car. Then comes the rims, the music system, leather seats and slowly,\nthe car begins to take shape. But it still has components of nostalgia; the car\nthat ferried you in dark times when nothing else would. Stan Marsh is that old\ncar.\n\nRemember Stan Marsh? The old legacy code on which GOJEK was being built?\n\n10% of Stan Marsh survives. Even till date. (There is a plan to eventually put\nit to bed [https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf])\nIt’s there for legacy reasons. I suspect the team is also sentimental about it.\nThink of it as the ‘Ship of Theseus’ conundrum. No matter what engineers who\njoin GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built.\nSmart engineering is also about working with a legacy codebase and improving it.\nFly with what you have and make it better. Everything else will follow. The team\nembraced that challenge.\n\nIt all boils down to the kind of people you let in the system. People are\nempowered to make decisions at GOJEK. As our India Head, Sidu Ponnappa\n[https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------] \noften repeats, “Don’t throw people at a problem.” It’s a typical outsourcing\nmindset Indian Engineers have been cajoled into. More people does not mean\nbetter work. More people does not mean better code. If that were true, GOJEK\nsimply wouldn’t exist today doing more than a 100 million+ orders a month with a\npaltry 200+ engineers.\n\n\n--------------------------------------------------------------------------------\n\nStory credits: Shobhit Srivastava\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n, Ranjeet Singh\n[https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------]\n, Mehakdeep Singh\n[https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------]\n, Bergas Bimo Branarto\n[https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------]\n.","html":"<p>By Adithya Venkatesan</p><p>This is Part 2 of a feature story profiling the ‘Allocations’ team at GOJEK. For Part 1 of the story, please click <a href=\"http://bit.ly/gojekfeature\" rel=\"noopener\">here.</a></p><h1 id=\"the-infinite-onion\">The Infinite Onion</h1><p>Every onion layer you peel is accompanied by more tears. It seems like an endless problem. And just when you think it’s done, there’s another layer. For the next 3 months, it was onion after onion, layer after layer across teams at GOJEK. Downtimes were the new normal by the beginning of 2016.</p><p>Back to square one.</p><p>The ‘Broadcast algorithm’ the bid engine team was relying on was failing. But how?</p><p>Every driver was seeing the same order multiple times. The algorithm ‘broadcasted’ the same order across its driver database. So if there were 100 orders in a specific area and 200 drivers, each driver would see the order, but not necessarily be able to fulfil it. There was a three-fold problem to the algorithm: Accountability, High-concurrency and promoting Unhealthy competition.</p><p><strong><strong>Accountability:</strong></strong> How can we reward the drivers who are doing more orders, zero cancellations etc… when he/she simply couldn’t accept the order? How can we deny bonus, because by design, a driver was not getting an order due to a dozen reasons? There was no accountability for the driver, or the business fundamentals.</p><p><strong><strong>High-concurrency: </strong></strong>The sheer volume of orders meant drivers were missing out on orders because it was blasted across phones. Some orders were not being fulfilled because of multiple blasts and server loads. More orders, less drivers = some orders not being fulfilled, which resulted in a poor customer experience.</p><p><strong><strong>Note: The location-based orders are a peculiar problem for GOJEK.</strong></strong></p><blockquote>Why? In a distance of 20metres, you’ll spot more than 30+ GO-RIDE scooters, as opposed to maybe a maximum of 10 cars.</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/528/1*UwVrMbrdIEzUdeyhOaI65A.gif\" class=\"kg-image\"></figure><p><strong><strong>Unhealthy competition: </strong></strong>Once you’re blasting an order to all, you’re not factoring in quality drivers for customers. We were also not getting the nearest driver for an order. This breeds unhealthy competitiveness among drivers.</p><p>There is an adequate probability of doubt in the nature the algorithm was designed, and other constraints that are outside of the realm. Who gets the order became a function of the phone — better GPS, hardware, Internet, software; all played a critical portion. And that was unfair. So zero accountability and high congestion of drivers meant things were going awry.</p><h1 id=\"10x-growth-100-failure\">10x growth, 100% failure</h1><p>When <a href=\"https://twitter.com/niranjan_p\" rel=\"noopener\">Niranjan</a> pulled a couple of <a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">all nighters</a> and and rewrote the code, the core portion was rewritten to make it a SPIKE. What is a spike? You break the rules and throw caution to the air with the objective of shipping something out to keep the company afloat. The problem with SPIKE is that it wasn’t the end-solution. And that meant more downtimes and more failures. But, the team was in murky waters by late 2015.</p><p>At this point, GOJEK was managing 300,000+ orders every day. Failures were routine. Again. Wherever Nadiem went, he was questioned on why the app was crashing or users could simply not find customers. At this point, the tech team was made up of around 10 people, who were firefighting every day. When <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit</a>, one of our star programmers, went to a Domino’s store nearby to grab a quick bite, drivers started questioning him. <strong><strong>Anyone who wore a GOJEK T-shirt became the unofficial complaint box</strong></strong>. Something needed to change, and fast.</p><p>This was again an underestimation of how much Indonesians relied on GOJEK. Everyone wanted to use GOJEK. It made life easier in the traffic-congested glut that was Indonesia. Importantly, jobs and lives depended on it.</p><p>Decisions…</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/681/1*GoeCvdf2ZFyxxDlyeVC0tQ.png\" class=\"kg-image\"><figcaption>Nadiem’s internal mail</figcaption></figure><blockquote>“No project has a budget and impact as big as this in GOJEK’s history”</blockquote><h1 id=\"the-big-rewrite-the-perfect-allocation\">The big rewrite — The Perfect Allocation</h1><p>The team needed to work on a different algorithm: 1–1 personalisation, pin accountability on drivers, identify what a perfect driver looks like, and ideate on how to frame this persona. The big rewrite began in the middle of 2016. The ‘bid engine’ team was now rechristened as the ‘Allocations’ team. At this point, we were still losing customers. There were leaky faucets that were not sealed. After all, the work of the Allocations team criss-crossed all of GOJEK’s products and services. It was time to revisit the mothership.</p><p><em><em><strong><strong><em>Hello Clojure.</em></strong></strong></em></em></p><p>Back to square one. Back to taking risks. By now, the core team was all too familiar with handling high-pressure timelines and live codebases. Clojure was an obvious choice because of the specific complexities it intended to solve.</p><blockquote>“Only two in the team knew Clojure then, but it solved an important business problem. We went with it and we all had to learn. Back to school. Again.” — <a href=\"https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Niranjan Paranjape</a></blockquote><p>The first task was to replicate the bid engine logic. A 6-member team got to work with Clojure. Why Clojure? Because the language designs better abstractions for a specific problem the team needed to solve. While Golang was the modern superbike that had it all, Clojure was the cruiser — really simple and capable of designing complex code. Clojure ushered this idea of getting organised and ensuring good software development practices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1895/1*7W31wteVSSria2fq7mZ7bA.jpeg\" class=\"kg-image\"></figure><p>On the left, you see the Allocation code in Go. On the right, the exact same code in Clojure.</p><p>This is not to state one language is better than the other. It’s tempting to arrive at that conclusion when you see the image above. There were trade-offs made when the switch was made. While Go is superior in performance, the capability to make changes and add features was hard. Language was traded for design.</p><p><em><em>The innate abstraction to sniff out what works when, how and why is what makes lean engineering so special at GOJEK.</em></em></p><p>“The more boring a rewrite is, the sweeter the success,” — <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit</a>. After the 2-month long big rewrite, a stable product was live. Pause. Breathe. After 3 days of releasing, no one noticed there was a new codebase/algorithm in place. That’s what success tastes like. Smooth as butter. No issues and achieving scale.</p><h1 id=\"shaping-a-mindset\">Shaping a mindset</h1><p>That’s half the story told. A million mistakes later, we’re still making mistakes. But that’s the good part. We fail fast. We build fast. No hierarchy. <strong><strong>There’s an ingrained mentality of managing more with less. Anything that’s repetitive gets automated</strong></strong>. One could argue this was born out of the desperation of GOJEK products being the arteries criss-crossing through the heart of Indonesia. Regardless, the engineering psyche was passed down and filters through our recruitment. Here’s a reckoner on <a href=\"https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790\" rel=\"noopener\">why GOJEK is hard to get into and equally hard to abandon.</a></p><p>The simplification of the story would merely state the Allocation team allocates drivers to customers. But their genesis is filled with fascinating engineering insights. How do you factor supply and demand, how do you reward drivers, manage driver health by reducing the workload, figure surge pricing, check for loopholes, and so on. Each function has dozens of people in similar startups at GOJEK’s scale. We are able to cut this down because of our emphasis on lean engineering. We don’t make compromises on our recruitment either. Leaders code. Everyone codes.</p><p>Engineers are running their own startups in a startup. GOJEK is creating a one of a kind Super App with a platform for other startups to be part of</p><p>Today, anyone within a 300-meter range can grab a ride. That’s only an average. In popular malls near Jakarta, there are drivers every 10 metres or lesser. Then came dashboards and data to crunch driver statistics, daily research to tweak the algorithm. The last time I checked, GOJEK does more than 35+ orders <strong><strong>each second</strong></strong> across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc…</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1200/1*uIDXYaHyIQzvhtIHRThNWA.jpeg\" class=\"kg-image\"></figure><h1 id=\"the-ship-of-theseus\">The ship of Theseus</h1><p>You use a really old car to commute to office. It breaks, stutters and sometimes refuses to move entirely. You can’t scrap it because it’s the only car you have. But you want a supercar. So you go about buying the steering wheel and fixing it to the old car. Then comes the rims, the music system, leather seats and slowly, the car begins to take shape. But it still has components of nostalgia; the car that ferried you in dark times when nothing else would. Stan Marsh is that old car.</p><p><em><em>Remember Stan Marsh? The old legacy code on which GOJEK was being built?</em></em></p><p>10% of Stan Marsh survives. Even till date. (<a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\">There is a plan to eventually put it to bed</a>) It’s there for legacy reasons. I suspect the team is also sentimental about it. Think of it as the ‘Ship of Theseus’ conundrum. No matter what engineers who join GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built. Smart engineering is also about working with a legacy codebase and improving it. Fly with what you have and make it better. Everything else will follow. The team embraced that challenge.</p><p>It all boils down to the kind of people you let in the system. People are empowered to make decisions at GOJEK. As our India Head, <a href=\"https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Sidu Ponnappa</a> often repeats, “Don’t throw people at a problem.” It’s a typical outsourcing mindset Indian Engineers have been cajoled into. More people does not mean better work. More people does not mean better code. If that were true, GOJEK simply wouldn’t exist today doing more than a 100 million+ orders a month with a paltry 200+ engineers.</p><hr><p>Story credits: <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit Srivastava</a>, <a href=\"https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Ranjeet Singh</a>, <a href=\"https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Mehakdeep Singh</a>, <a href=\"https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Bergas Bimo Branarto</a>.</p>","url":"https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-2/","canonical_url":null,"uuid":"b71c3dd0-28bd-4805-8af7-6071c17748f3","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12c67f7c7da001effcdd8","reading_time":7}}]},"tags":{"edges":[{"node":{"name":"Culture","slug":"culture"}},{"node":{"name":"Data","slug":"data"}},{"node":{"name":"Design","slug":"design"}},{"node":{"name":"News","slug":"news"}},{"node":{"name":"Stories","slug":"stories"}},{"node":{"name":"Tech","slug":"tech"}}]}},"pageContext":{"pageNumber":2,"humanPageNumber":3,"skip":24,"limit":12,"numberOfPages":4,"previousPagePath":"/page/2","nextPagePath":"/page/4"}}}