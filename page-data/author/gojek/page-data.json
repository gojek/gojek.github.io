{"componentChunkName":"component---src-templates-author-js","path":"/author/gojek/","result":{"data":{"ghostAuthor":{"slug":"gojek","name":"Gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","cover_image":"https://gojek-ghost.zysk.in/content/images/2020/05/GoRide-with-Passenger.jpg","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","location":null,"website":"https://www.gojek.io","twitter":"@gojektech","facebook":"gojektech"},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5ed9f3e47aa22c4066f8405b","title":"Helping our Helpers with GoModal","slug":"helping-our-helpers-with-gomodal","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/06/GoModal-1.gif","excerpt":"The story of how we built a product to help our merchant partners power through short-term capital needs.","custom_excerpt":"The story of how we built a product to help our merchant partners power through short-term capital needs.","visibility":"public","created_at_pretty":"05 June, 2020","published_at_pretty":"05 June, 2020","updated_at_pretty":"05 June, 2020","created_at":"2020-06-05T12:57:32.000+05:30","published_at":"2020-06-05T13:05:38.000+05:30","updated_at":"2020-06-05T13:05:38.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Startup","slug":"startup","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gojek","slug":"gojek","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Amalia runs a small salad shop in Jakarta — the kind that serves creamy\nconcoctions topped with freshly cut fruits. Strawberries are one of her most\npopular toppings.\n\n> Recently, she decided not to buy strawberries. The prices were too high and she\ncouldn’t afford them anymore.\nAs the operator of GoFood, one of the largest food delivery services in the\nworld, the wellbeing of merchant partners is paramount to us at Gojek. Many of\nour 400,000 partners, like Amalia, routinely encounter financial bottlenecks due\nto unexpected expenses or improper revenue management.\n\nFor a significant percentage of partners, bookkeeping is still a foreign\nconcept, with the order info provided by GoFood serving as their main marker for\nsales and revenue. They tend to go with the flow of the business, not planning\non scaling up or battening the hatches for a rainy day.\n\n> As another merchant partner puts it, “I never think much about money, I just\nleave it to the Almighty.”\nThe health of our business is only as good as the health of the businesses we\nwork with. So we embarked on a journey to help merchants with their capital woes\nby building a new financial service product.\n\nThis is how we built GoModal.\n\nTrials and tribulations\nWhen the going gets tough, merchant partners usually have three options: borrow\nfrom a relative, approach a bank, or cut down on living expenses.\n\nIn Indonesia, the idea of taking a pinjaman (loan) is still frowned upon. Even\nif the capital requirement is to help tide over a temporary crisis or business\nexpansion, merchants are hesitant to approach family for this reason. As many do\nnot possess solid credit scores, traditional bank loans are difficult to come by\nas well. This led to many partners pulling from savings and cutting down on\nexpenses — forgoing even daily essentials to keep business going.\n\nThis wasn’t an experience we wanted our partners to have. Something had to be\ndone.\n\nGojek’s first attempt to solve this involved a tie-up with one of Indonesia’s\nlargest banks to offer our merchant partners subsidised business credit. While\nwe had the right idea, we had not solved the underlying issues — partners would\nrarely pass the stringent disbursal criteria of a commercial bank, and disbursal\ntimelines would not suit their need for immediate capital.\n\n> In bad times, rapid capital infusion could make the difference between a\nbusiness sinking or floating.\nWe decided to try a different approach.\n\nWe’re in this together\nIn late 2018, we began offering working capital loans to our merchant partners.\nBy the next year, Gojek’s erstwhile merchant app, GoResto, had been overhauled\ninto GoBiz, a comprehensive Super App built to cater to all the needs of\nmerchant partners. In September 2019, we added our loan feature to GoBiz’s\nmerchant dashboard.\n\nWe called this Pinjaman Modal Usaha (PMU). In other words, a ‘venture capital\nloan’.\n\nAs the payments of partners who had signed up for GoBiz was processed by us, we\ncould figure out their revenues and repayment capacity ourselves. This put Gojek\nin the perfect position to offer working capital, made collections simple, and\nfurther reinforced the trust partners had in us.\n\nThe capital need was slowly being addressed. The latter half of 2019 saw us\ndisburse capital to over 4,500 merchants. 🙌\n\nBut one problem bothered us. We still weren’t fast enough.\n\nFrom pinjaman to modal\nWith PMU, Gojek had successfully addressed part of our partners’ capital woes.\nBut PMU still relied on a rudimentary form to collect applications, tracking via\nspreadsheets, and manual approval processes.\n\n> The first step was a small one, automating parts of the verification and\nprocessing.\n> Next, we built out a complete credit cycle.\n> Then, we got rid of the spreadsheets.\nWe now had a complete product that could figure out how much capital could be\ngiven to which merchant, process applications almost instantly, and systems that\ncould handle disbursal and recovery.\n\nAs the final cherry (or strawberry 😉) on top, we decided our improved product\ncould use an improved name. A Gojek name.\n\nRemember the negative connotation associated with the word pinjaman? We weren’t\ngiving our partners loans. We were giving them capital. Modal.\n\nAnd so was a new product born — GoModal.\n\nWhat does it do?\nNow that we had a product that could do everything we envisioned, it was time to\nget it out front and centre. Not a lot of merchants manually accessed the GoBiz\ndashboard, so in January 2020, we put GoModal in a place where we sure everyone\nwould see it.\n\nThe GoBiz app.\n\nUsing GoModal, eligible merchant partners can avail pre-approved working capital\nbetween Rp1.5m ($90) to Rp150m ($9,000) with repayment tenures ranging from 2 to\n12 months.\n\nRemember we mentioned we could now disburse capital faster?\n\n> Relying on a bank for capital leads to processing time of up to 6 weeks. With\nGoModal, we get money to the bank accounts of our partners in 13 hours. 💪\nSince our partners are now busy fighting fires and expanding business, we\nfigured it wasn’t fair to hassle them with big monthly repayments. As their\nearnings are processed by GoBiz, we deduct payments from their daily earnings up\nto 20 days a month, assuming they generated enough revenue.\n\nGoFood is built by the grit and ingenuity of our partner merchants, and running\na business is hard enough without having to constantly worry about capital.\nThat’s why we went on the journey to build GoModal.\n\nSo people like Amalia never have to worry about buying strawberries again.\n\nWant more of content like this? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]!","html":"<p>Amalia runs a small salad shop in Jakarta — the kind that serves creamy concoctions topped with freshly cut fruits. Strawberries are one of her most popular toppings.</p><blockquote><em><em>Recently, she decided not to buy strawberries. The prices were too high and she couldn’t afford them anymore.</em></em></blockquote><p>As the operator of GoFood, one of the largest food delivery services in the world, the wellbeing of merchant partners is paramount to us at Gojek. Many of our 400,000 partners, like Amalia, routinely encounter financial bottlenecks due to unexpected expenses or improper revenue management.</p><p>For a significant percentage of partners, bookkeeping is still a foreign concept, with the order info provided by GoFood serving as their main marker for sales and revenue. They tend to go with the flow of the business, not planning on scaling up or battening the hatches for a rainy day.</p><blockquote><em><em>As another merchant partner puts it, “I never think much about money, I just leave it to the Almighty.”</em></em></blockquote><p>The health of our business is only as good as the health of the businesses we work with. So we embarked on a journey to help merchants with their capital woes by building a new financial service product.</p><p>This is how we built GoModal.</p><h3 id=\"trials-and-tribulations\">Trials and tribulations</h3><p>When the going gets tough, merchant partners usually have three options: borrow from a relative, approach a bank, or cut down on living expenses.</p><p>In Indonesia, the idea of taking a <em><em>pinjaman</em></em> (loan) is still frowned upon. Even if the capital requirement is to help tide over a temporary crisis or business expansion, merchants are hesitant to approach family for this reason. As many do not possess solid credit scores, traditional bank loans are difficult to come by as well. This led to many partners pulling from savings and cutting down on expenses — forgoing even daily essentials to keep business going.</p><p><strong><strong>This wasn’t an experience we wanted our partners to have. Something had to be done.</strong></strong></p><p>Gojek’s first attempt to solve this involved a tie-up with one of Indonesia’s largest banks to offer our merchant partners subsidised business credit. While we had the right idea, we had not solved the underlying issues — partners would rarely pass the stringent disbursal criteria of a commercial bank, and disbursal timelines would not suit their need for immediate capital.</p><blockquote><em><em>In bad times, rapid capital infusion could make the difference between a business sinking or floating.</em></em></blockquote><p>We decided to try a different approach.</p><h3 id=\"we-re-in-this-together\">We’re in this together</h3><p>In late 2018, we began offering working capital loans to our merchant partners. By the next year, Gojek’s erstwhile merchant app, GoResto, had been overhauled into GoBiz, a comprehensive Super App built to cater to all the needs of merchant partners. In September 2019, we added our loan feature to GoBiz’s merchant dashboard.</p><p>We called this <em><em>Pinjaman Modal Usaha</em></em> (PMU). In other words, a ‘venture capital loan’.</p><p>As the payments of partners who had signed up for GoBiz was processed by us, we could figure out their revenues and repayment capacity ourselves. This put Gojek in the perfect position to offer working capital, made collections simple, and further reinforced the trust partners had in us.</p><p>The capital need was slowly being addressed. The latter half of 2019 saw us disburse capital to over 4,500 merchants. 🙌</p><p><em><em>But one problem bothered us. We still weren’t fast enough.</em></em></p><h3 id=\"from-pinjaman-to-modal\">From pinjaman to modal</h3><p>With PMU, Gojek had successfully addressed part of our partners’ capital woes. But PMU still relied on a rudimentary form to collect applications, tracking via spreadsheets, and manual approval processes.</p><blockquote><em><em>The first step was a small one, automating parts of the verification and processing.</em></em></blockquote><blockquote><em><em>Next, we built out a complete credit cycle.</em></em></blockquote><blockquote><em><em>Then, we got rid of the spreadsheets.</em></em></blockquote><p>We now had a complete product that could figure out how much capital could be given to which merchant, process applications almost instantly, and systems that could handle disbursal and recovery.</p><p>As the final cherry (or strawberry 😉) on top, we decided our improved product could use an improved name. A Gojek name.</p><p>Remember the negative connotation associated with the word <em><em>pinjaman</em></em>? We weren’t giving our partners <em><em>loans</em></em>. We were giving them <em><em>capital</em></em>. <strong><strong>Modal</strong></strong>.</p><p>And so was a new product born — GoModal.</p><h3 id=\"what-does-it-do\">What does it do?</h3><p>Now that we had a product that could do everything we envisioned, it was time to get it out front and centre. Not a lot of merchants manually accessed the GoBiz dashboard, so in January 2020, we put GoModal in a place where we sure everyone would see it.</p><p><strong><strong>The GoBiz app.</strong></strong></p><p>Using GoModal, eligible merchant partners can avail pre-approved working capital between Rp1.5m ($90) to Rp150m ($9,000) with repayment tenures ranging from 2 to 12 months.</p><p>Remember we mentioned we could now disburse capital faster?</p><blockquote>Relying on a bank for capital leads to processing time of up to 6 weeks. With GoModal, we get money to the bank accounts of our partners in 13 hours. 💪</blockquote><p>Since our partners are now busy fighting fires and expanding business, we figured it wasn’t fair to hassle them with big monthly repayments. As their earnings are processed by GoBiz, we deduct payments from their daily earnings up to 20 days a month, assuming they generated enough revenue.</p><p>GoFood is built by the grit and ingenuity of our partner merchants, and running a business is hard enough without having to constantly worry about capital. That’s why we went on the journey to build GoModal.</p><p>So people like Amalia never have to worry about buying strawberries again.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-15.png\" class=\"kg-image\"></figure><p>Want more of content like this? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a>!</p>","url":"https://gojek-ghost.zysk.in/helping-our-helpers-with-gomodal/","canonical_url":null,"uuid":"c9b06805-5e63-4c53-acc9-6fe01ed0a349","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ed9f3e47aa22c4066f8405b","reading_time":4}},{"node":{"id":"Ghost__Post__5ed9e2717aa22c4066f83fe8","title":"The Process Behind Program Management","slug":"the-process-behind-program-management","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/06/ProcessProgramManagement.jpg","excerpt":"Using a Program Management and Agile approach to make deliverables skyrocket.","custom_excerpt":"Using a Program Management and Agile approach to make deliverables skyrocket.","visibility":"public","created_at_pretty":"05 June, 2020","published_at_pretty":"05 June, 2020","updated_at_pretty":"05 June, 2020","created_at":"2020-06-05T11:43:05.000+05:30","published_at":"2020-06-05T12:06:33.000+05:30","updated_at":"2020-06-05T13:07:06.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gojek","slug":"gojek","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Program Management","slug":"program-management","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Project Management","slug":"project-management","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Scrum","slug":"scrum","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"We’ve often talked about how Gojek doesn’t build one Super App, it builds three.\nTo achieve this, multiple Product Development Groups (PDG) exist within Gojek.\nOne of these is the GoMerchants PDG, that handles all our merchant-centric\ninitiatives, including GoBiz, our SuperApp for merchant partners.\n\nGoMerchants is an entity formed by the fusion of multiple teams that all had\ntheir own work styles. How do such diverse people come together and build\namazing things? That’s where Program Management comes into the picture.\n\nThe Challenge\nGoMerchants PDG was formed from five separate teams (SPOTS, Midtrans, Mapan,\nGoResto, Nadipos), and each team had a unique engineering culture. Across teams,\nthe total number of staff involved in cross-functional work was ~240 people.\n\nAfter a discovery phase of the process over 3 months with the various groups, we\nfound that every team was utilising different versions of project management\nmethodology and tools to track team progress. Across various teams, we\nidentified nearly a dozen different types of tools and methods including the\nScrum method, Kanban method, Jira tools, Favro Tools, and Trello tools.\n\nThe key takeaway was clear: There was no single source of truth for tracking\nteam deployment progress.\n\nThe Solution\nTo achieve our goal of reaching a high rate of (quality) deliverables with clear\ntransparency on progress, the Program Managers decided to build a program that\nset a single standard workflow for everyone involved. The end result? A meld of\nAgile best practices and a limited/select set of tools.\n\nAt the highest level, Program Management methodology focuses on adding just \nenough processes to help with efficiency — and not creating convoluted processes\nfor the sake of process. Keeping these best practices in mind, the workflow\nbuilt by the GoMerchants Program Management team entailed Scrum Process to track\nbacklog priority, using Confluence as a documentation hub, Jira for managing\nbacklog tasks, Pre-Iteration Planning Meetings, Sprint Planning, Daily Standups,\nand lastly, conducting regular Retrospectives.\n\nThe consolidated approach helped the GoMerchants team reach the rapid pace\nneeded to hit targeting of deliverables— but also helped support the team in an\nenvironment of rapidly-changing requirements via greater transparency.\n\nThere were additional benefits to this approach, as well: Instantaneous feedback\nfrom the team on what was working (and what was not), metrics to inform future\niterations of the workflow, and a reduction in deployment failure — and rollback\ndeployment risk — thanks to rapid and continuous internal communication.\n\n> “Agile software development is an approach to software development under which\nrequirements and solutions evolve through the collaborative effort of\nself-organizing and cross-functional teams and their customer(s)/end user(s).” —\nCollier, Ken W. (2011). Agile Analytics: A Value-Driven Approach to Business\nIntelligence and Data Warehousing. Pearson Education.\nTo transform quality deployment with high pace targets, the program implemented\nfar better collaboration for a large team than previously existed.\n\nAt the same time, Jira was chosen as the one crucial tool for backlog management\nfor GoMerchants. The factors in selecting Jira were the platform functionality\nis highly-configurable to the specific requirements of a team, as well, as it\nhas the flexibility to allow for usage in a wide variety of environments and\nprocesses.\n\nScrum Activities\nBelow is the flow of scrum activity. It starts from Pre-Iteration Planning\nMeeting (Pre-IPM), Retrospective, IPM/Sprint Planning, and Daily Standup:\n\nSprints\nA Sprint is a time-box of iterations, where the releasable works that align with\nsprint goals are implemented. A Sprint always has a fixed start and end date —\nthese dates should be of the same duration; typically two weeks.\n\nSource: Essential Scrum: A Practical Guide to the Most Popular Agile Process\nSprints notes: While most of GoMerchants PDG uses two-week sprints, the length\nof time can depend on several factors like the final deadline, number of people\nin the team, and holidays in the calendar. Some teams use a one-week Sprint\ncycle due to urgent work that requires moving at an accelerated pace. But,\ngenerally it is not a best practice to use one-week sprint cycles as team\nachievement moments can be missed, quality could be sacrificed, and team\nburn-out is a real risk.\n\nPre-I.P.M. (Pre-Iteration Planning Meeting)\nPre-IPM is an activity to review the active Sprint and manage backlog and Sprint\ngoal(s) for the next iteration. Pre-IPM is attended by a Product Manager, Tech\nLeads, and Program Manager. The Product Manager should write-up the ‘story’ aka\nplan, in Jira after Pre-IPM. Tech lead should advise if the story and goals for\nthe next iteration are technically achievable.\n\nAs a Program Manager, you can use spreadsheets for mapping between the story and\nteam before doing the IPM. Below is the example:\n\nPre-IPM notes: This is basically a small meeting with a PM, TechLead, HoE/HoP\n(if necessary) and PgM. The purpose is to finalise the work backlog for the team\nin the upcoming Sprint. This meeting will help streamline the Sprint Planning\nmeeting by confirming that the final requirements have been aligned by all\nstakeholders — the goal being to reduce the number of “Requirement Changes”\ngoing forward. .\n\nRetrospective\nThe purpose of a retrospective in IPM is to collect previous sprint feedback\nfrom the team. It contains some columns like:\n\n * Glad: What makes you happy in this sprint or things that went well\n * Sad: What makes you sad in this sprint and from here we can see how we can\n   improve it\n * Mad: What makes you mad or frustrated in this sprint\n * Ideas: Idea to improve our next sprint\n * Appreciation: Appreciation in this sprint, esp if there’s a pretty big team\n   achievement\n * Action Item: Action item to improve our next sprint based on Sad, Mad, and\n   Ideas columns. This is the important part to be followed up so “lesson\n   learned” value from every sprint is really working\n\nWe can use several tools to help us collect data, i.e. https://funretro.io/,\nbelow is the example:\n\nSend a retrospective link to a Slack channel before IPM and encourage the team\nto fill the cards. Do the retrospective by talking through each column 15–30\nminutes before IPM starts.\n\nRetrospective notes: This session provides the opportunity for a team to look\nback and see how they can improve. Retrospectives can be a catalyst for\norganisational change, team change or even a culture change. The Retrospective\ncan be a place to build and enable teams, or to help teams start their journey\nwith a clear understanding of where to go next. It’s a method that is very\nuseful to gauge the Team Happiness state and gain Improvement Feedback from the\nteam. A Retrospective also builds trust and helps make the team grow stronger as\nindividual members know they have an outlet to express their feedback and they\nwill be heard by their managers and colleagues. Since this process is highly\nactionable, the PgM’s have incorporated it beyond the use case of small teams,\nand have instituted it at larger scale for the entire GoMerchants PDG Org every\n6 months.\n\nIPM/Sprint Planning\nIPM/Sprint Planning is an activity that is attended by all members of the team\nto prioritise the backlog, discuss stories, and determine story points.\n\nSource: http://www.informit.com/articles/article.aspx?p=1928232Below are the\nsteps taken in an IPM:\n\nBefore IPM:\n\n * Program Manager sends a retrospective link to a Slack channel\n\nDuring IPM:\n\n * Retrospective 15 min\n * Open Sprint Report to review active sprint (Done and Not Done)\n * Complete Sprint\n * Open velocity chart to review the commitment and complete stories from the\n   previous Sprint\n * Ask the team who will take a leave and discuss with PM about achievement\n   story (this will be helpful to adjust velocity for the next Sprint)\n * The PM explains each story for a new sprint. Make sure there’s always a DoD\n   and add story points\n * Add the Sprint Goal\n * Start Sprint\n * After IPM\n * Collect result of retrospective, make sure action items are done/started to\n   be worked on\n\nDaily Standup\nStand up Preparation:\n\n * Set a daily schedule (max 15 mins) and make sure the team is committed to\n   attend stand up\n * Remind the team to update Jira 10–30 mins before stand up\n\nDuring Stand up\n\n * Open Jira dashboard to review story update and movement.\n * Create a set of Standup Notes and copy it in the team Slack channel if\n   necessary\n * Ask these questions and record the answer to each member: What did I\n   accomplish since the last daily standup? What obstacles are impeding my\n   progress? What will I do by the next daily standup?\n * Daily Stand up notes: There are times people will forget to update Jira\n   ticket (it’s a never-ending challenge 💁). As a Program Manager, we need to\n   remind/ensure their team updates Jira (at least) right beforethe stand up\n   starts.\n\nThe Results\nWe’ll let them speak for themselves!\n\nH1 & H2 2019 resultAfter building a standard approach across teams using Agile,\nJira, and other tool sets, the Program Management approach used by the\nGoMerchants PgM team to combine these elements helped to vastly improve the\neffectiveness of team performance on 2019 period. That’s a win we’ll take. 🙌\n\nAre you liking our stories? Do you want them delivered straight to your inbox? \nSign up for our newsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>We’ve often talked about how Gojek doesn’t build one Super App, it builds three. To achieve this, multiple Product Development Groups (PDG) exist within Gojek. One of these is the GoMerchants PDG, that handles all our merchant-centric initiatives, including GoBiz, our SuperApp for merchant partners.</p><p>GoMerchants is an entity formed by the fusion of multiple teams that all had their own work styles. How do such diverse people come together and build amazing things? That’s where Program Management comes into the picture.</p><h3 id=\"the-challenge\">The Challenge</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1400/0*BOZMTMudwppvAHi6\" class=\"kg-image\"></figure><p>GoMerchants PDG was formed from five separate teams (SPOTS, Midtrans, Mapan, GoResto, Nadipos), and each team had a unique engineering culture. Across teams, the total number of staff involved in cross-functional work was ~240 people.</p><p>After a discovery phase of the process over 3 months with the various groups, we found that every team was utilising different versions of project management methodology and tools to track team progress. Across various teams, we identified nearly a dozen different types of tools and methods including the Scrum method, Kanban method, Jira tools, Favro Tools, and Trello tools.</p><p>The key takeaway was clear: There was no single source of truth for tracking team deployment progress.</p><h3 id=\"the-solution\">The Solution</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1400/0*xz0BID0wK762a3It\" class=\"kg-image\"></figure><p>To achieve our goal of reaching a high rate of (quality) deliverables with clear transparency on progress, the Program Managers decided to build a program that set a single standard workflow for everyone involved. The end result? A meld of Agile best practices and a limited/select set of tools.</p><p>At the highest level, Program Management methodology focuses on adding just<em><em> </em></em>enough processes to help with efficiency — and not creating convoluted processes for the sake of process. Keeping these best practices in mind, the workflow built by the GoMerchants Program Management team entailed Scrum Process to track backlog priority, using Confluence as a documentation hub, Jira for managing backlog tasks, Pre-Iteration Planning Meetings, Sprint Planning, Daily Standups, and lastly, conducting regular Retrospectives.</p><p>The consolidated approach helped the GoMerchants team reach the rapid pace needed to hit targeting of deliverables— but also helped support the team in an environment of rapidly-changing requirements via greater transparency.</p><p>There were additional benefits to this approach, as well: Instantaneous feedback from the team on what was working (and what was not), metrics to inform future iterations of the workflow, and a reduction in deployment failure — and rollback deployment risk — thanks to rapid and continuous internal communication.</p><blockquote><em><em>“Agile software development is an approach to software development under which requirements and solutions evolve through the collaborative effort of self-organizing and cross-functional teams and their customer(s)/end user(s).” — Collier, Ken W. (2011). Agile Analytics: A Value-Driven Approach to Business Intelligence and Data Warehousing. Pearson Education.</em></em></blockquote><p>To transform quality deployment with high pace targets, the program implemented far better collaboration for a large team than previously existed.</p><p>At the same time, Jira was chosen as the one crucial tool for backlog management for GoMerchants. The factors in selecting Jira were the platform functionality is highly-configurable to the specific requirements of a team, as well, as it has the flexibility to allow for usage in a wide variety of environments and processes.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1400/0*6BKaz05opZRwL9_K\" class=\"kg-image\"></figure><h3 id=\"scrum-activities\">Scrum Activities</h3><p>Below is the flow of scrum activity. It starts from Pre-Iteration Planning Meeting (Pre-IPM), Retrospective, IPM/Sprint Planning, and Daily Standup:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/538/0*gTaqBaLJp4SmH04h\" class=\"kg-image\"></figure><h3 id=\"sprints\">Sprints</h3><p>A Sprint is a time-box of iterations, where the releasable works that align with sprint goals are implemented. A Sprint always has a <strong><strong>fixed </strong></strong>start and end date — these dates should be of the same duration; typically two weeks.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1100/0*FW1FhCEHTQr-94pp\" class=\"kg-image\" alt=\"Source: Essential Scrum: A Practical Guide to the Most Popular Agile Process\"><figcaption><em>Source: Essential Scrum: A Practical Guide to the Most Popular Agile Process</em></figcaption></figure><p>Sprints notes: While most of GoMerchants PDG uses two-week sprints, the length of time can depend on several factors like the final deadline, number of people in the team, and holidays in the calendar. Some teams use a one-week Sprint cycle due to urgent work that requires moving at an accelerated pace. But, generally it is not a best practice to use one-week sprint cycles as team achievement moments can be missed, quality could be sacrificed, and team burn-out is a real risk.</p><h3 id=\"pre-i-p-m-pre-iteration-planning-meeting-\">Pre-I.P.M. (Pre-Iteration Planning Meeting)</h3><p>Pre-IPM is an activity to review the active Sprint and manage backlog and Sprint goal(s) for the next iteration. Pre-IPM is attended by a Product Manager, Tech Leads, and Program Manager. The Product Manager should write-up the ‘story’ aka plan, in Jira after Pre-IPM. Tech lead should advise if the story and goals for the next iteration are technically achievable.</p><p>As a Program Manager, you can use spreadsheets for mapping between the story and team before doing the IPM. Below is the example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/739/0*nScsmP0TJmMn21oF\" class=\"kg-image\"></figure><p>Pre-IPM notes: This is basically a small meeting with a PM, TechLead, HoE/HoP (if necessary) and PgM. The purpose is to finalise the work backlog for the team in the upcoming Sprint. This meeting will help streamline the Sprint Planning meeting by confirming that the final requirements have been aligned by all stakeholders — the goal being to reduce the number of “Requirement Changes” going forward. .</p><h2 id=\"retrospective\"><strong>Retrospective</strong></h2><p>The purpose of a retrospective in IPM is to collect previous sprint feedback from the team. It contains some columns like:</p><ul><li><strong><strong>Glad</strong></strong>: What makes you happy in this sprint or things that went well</li><li><strong><strong>Sad</strong></strong>: What makes you sad in this sprint and from here we can see how we can improve it</li><li><strong><strong>Mad</strong></strong>: What makes you mad or frustrated in this sprint</li><li><strong><strong>Ideas</strong></strong>: Idea to improve our next sprint</li><li><strong><strong>Appreciation</strong></strong>: Appreciation in this sprint, esp if there’s a pretty big team achievement</li><li><strong><strong>Action Item</strong></strong>: Action item to improve our next sprint based on Sad, Mad, and Ideas columns. This is the important part to be followed up so “lesson learned” value from every sprint is really working</li></ul><p>We can use several tools to help us collect data, i.e. <a href=\"https://funretro.io/\" rel=\"noopener\">https://funretro.io/</a>, below is the example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1400/0*tbPuQ0kjLePWqVsB\" class=\"kg-image\"></figure><p>Send a retrospective link to a Slack channel before IPM and encourage the team to fill the cards. Do the retrospective by talking through each column 15–30 minutes before IPM starts.</p><p>Retrospective notes: This session provides the opportunity for a team to look back and see how they can improve. Retrospectives can be a catalyst for organisational change, team change or even a culture change. The Retrospective can be a place to build and enable teams, or to help teams start their journey with a clear understanding of where to go next. It’s a method that is very useful to gauge the Team Happiness state and gain Improvement Feedback from the team. A Retrospective also builds trust and helps make the team grow stronger as individual members know they have an outlet to express their feedback and they will be heard by their managers and colleagues. Since this process is highly actionable, the PgM’s have incorporated it beyond the use case of small teams, and have instituted it at larger scale for the entire GoMerchants PDG Org every 6 months.</p><h3 id=\"ipm-sprint-planning\">IPM/Sprint Planning</h3><p>IPM/Sprint Planning is an activity that is attended by all members of the team to prioritise the backlog, discuss stories, and determine story points.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-7.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-8.png\" class=\"kg-image\"><figcaption><em>Source: </em><a href=\"http://www.informit.com/articles/article.aspx?p=1928232\" rel=\"noopener\"><em>http://www.informit.com/articles/article.aspx?p=1928232</em></a></figcaption></figure><p>Below are the steps taken in an IPM:</p><p><strong><strong>Before IPM:</strong></strong></p><ul><li>Program Manager sends a retrospective link to a Slack channel</li></ul><p><strong><strong>During IPM:</strong></strong></p><ul><li>Retrospective 15 min</li><li>Open Sprint Report to review active sprint (Done and Not Done)</li><li>Complete Sprint</li><li>Open velocity chart to review the commitment and complete stories from the previous Sprint</li><li>Ask the team who will take a leave and discuss with PM about achievement story (this will be helpful to adjust velocity for the next Sprint)</li><li>The PM explains each story for a new sprint. Make sure there’s always a DoD and add story points</li><li>Add the Sprint Goal</li><li>Start Sprint</li><li>After IPM</li><li>Collect result of retrospective, make sure action items are done/started to be worked on</li></ul><h3 id=\"daily-standup\">Daily Standup</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-9.png\" class=\"kg-image\"></figure><p><strong><strong>Stand up Preparation:</strong></strong></p><ul><li>Set a daily schedule (max 15 mins) and make sure the team is <strong><strong>committed</strong></strong> to attend stand up</li><li>Remind the team to update Jira 10–30 mins before stand up</li></ul><p><strong><strong>During Stand up</strong></strong></p><ul><li>Open Jira dashboard to review story update and movement.</li><li>Create a set of Standup Notes and copy it in the team Slack channel if necessary</li><li>Ask these questions and record the answer to each member: <em><em>What did I accomplish since the last daily standup? What obstacles are impeding my progress? What will I do by the next daily standup?</em></em></li><li>Daily Stand up notes: There are times people will forget to update Jira ticket (it’s a never-ending challenge 💁). As a Program Manager, we need to remind/ensure their team updates Jira (at least) <strong><strong>right before</strong></strong>the stand up starts.</li></ul><h3 id=\"the-results\">The Results</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-10.png\" class=\"kg-image\"></figure><p>We’ll let them speak for themselves!</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-13.png\" class=\"kg-image\"><figcaption>H1 &amp; H2 2019 result</figcaption></figure><p>After building a standard approach across teams using Agile, Jira, and other tool sets, the Program Management approach used by the GoMerchants PgM team to combine these elements helped to vastly improve the effectiveness of team performance on 2019 period. That’s a win we’ll take. 🙌</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/image-14.png\" class=\"kg-image\"></figure><p>Are you liking our stories? Do you want them delivered straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><p></p><p></p>","url":"https://gojek-ghost.zysk.in/the-process-behind-program-management/","canonical_url":null,"uuid":"6ab38ee0-3e63-446e-ab05-9f3b29c811ad","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ed9e2717aa22c4066f83fe8","reading_time":7}},{"node":{"id":"Ghost__Post__5ed7600d7aa22c4066f83fc2","title":"Global technology and payments companies invest in Gojek","slug":"global-technology-and-payments-companies-invest-in-gojek-2","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/06/FBPaypal-02.jpg","excerpt":"The investment will boost Southeast Asia’s digital economy and accelerate digital payments adoption among small businesses.","custom_excerpt":"The investment will boost Southeast Asia’s digital economy and accelerate digital payments adoption among small businesses.","visibility":"public","created_at_pretty":"03 June, 2020","published_at_pretty":"03 June, 2020","updated_at_pretty":"05 June, 2020","created_at":"2020-06-03T14:02:13.000+05:30","published_at":"2020-06-03T14:09:09.000+05:30","updated_at":"2020-06-05T15:26:28.000+05:30","meta_title":"Global technology and payments companies invest in Gojek","meta_description":"The investment will boost Southeast Asia’s digital economy and accelerate digital payments adoption among small businesses.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"News","slug":"news","description":"The latest official updates from Gojek—announcements, press releases, and news stories.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"News","slug":"news","description":"The latest official updates from Gojek—announcements, press releases, and news stories.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gojek","slug":"gojek","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Funding","slug":"funding","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Startup","slug":"startup","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Gojek announced today that Facebook and PayPal have joined Google, Tencent and\nothers as investors in its current fundraise. This new investment will support\nGojek’s mission to boost Southeast Asia’s digital economy, with a focus on\nsupporting payments and financial services in the region.\n\nWith digital payments adoption primed to accelerate exponentially, the resources\nfrom some of the world’s leading global tech businesses will be combined with\nthe local focus and technology of Gojek.\n\nThis benefits millions of businesses and people across Indonesia and other parts\nof Southeast Asia.\n\nGojek’s payments business, GoPay, has long been focused on increasing access to\nthe digital economy among micro, small and medium enterprises (MSMEs), the\nmajority of which continue to rely on cash to operate, due to the region’s large\nunbanked population. The latest influx of funding will support more of these\nbusinesses as they seek to digitise further, from micro-merchants selling wares\non the street side, up to large businesses looking to strengthen their digital\npayment infrastructure.\n\nSince launching its app in 2015, Gojek has digitised hundreds of thousands of\nmerchants on its platform, providing them with access to more than 170 million\nusers across Southeast Asia. Its payments business processes billions of\ntransactions each year and owns the largest e-wallet in Indonesia. A large part\nof this is driven by GoFood, the largest food delivery service in Indonesia, as\nwell as the expansion of GoPay into other sectors both within and outside the\nGojek ecosystem.\n\nGojek Co-CEO, Andre Soelistyo, said:\n\n> This is great validation that the world’s most innovative tech companies\nrecognise the positive impact Gojek is making in Indonesia and the whole of\nSoutheast Asia. By working together, we have the opportunity to achieve\nsomething truly unique as we aim to help more businesses to digitise and ensure\nthat many millions more consumers are enjoying the benefits that the digital\neconomy can bring.\n> The COVID-19 pandemic and its associated issues have served as a tough reminder\nthat if our economies are to be more resilient, they must be underpinned by\ndigital infrastructure that diversifies the ways in which people can live and\ntransact. We see our role as a convener of global tech expertise, facilitating\ncollaboration that will ultimately lead to a better future for everyone in our\nregion.\nGojek Co-CEO, Kevin Aluwi, added:\n\n> Since we were founded, the story of Gojek’s growth has been inexorably linked\nwith the growth of the micro-entrepreneurs and small businesses on our platform\nand this will always be the case. With some of the world’s best technology\ncompanies as partners, we are confident that we can continue to deliver unique\nworld-class products and services for the various players in our ecosystem.\nFacebook’s investment is the first it has made in an Indonesia-based business as\nit seeks to create new opportunities for businesses in the country, including\nthrough its ubiquitous Whatsapp service.\n\nMatt Idema, Chief Operating Officer at WhatsApp, said: “Gojek, WhatsApp and\nFacebook are indispensable services in Indonesia. Working together we can help\nbring millions of small businesses and the customers they serve into the largest\ndigital economy in Southeast Asia.”\n\nAs part of its commercial agreement, PayPal’s payment capabilities will be\nintegrated into Gojek’s services and the two companies will also collaborate to\nallow customers of GoPay, Gojek’s digital wallet, to gain access to PayPal’s\nnetwork of more than 25 million merchants around the world.\n\nFarhad Maleki, Head of Corporate Development and Ventures for APAC at PayPal,\nsaid: “Southeast Asia is at an inflection point in digital adoption that creates\nnew opportunities to deliver financial services to previously unbanked merchants\nand consumers. We could not be more excited about entering into this strategic\nrelationship with Gojek to expand access and provide new experiences for our\ncollective customers in this dynamic market and around the world.”\n\nGoogle and Tencent are longstanding investors in Gojek. Both companies have\ncollaborated on multiple Gojek projects since their first investments in 2018.\n\nCaesar Sengupta, VP, Payments and Next Billion Users, Google, said: “Gojek’s\ninnovation and technologies have had an incredible impact in making life more\nconvenient for Indonesians across the country and in bringing its MSMEs online.\nWe’re pleased to continue to invest in and enable Gojek in its journey. Gojek’s\nsuccess points to the strength of the region’s internet economy and the\ninnovation in its start-up ecosystem.”\n\nJeffrey Li, Vice President of Tencent Holdings and Managing Partner of Tencent\nInvestment, said, “Gojek is effectively promoting digitization and financially\nenabling small businesses. We’re glad to strengthen our partnership through the\nincreased investment and we look forward to further collaboration with Gojek.”\n\nAbout Gojek Group\nGojek is Southeast Asia’s leading technology group and a pioneer of the\nintegrated Super App and ecosystem model. Gojek is founded on the principle of\nusing technology to remove life’s daily frictions by connecting consumers to the\nbest providers of goods and services in the market.\n\nThe company was first established in 2010 focusing on courier and motorcycle\nride-hailing services, before launching the app in January 2015 in Indonesia.\nSince then, Gojek has grown to become the leading Super App in Southeast Asia,\nproviding access to a wide range of services from transportation and digital\npayments, to food delivery, logistics, and many other on-demand services.\n\nGojek now operates across 207 cities in five Southeast Asian countries. As of\nend 2019, Gojek’s application and its ecosystem have been downloaded 170 million\ntimes by Gojek’s users across Southeast Asia. Based on the App Annie ‘2020 State\nof Mobile Report’, Gojek has become the most widely used on-demand application\nby Indonesians in 2019.\n\nAs a Super App, Gojek is dedicated to solving daily challenges faced by\nconsumers while also improving the quality of life for millions of people\nthroughout Southeast Asia, especially those in the informal sector and micro,\nsmall, and medium enterprises (MSMEs).\n\nThe Gojek app is available for iOS and Android.\n\nFor media queries, contact apoorva.babu@gojek.com.\n\nRead more stories on Gojek’s Engineering, Design, Product and Culture here\n[https://blog.gojekengineering.com/].","html":"<p>Gojek announced today that Facebook and PayPal have joined Google, Tencent and others as investors in its current fundraise. This new investment will support Gojek’s mission to boost Southeast Asia’s digital economy, with a focus on supporting payments and financial services in the region.</p><p>With digital payments adoption primed to accelerate exponentially, the resources from some of the world’s leading global tech businesses will be combined with the local focus and technology of Gojek.</p><p><strong>This benefits millions of businesses and people across Indonesia and other parts of Southeast Asia.</strong></p><p>Gojek’s payments business, GoPay, has long been focused on increasing access to the digital economy among micro, small and medium enterprises (MSMEs), the majority of which continue to rely on cash to operate, due to the region’s large unbanked population. The latest influx of funding will support more of these businesses as they seek to digitise further, from micro-merchants selling wares on the street side, up to large businesses looking to strengthen their digital payment infrastructure.</p><p>Since launching its app in 2015, Gojek has digitised hundreds of thousands of merchants on its platform, providing them with access to more than 170 million users across Southeast Asia. Its payments business processes billions of transactions each year and owns the largest e-wallet in Indonesia. A large part of this is driven by GoFood, the largest food delivery service in Indonesia, as well as the expansion of GoPay into other sectors both within and outside the Gojek ecosystem.</p><p><strong><strong>Gojek Co-CEO, Andre Soelistyo</strong></strong>, said:</p><blockquote><em><em>This is great validation that the world’s most innovative tech companies recognise the positive impact Gojek is making in Indonesia and the whole of Southeast Asia. By working together, we have the opportunity to achieve something truly unique as we aim to help more businesses to digitise and ensure that many millions more consumers are enjoying the benefits that the digital economy can bring.</em></em></blockquote><blockquote><em><em>The COVID-19 pandemic and its associated issues have served as a tough reminder that if our economies are to be more resilient, they must be underpinned by digital infrastructure that diversifies the ways in which people can live and transact. We see our role as a convener of global tech expertise, facilitating collaboration that will ultimately lead to a better future for everyone in our region.</em></em></blockquote><p><strong><strong>Gojek Co-CEO, Kevin Aluwi</strong></strong>, added:</p><blockquote><em><em>Since we were founded, the story of Gojek’s growth has been inexorably linked with the growth of the micro-entrepreneurs and small businesses on our platform and this will always be the case. With some of the world’s best technology companies as partners, we are confident that we can continue to deliver unique world-class products and services for the various players in our ecosystem.</em></em></blockquote><p>Facebook’s investment is the first it has made in an Indonesia-based business as it seeks to create new opportunities for businesses in the country, including through its ubiquitous Whatsapp service.</p><p><strong><strong>Matt Idema, Chief Operating Officer at WhatsApp</strong></strong>, said: “Gojek, WhatsApp and Facebook are indispensable services in Indonesia. Working together we can help bring millions of small businesses and the customers they serve into the largest digital economy in Southeast Asia.”</p><p>As part of its commercial agreement, PayPal’s payment capabilities will be integrated into Gojek’s services and the two companies will also collaborate to allow customers of GoPay, Gojek’s digital wallet, to gain access to PayPal’s network of more than 25 million merchants around the world.</p><p><strong><strong>Farhad Maleki, Head of Corporate Development and Ventures for APAC at PayPal</strong></strong>, said: “Southeast Asia is at an inflection point in digital adoption that creates new opportunities to deliver financial services to previously unbanked merchants and consumers. We could not be more excited about entering into this strategic relationship with Gojek to expand access and provide new experiences for our collective customers in this dynamic market and around the world.”</p><p>Google and Tencent are longstanding investors in Gojek. Both companies have collaborated on multiple Gojek projects since their first investments in 2018.</p><p><strong><strong>Caesar Sengupta, VP, Payments and Next Billion Users, Google</strong></strong>, said: “Gojek’s innovation and technologies have had an incredible impact in making life more convenient for Indonesians across the country and in bringing its MSMEs online. We’re pleased to continue to invest in and enable Gojek in its journey. Gojek’s success points to the strength of the region’s internet economy and the innovation in its start-up ecosystem.”</p><p><strong><strong>Jeffrey Li, Vice President of Tencent Holdings and Managing Partner of Tencent Investment</strong></strong>, said, “Gojek is effectively promoting digitization and financially enabling small businesses. We’re glad to strengthen our partnership through the increased investment and we look forward to further collaboration with Gojek.”</p><h3 id=\"about-gojek-group\">About Gojek Group</h3><p>Gojek is Southeast Asia’s leading technology group and a pioneer of the integrated Super App and ecosystem model. Gojek is founded on the principle of using technology to remove life’s daily frictions by connecting consumers to the best providers of goods and services in the market.</p><p>The company was first established in 2010 focusing on courier and motorcycle ride-hailing services, before launching the app in January 2015 in Indonesia. Since then, Gojek has grown to become the leading Super App in Southeast Asia, providing access to a wide range of services from transportation and digital payments, to food delivery, logistics, and many other on-demand services.</p><p>Gojek now operates across 207 cities in five Southeast Asian countries. As of end 2019, Gojek’s application and its ecosystem have been downloaded 170 million times by Gojek’s users across Southeast Asia. Based on the App Annie ‘2020 State of Mobile Report’, Gojek has become the most widely used on-demand application by Indonesians in 2019.</p><p>As a <strong><strong>Super App</strong></strong>, Gojek is dedicated to solving daily challenges faced by consumers while also improving the quality of life for millions of people throughout Southeast Asia, especially those in the informal sector and micro, small, and medium enterprises (MSMEs).</p><p>The Gojek app is available for iOS and Android.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/Blog-Separator.png\" class=\"kg-image\"></figure><p><strong><strong>For media queries, contact apoorva.babu@gojek.com.</strong></strong></p><p>Read more stories on Gojek’s Engineering, Design, Product and Culture <a href=\"https://blog.gojekengineering.com/\" rel=\"noopener\">here</a>.</p>","url":"https://gojek-ghost.zysk.in/global-technology-and-payments-companies-invest-in-gojek-2/","canonical_url":null,"uuid":"13b59881-8e93-449a-8b95-223c6821eabf","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ed7600d7aa22c4066f83fc2","reading_time":4}},{"node":{"id":"Ghost__Post__5ec94e8c7aa22c4066f83db2","title":"Tips for Building Smooth Live Tracking","slug":"tips-for-building-smooth-live-tracking","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking-1.jpeg","excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","custom_excerpt":"How did we manage to build accurate tracking and smooth animations in our app? Here are your answers.","visibility":"public","created_at_pretty":"23 May, 2020","published_at_pretty":"22 May, 2020","updated_at_pretty":"02 June, 2020","created_at":"2020-05-23T21:55:48.000+05:30","published_at":"2020-05-22T09:00:00.000+05:30","updated_at":"2020-06-02T12:26:00.000+05:30","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Divya Vikash\n\nIt’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s\ntransport products) to go to your office. Voila!! You got a driver. That was\nfast. You can see your driver’s location on the map, and the estimated time they\nwould take to come to you.\n\nBut hang on… It seems like the map is a bit messed up.\n\nThe driver location on the map goes back and forth at unreal speed, and even\nflies over buildings. Starring in an action movie is not exactly how you want to\nstart your week. 😮\n\nWhile our driver-partners sure are superman in their own unique way, they\ncertainly can’t drive over buildings. This is clearly not how your driver is\nactually driving on the road. But then why is the map showing all this?\n\nWell, there are multiple factors that can lead to a bad experience like that.\nSome within our control, some not so much (as of now). We decided to go back to\nthe drawing board and figure out the issues that are in our control and fix them\nfor good. And that is how we built a world-class (arguably 😬) live-tracking\nexperience.\n\nBut what is live-tracking, you would ask?\n\nLive tracking is a complete map experience. It doesn’t involve anything other\nthan what you see on maps after you get a driver.\n\nSo, what do you see on maps?\n\n 1. Driver's location depicted by a green marker.\n 2. The routes.\n 3. The change in driver marker as the driver moves closer to your pickup/your\n    destination.\n 4. The change in route as the driver moves.\n\nAnd that’s it. That’s all live-tracking is.\n\n> But that sounds quite simple. Right? Use some routing APIs and plot the markers\nand routes.\nWell, yes, it sounded easy to us when we first heard about it too. The real\nexperience threw us a few curveballs. Let’s go through how we create a\nlive-tracking experience.\n\nInput\nLet’s look at the input data that we need to create a live-tracking animation:\n\nDriver Location and Routes\nOur driver apps have an in-built mechanism to upload driver location to our\nbackend at regular intervals. This is how we are able to find a driver close to\nyour location when you order one of our services. The primary input to\nlive-tracking is this driver location.\n\nIn our driver app, we get this location using Android’s FusedLocationProvider \nAPI which automatically uses the best location provider(GPS, Wifi, etc). The\ndriver location is ingested into our backend system via a continuous stream.\nRoutes are generated by our internal routing engine and provided to the customer\napp.\n\nInput Source\nAs you would have guessed, this data is provided via API calls initiated by the\nour Super App to the routing engine.\n\nMaking the API call just once won’t be sufficient. Right? The app needs to be\ninformed every time the driver’s location has changed. So, the customer app\npolls this API every few seconds to get this data.\n\nNow, we have a continuous stream of data flowing to our app which has all the\ninformation that we need to show the vehicle animation on the road.\n\nTerminology\nBefore moving forward, we should get acquainted with a few terminologies that we\nwould use quite frequently in this post.\n\n 1. Route: The entire list of latitude-longitudes between the driver location to\n    the pickup/destination location.\n 2. Segment: A segment is the smallest unit of a route. It is a straight line\n    from one position in the routes list to the very next position in the routes\n    list.\n\nA route of length n has n-1 segments. Confused? Yeah, let’s take an example.\n\nA Route looks like this:\n\n[{-62441198, 106.8032959},\n{-6.2440766, 106.80328}, \n{-6.2439977, 106.8033275},\n{-6.2434893, 106.8029214},\n{-6.2433926, 106.8030539},\n{-6.2436018, 106.803222}]\n\nThere are 5 Segments in this route.\n\nSegment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}\nSegment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}\nSegment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}\nSegment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}\nSegment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}\n\nThe initial setup\nWhen the user lands on the live tracking screen, the app immediately makes a\ncall to our internal API to get the driver location and route. Once we get this\ndata, we plot it on the map using the standard GoogleMap methods. \ngoogleMap.addMarker(), googleMap.addPolyline() etc.\n\nSometimes, we don’t have the routing information available immediately, so we\njust show the driver marker. We also store this data locally in an in-memory\ncache as we would need it later to do some comparisons.\n\nSo, the customer is able to see the markers and routes on the map now. So far so\ngood.\n\nThe subsequent updates\nAs I mentioned earlier, we need to change the position of driver marker and\nroute as the driver moves. The customer app makes a call to the same internal\nAPI every few seconds. After the first response, we don’t move any markers or\nroutes on the map until the next response succeeds.\n\nIn the next response, we again get the same data points i.e the route and driver\nlocation but with different values, of course, if the driver has moved. The next\nset of data that we get can have the following characteristics:\n\n 1. Route and driver location don’t change\n 2. Route changes\n 3. Route doesn’t change BUT driver location does\n\nLet’s discuss these cases one by one.\n\n1: Route and driver location don’t change\nIf nothing has changed, we don’t need to do anything. Probably our driver\npartner is stuck in traffic. 😞\n\n2: Route changes\nThis can happen either when:\n\n 1. The app was not showing any route to the user before i.e the first response\n    didn’t have the route.\n 2. The app was showing a route that is different from the newly received route.\n    This usually happens in cases where the driver starts following a different\n    route from the one they were following before. This can also happen due to\n    road closures or simply because our driver-partner initially followed a\n    wrong route by mistake 😅.\n\nIn either of these cases, we simply ignore the old driver marker and routes\nwhich were shown and plot the new marker and routes.\n\n3: Route doesn’t change BUT driver location does\nThe app was showing the same route to the user before i.e the old response had\nthe same route as the new response. This means that the driver is following the\noriginal route that we determined.\n\nIn this case, we need to animate the driver marker on the map from the old\nlocation to the new location along the same route. This is the most common\nscenario, which can again be broken down further into multiple scenarios (yeah,\nI’m all about breaking things down 🤐).\n\n3.1: Does the new location lie on the route?\nTo animate the driver marker from it’s current position to the new location, we\nfirst need to know whether the new location lies on the route or not.\n\nYeah, we can’t be sure that the driver location that we have received would\nalways lie on the route/road because of various GPS inaccuracy issues.\n\nWe iterate through every segment in the route to find the segment which has the\nnew location. For every segment, we use the Geometry/PolyUtil library to\ndetermine whether the driver location lies on that route.\n\nWe also specify a tolerance of a few meters to account for GPS inaccuracy. So,\nif the newly received location is within a radius of X meters near a segment,\nthis method will return true.\n\nAndroid\n\nboolean isLocationOnPath(LatLng point,List<LatLng> polyline,boolean geodesic,\ndouble tolerance)\n\niOS\n\nBOOL GMSGeometryIsLocationOnPathToleranc\n[https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d]\ne(CLLocationCoordinate2D point,GMSPath\n[https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path] \n* path,BOOL geodesic,CLLocationDistance tolerance)\n\nIf the location doesn’t lie on any of the segments in the route, we are sad and\nso, we don’t animate anything. But if it does, we go forward with the next step\nwhich is….\n\n3.2: Vehicle projection on route\nWhen we receive a new location, the start location is simply the position that\nthe driver marker is already at. No logic required there to calculate that.\n\nThe end location should simply be the new location that we received. Well, in an\nideal world, it should be but we live so far away from an ideal world 😞.\n\nAs we mentioned earlier, the raw driver location that we get from the driver app\nvia GPS/other providers mostly doesn’t lie on the road. So, we have to find a\nprojection of the driver location on the road/route.\n\nIf you have been reading carefully, you might wonder why we can’t just use the \nisLocationOnPath() method above 🤔.\n\nWell, if you had been reading more carefully, you might have noticed that this\nmethod returns a boolean explaining whether the location is on/near the route or\nnot 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps\nUtils stumbled upon this by chance, please add that method, good sir).\n\nSo, we had to revise some maths. Yeah, folks, learn your maths well. You never\nknow when a situation like this might arise 🤷‍♂.\n\n“Find the projection of point (x,y) on the line y = mx + c”. Does that ring a\nbell? Drawing a perpendicular line towards the segment and calculating the\nlocation of where the line and route intersect can give us the projected\nlocation. Right?\n\nWell, the above approach works for 2-D systems but earth is not a 2-D space. We\nneed a way to project the spherical surface of the earth onto a rectangle 2-D\nspace. There are several ways to do that. All of them have certain drawbacks. We\nmight lose information like direction or the shape of landmasses/countries or\nthe area information.\n\nMercator Projection\n\nMercator projection is one of the available methods to project the spherical map\nof earth onto a rectangle to make usable maps. Most of the mapping tools used\nfor navigation use this projection.\n\nThe key feature of Mercator projection is that it retains the direction\ninformation. That means if point A is 30deg east from north of point B on the\nglobe, it will be in the same direction on its Mercator projection. Or say there\nis a turn of 90deg in some lane, it will be 90deg on Mercator projection as\nwell. That is the reason it works really well for navigation purposes.\n\nHow to use a Mercator projection?\n\n 1. Every point on the earth is projected on a cylinder exactly like point A\n    which has point A’ on the cylinder.\n 2. Once all the required points/routes are projected on this cylinder. It is\n    unrolled, and we obtain a rectangle like the one shown above.\n 3. All the planar geometry can be applied with a very little margin of error on\n    this 2D projected map.\n 4. After processing all the points/routes they can be converted back to\n    latitude and longitude on the globe.\n\nSo, now we have the projected driver location on the route which we will fondly\ncall snapped point going forward.\n\n3.3: End-to-End animation\nThe new driver location that we receive can be present in any segment. It may be\nthat it is in the same segment or it may be that it is on the next segment or on\nthe next one or it may be that it is on the last segment.\n\nBut for linear animation, we need a start point and an end point. The start\npoint is the current position of the driver marker. We already got the snapped\nendpoint in the earlier section. But we can’t just animate from start to end at\nonce as that would seem like the car is flying and ignoring U-turns, routes,\netc. So, how do we prevent it from flying?\n\nWhat do you do when you can’t fly to a place? You follow the road. Right? That’s\nwhat we have to do as well. Make the driver marker follow the route/road. We\nneed to animate along each segment in the route until we reach the segment which\nhas the driver position that we received.\n\nThere are again two cases here 😜:\n\n3.3.1: The new driver location is on the same segment\nIn this case, we can directly animate from the current position of driver marker\nto the driver location that we received since this is just a straight line\nanimation.\n\nA segment is always a straight line. We will discuss more on how to do the\nanimation b/w 2 points in a later section.\n\n3.3.2: The new driver location is on a different segment\nIn this case, we need to animate to that segment along the route. We have to\nanimate along each of the segments in between to reach the final segment.\n\nFor animation along the first segment, we set the endpoint of the animation to\nthe beginning of the next segment in the route. We animate to the end of the\nfirst segment.\n\nThe next segment may also not have the driver location that we received. After a\ndriver has traversed the first segment, we move the end location of the\nanimation to the end of the next segment, and so on and so forth till we reach\nthe last segment. Confusing, ya? Let’s see an example.\n\nSo much zig-zag (huh!!)The car icon(A) represents the location in the segment\nwhere the driver marker currently is. The red pin(X) represents the new snapped\nlocation received.\n\nIn the 1st animation, we move the driver marker from A to the end of the first\nsegment (B).\n\nIn the 2nd animation, the driver marker is moved through the entire length of\nthe 2nd segment.\n\nAnd so on and so forth till we reach the segment which has the newly received\nsnapped location (X).\n\nAnimation in a segment\nWe now know how the overall animation would look like. But we also need to\nconfigure how the smallest unit of the animation i.e animation in a segment\nshould happen.\n\nStart point and End point: For case #1 above, the animation in a segment will\nhappen just once. For case #2 above, this animation in a segment will happen\nmultiple times. Start and endpoints will be determined before beginning each of\nthe animations.\n\nBearing b/w these two points: Bearing can be calculated using another one of\nGeometry/Maps Utils method.\n\nSphericalUtil.computeHeading(startPosition, endPosition)\n\nDuration of animation: Calculating duration is a bit tricky. And the duration is\nthe most important thing in any animation. Sometimes the difference b/w a smooth\nand a choppy animation is caused by the duration. It was very important that we\ngot it right. So, let’s take a break and see how to calculate the duration.\n\nWhat is Duration?\nIt’s the amount of time for which the animation should happen. But you already\nknow that. Going back to middle school maths (yeah, that far), how do you\ncalculate time? Time is nothing but distance divided by speed. Correct?\nCalculating straight line distance b/w the two points we want to animate through\nis pretty easy.\n\nSphericalUtil.computeDistanceBetween(startLocation, endLocation)\n\nCool, cool. But what about speed? How should we calculate speed?\n\nSpeed calculation\nFusedLocationProvider API in the driver app does provide the speed of the\nvehicle but it’s highly unreliable. So, we have to employ some tricks to\ncalculate the speed.\n\nSpeed is distance divided by time. Distance again!! Seems like we are running in\ncircles 😵. Not exactly. Here the distance is not the straight line distance b/w\nthe two points that we have to animate through.\n\nThis is the total distance along the route from the segment that the old driver\nlocation is currently located at, to the segment where the new driver location\nis. Yeah, that statement is a bit confusing. So, let’s take an example.\n\nThe car icon(A) represents the location in the segment where the driver marker\ncurrently is. The red pin(X) represents the new snapped location received. To\ncalculate the distance, we do the obvious:\n\nTotal distance = d1 + d2 + d3 + d4\n\nNow, we have the distance. We need the time interval.\n\nThe FusedLocationProvider API in the driver app does provide us the timestamp at\nwhich a location was updated. And this information is passed to our backend and\nsubsequently to the customer app.\n\nWe calculate the time difference b/w the old driver location and the new driver\nlocation using their timestamps. Wait, how do we know the old driver location?\nAs we had mentioned earlier, we cache the last available driver location and\nroute in an in-memory cache.\n\nTotal route distance divided by time and now we have the speed for the entire\nduration. Linear distance divided by this speed and now we have the durationfor\na single animation in a segment. Cool, so let’s get back to the point where we\nbroke off 😅.\n\nUpdate the animation\nWith all the above information, we start the animation. But wait? Aren’t we\nmissing something? We did start an animation b/w two points but how will our\nanimator know how to animate?\n\nAnimation is just a bunch of frame updates that happen every fast. How do we\nupdate the marker position, the starting point of the route, the rotation in\neach and every frame of the animation? Well, the mobile/web framework allows us\nto do something every time the frame is updated.\n\nBut what is this something that we should do?\n\n1. Update marker’s position\nFor markers, we need to update their position. Once we have the position, we can\nsimply update the marker position using the marker.setPosition(). To find the\nposition during each frame of the animation, we need the percentage of animation\nthat has elapsed.\n\nWe can get the percentage from the Animation framework. Using this percentage\nand the start and end position, we calculate the intermediate position/s like\nthis:\n\nSphericalUtil.interpolate(startPosition, endPosition, fraction)\n\n2. Update Routes\nRoutes need to be aligned with the marker’s movement. So, we update the routes\nas well using the values above and updating the polyline points of that route\nusing the polyline.setPoints().\n\nAnd that’s a wrap. The result that we get is a very smooth, measured movement of\nthe vehicle along the road.\n\nThere are a few more tips/tricks that we employ to ensure that there are no\nabrupt changes in the animation.\n\nBut that’s for next time. 😃\n\nWhat’s next?\nWe still need to go a long way to meet the standards that we have set for\nourselves. Currently, this new experience is only rolled out to GoRide, GoCar,\nand GoBluebird. We are working on bringing the same experience to other services\nlike GoFood, GoSend, and GoShop. Stay tuned for more!\n\nWant stories like this one beamed straight to your inbox? Sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\nThanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij\nChoudhary.","html":"<p><em><strong>By Divya Vikash</strong></em></p><p>It’s a nice Monday morning and you just ordered a GoRide (one of Gojek’s transport products) to go to your office. Voila!! You got a driver. That was fast. You can see your driver’s location on the map, and the estimated time they would take to come to you.</p><p><em><em>But hang on… It seems like the map is a bit messed up.</em></em></p><p>The driver location on the map goes back and forth at unreal speed, and even flies over buildings. Starring in an action movie is not exactly how you want to start your week. 😮</p><p>While our driver-partners sure are superman in their own unique way, they certainly can’t drive over buildings. This is clearly not how your driver is actually driving on the road. But then why is the map showing all this?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/LiveTracking2.gif\" class=\"kg-image\"></figure><p>Well, there are multiple factors that can lead to a bad experience like that. Some within our control, some not so much (as of now). We decided to go back to the drawing board and figure out the issues that are in our control and fix them for good. And that is how we built a world-class (arguably 😬) live-tracking experience.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image.png\" class=\"kg-image\"></figure><p>But what is live-tracking, you would ask?</p><p>Live tracking is a complete map experience. It doesn’t involve anything other than what you see on maps after you get a driver.</p><p>So, what do you see on maps?</p><ol><li>Driver's location depicted by a green marker.</li><li>The routes.</li><li>The change in driver marker as the driver moves closer to your pickup/your destination.</li><li>The change in route as the driver moves.</li></ol><p>And that’s it. That’s all live-tracking is.</p><blockquote><em><em>But that sounds quite simple. Right? Use some routing APIs and plot the markers and routes.</em></em></blockquote><p>Well, yes, it sounded easy to us when we first heard about it too. The real experience threw us a few curveballs. Let’s go through how we create a live-tracking experience.</p><h3 id=\"input\">Input</h3><p>Let’s look at the input data that we need to create a live-tracking animation:</p><h3 id=\"driver-location-and-routes\">Driver Location and Routes</h3><p>Our driver apps have an in-built mechanism to upload driver location to our backend at regular intervals. This is how we are able to find a driver close to your location when you order one of our services. The primary input to live-tracking is this driver location.</p><p>In our driver app, we get this location using Android’s <code>FusedLocationProvider</code> API which automatically uses the best location provider(GPS, Wifi, etc). The driver location is ingested into our backend system via a continuous stream. Routes are generated by our internal routing engine and provided to the customer app.</p><h3 id=\"input-source\">Input Source</h3><p>As you would have guessed, this data is provided via API calls initiated by the our Super App to the routing engine.</p><p>Making the API call just once won’t be sufficient. Right? The app needs to be informed every time the driver’s location has changed. So, the customer app polls this API every few seconds to get this data.</p><p>Now, we have a continuous stream of data flowing to our app which has all the information that we need to show the vehicle animation on the road.</p><h3 id=\"terminology\">Terminology</h3><p>Before moving forward, we should get acquainted with a few terminologies that we would use quite frequently in this post.</p><ol><li><strong><strong>Route</strong></strong>: The entire list of latitude-longitudes between the driver location to the pickup/destination location.</li><li><strong><strong>Segment</strong></strong>: A segment is the smallest unit of a route. It is a straight line from one position in the routes list to the very next position in the routes list.</li></ol><p>A route of length n has n-1 segments. Confused? Yeah, let’s take an example.</p><p>A <strong><strong>Route</strong></strong> looks like this:</p><p>[{-6<code>2441198, 106.8032959},<br>{-6.2440766, 106.80328}, <br>{-6.2439977, 106.8033275},<br>{-6.2434893, 106.8029214},<br>{-6.2433926, 106.8030539},<br>{-6.2436018, 106.803222}]</code></p><p>There are 5 <strong><strong>Segments</strong></strong> in this route.</p><p><code>Segment 1: {-6.2441198, 106.8032959,-6.2440766, 106.80328}</code><br><code>Segment 2: {-6.2440766, 106.80328,-6.2439977, 106.8033275}</code><br><code>Segment 3: {-6.2439977, 106.8033275,-6.2434893, 106.8029214}</code><br><code>Segment 4: {-6.2434893, 106.8029214,-6.2433926, 106.8030539}</code><br><code>Segment 5: {-6.2433926, 106.8030539,-6.2436018, 106.8032224}</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-1.png\" class=\"kg-image\"></figure><h3 id=\"the-initial-setup\">The initial setup</h3><p>When the user lands on the live tracking screen, the app immediately makes a call to our internal API to get the driver location and route. Once we get this data, we plot it on the map using the standard GoogleMap methods. <code><em><em>googleMap.addMarker()</em></em></code><em><em>, </em></em><code><em><em>googleMap.addPolyline()</em></em></code> etc.</p><p>Sometimes, we don’t have the routing information available immediately, so we just show the driver marker. We also store this data locally in an in-memory cache as we would need it later to do some comparisons.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/436/1*k9IpgQ4ss-bhKHBY5ETUgg.gif\" class=\"kg-image\"></figure><p>So, the customer is able to see the markers and routes on the map now. So far so good.</p><h3 id=\"the-subsequent-updates\">The subsequent updates</h3><p>As I mentioned earlier, we need to change the position of driver marker and route as the driver moves. The customer app makes a call to the same internal API every few seconds. After the first response, we don’t move any markers or routes on the map until the next response succeeds.</p><p>In the next response, we again get the same data points i.e the route and driver location but with different values, of course, <strong><strong>if the driver has moved</strong></strong>. The next set of data that we get can have the following characteristics:</p><ol><li>Route and driver location don’t change</li><li>Route changes</li><li>Route doesn’t change BUT driver location does</li></ol><p>Let’s discuss these cases one by one.</p><h3 id=\"1-route-and-driver-location-don-t-change\">1: Route and driver location don’t change</h3><p>If nothing has changed, we don’t need to do anything. Probably our driver partner is stuck in traffic. 😞</p><h3 id=\"2-route-changes\">2: Route changes</h3><p>This can happen either when:</p><ol><li>The app was not showing any route to the user before i.e the first response didn’t have the route.</li><li>The app was showing a route that is different from the newly received route. This usually happens in cases where the driver starts following a different route from the one they were following before. This can also happen due to road closures or simply because our driver-partner initially followed a wrong route by mistake 😅.</li></ol><p>In either of these cases, we simply ignore the old driver marker and routes which were shown and plot the new marker and routes.</p><h3 id=\"3-route-doesn-t-change-but-driver-location-does\">3: Route doesn’t change BUT driver location does</h3><p>The app was showing the same route to the user before i.e the old response had the same route as the new response. This means that the driver is following the original route that we determined.</p><p>In this case, we need to animate the driver marker on the map from the old location to the new location along the same route. This is the most common scenario, which can again be broken down further into multiple scenarios (yeah, I’m all about breaking things down 🤐).</p><h3 id=\"3-1-does-the-new-location-lie-on-the-route\">3.1: Does the new location lie on the route?</h3><p>To animate the driver marker from it’s current position to the new location, we first need to know whether the new location lies on the route or not.</p><p>Yeah, we can’t be sure that the driver location that we have received would always lie on the route/road because of various GPS inaccuracy issues.</p><p>We iterate through every segment in the route to find the segment which has the new location. For every segment, we use the Geometry/PolyUtil library to determine whether the driver location lies on that route.</p><p>We also specify a tolerance of a few meters to account for GPS inaccuracy. So, if the newly received location is within a radius of <strong><strong>X meters</strong></strong> near a segment, this method will return true.</p><p><strong><strong>Android</strong></strong></p><p><code>boolean isLocationOnPath(LatLng point,List&lt;LatLng&gt; polyline,boolean geodesic, double tolerance)</code></p><p><strong><strong>iOS</strong></strong></p><p><code>BOOL <a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/group___geometry_utils#ga580ba381b9d4fbc0ff430cf69e06e66d\" rel=\"noopener\">GMSGeometryIsLocationOnPathToleranc</a>e(CLLocationCoordinate2D point,<a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_path\" rel=\"noopener\">GMSPath</a> * path,BOOL geodesic,CLLocationDistance tolerance)</code></p><p>If the location doesn’t lie on any of the segments in the route, we are sad and so, we don’t animate anything. But if it does, we go forward with the next step which is….</p><h3 id=\"3-2-vehicle-projection-on-route\">3.2: Vehicle projection on route</h3><p>When we receive a new location, the start location is simply the position that the driver marker is already at. No logic required there to calculate that.</p><p>The end location should simply be the new location that we received. Well, in an ideal world, it <strong><strong>should be</strong></strong> but we live so far away from an ideal world 😞.</p><p>As we mentioned earlier, the raw driver location that we get from the driver app via GPS/other providers mostly doesn’t lie on the road. So, we have to find a projection of the driver location on the road/route.</p><p>If you have been reading carefully, you might wonder why we can’t just use the <em><em>isLocationOnPath()</em></em> method above 🤔.</p><p>Well, if you had been reading <em><em>more</em></em> carefully, you might have noticed that this method returns a boolean explaining whether the location is on/near the route or not 🤦‍♂. It doesn’t return the projected location. (Ohh..if someone from Maps Utils stumbled upon this by chance, please add that method, good sir).</p><p>So, we had to revise some maths. Yeah, folks, learn your maths well. You never know when a situation like this might arise 🤷‍♂.</p><p><em><em>“Find the projection of point (x,y) on the line y = mx + c”.</em></em> Does that ring a bell? Drawing a perpendicular line towards the segment and calculating the location of where the line and route intersect can give us the projected location. Right?</p><p>Well, the above approach works for 2-D systems but earth is not a 2-D space. We need a way to project the spherical surface of the earth onto a rectangle 2-D space. There are several ways to do that. All of them have certain drawbacks. We might lose information like direction or the shape of landmasses/countries or the area information.</p><p><strong><strong>Mercator Projection</strong></strong></p><p>Mercator projection is one of the available methods to project the spherical map of earth onto a rectangle to make usable maps. Most of the mapping tools used for navigation use this projection.</p><p>The key feature of Mercator projection is that it retains the direction information. That means if point A is 30deg east from north of point B on the globe, it will be in the same direction on its Mercator projection. Or say there is a turn of 90deg in some lane, it will be 90deg on Mercator projection as well. That is the reason it works really well for navigation purposes.</p><p><strong><strong>How to use a Mercator projection?</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-4.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-5.png\" class=\"kg-image\"></figure><ol><li>Every point on the earth is projected on a cylinder exactly like point A which has point A’ on the cylinder.</li><li>Once all the required points/routes are projected on this cylinder. It is unrolled, and we obtain a rectangle like the one shown above.</li><li>All the planar geometry can be applied with a very little margin of error on this 2D projected map.</li><li>After processing all the points/routes they can be converted back to latitude and longitude on the globe.</li></ol><p>So, now we have the projected driver location on the route which we will fondly call <code>snapped point</code> going forward.</p><h3 id=\"3-3-end-to-end-animation\">3.3: End-to-End animation</h3><p>The new driver location that we receive can be present in <strong><strong>any</strong></strong> segment. It may be that it is in the same segment or it may be that it is on the next segment or on the next one or it may be that it is on the last segment.</p><p>But for linear animation, we need a start point and an end point. The start point is the current position of the driver marker. We already got the snapped endpoint in the earlier section. But we can’t just animate from start to end <strong><strong>at once</strong></strong> as that would seem like the car is flying and ignoring U-turns, routes, etc. So, how do we prevent it from flying?</p><p>What do you do when you can’t fly to a place? You follow the road. Right? That’s what we have to do as well. Make the driver marker follow the route/road. We need to animate along each segment in the route until we reach the segment which has the driver position that we received.</p><p>There are again two cases here 😜:</p><h3 id=\"3-3-1-the-new-driver-location-is-on-the-same-segment\">3.3.1: The new driver location is on the same segment</h3><p>In this case, we can directly animate from the current position of driver marker to the driver location that we received since this is just a straight line animation.</p><p>A segment is always a straight line. We will discuss more on how to do the animation b/w 2 points in a later section.</p><h3 id=\"3-3-2-the-new-driver-location-is-on-a-different-segment\">3.3.2: The new driver location is on a different segment</h3><p>In this case, we need to animate to that segment along the route. We have to animate along each of the segments in between to reach the final segment.</p><p>For animation along the first segment, we set the endpoint of the animation to the beginning of the next segment in the route. We animate to the end of the first segment.</p><p>The next segment may also not have the driver location that we received. After a driver has traversed the first segment, we move the end location of the animation to the end of the next segment, and so on and so forth till we reach the last segment. Confusing, ya? Let’s see an example.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/Screenshot-2020-05-23-at-10.06.55-PM.png\" class=\"kg-image\"><figcaption>So much zig-zag (huh!!)</figcaption></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received.</p><p>In the 1st animation, we move the driver marker from A to the end of the first segment (B).</p><p>In the 2nd animation, the driver marker is moved through the entire length of the 2nd segment.</p><p>And so on and so forth till we reach the segment which has the newly received snapped location (X).</p><h2 id=\"animation-in-a-segment\">Animation in a segment</h2><p>We now know how the overall animation would look like. But we also need to configure how the smallest unit of the animation i.e animation in a segment should happen.</p><p><strong><strong>Start point and End point</strong></strong>: For case #1 above, the animation in a segment will happen just once. For case #2 above, this animation in a segment will happen multiple times. Start and endpoints will be determined before beginning each of the animations.</p><p><strong><strong>Bearing b/w these two points</strong></strong>: Bearing can be calculated using another one of Geometry/Maps Utils method.</p><p><code>SphericalUtil.computeHeading(startPosition, endPosition)</code></p><p><strong><strong>Duration of animation: </strong></strong>Calculating duration is a bit tricky. And the duration is the most important thing in any animation. Sometimes the difference b/w a smooth and a choppy animation is caused by the duration. It was very important that we got it right. So, let’s take a break and see how to calculate the duration.</p><h2 id=\"what-is-duration\">What is Duration?</h2><p>It’s the amount of time for which the animation should happen. But you already know that. Going back to middle school maths (yeah, that far), how do you calculate time? Time is nothing but distance divided by speed. Correct? Calculating straight line distance b/w the two points we want to animate through is pretty easy.</p><p><code>SphericalUtil.computeDistanceBetween(startLocation, endLocation)</code></p><p>Cool, cool. But what about speed? How should we calculate speed?</p><h2 id=\"speed-calculation\">Speed calculation</h2><p><code>FusedLocationProvider</code> API in the driver app does provide the speed of the vehicle but it’s highly unreliable. So, we have to employ some tricks to calculate the speed.</p><p>Speed is distance divided by time. Distance again!! Seems like we are running in circles 😵. Not exactly. Here the distance is not the straight line distance b/w the two points that we have to animate through.</p><p>This is the total distance along the route <strong><strong>from</strong></strong> the segment that the old driver location is currently located at, <strong><strong>to</strong></strong> the segment where the new driver location is. Yeah, that statement is a bit confusing. So, let’s take an example.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-8.png\" class=\"kg-image\"></figure><p>The car icon(A) represents the location in the segment where the driver marker currently is. The red pin(X) represents the new snapped location received. To calculate the distance, we do the obvious:</p><p><code>Total distance = d1 + d2 + d3 + d4</code></p><p>Now, we have the distance. We need the time interval.</p><p>The <code>FusedLocationProvider</code> API in the driver app does provide us the timestamp at which a location was updated. And this information is passed to our backend and subsequently to the customer app.</p><p>We calculate the time difference b/w the old driver location and the new driver location using their timestamps. Wait, how do we know the old driver location? As we had mentioned earlier, we cache the last available driver location and route in an in-memory cache.</p><p>Total route distance divided by time and now we have the speed for the entire duration. Linear distance divided by this speed and now we have the <strong><strong>duration</strong></strong>for a single animation in a segment. Cool, so let’s get back to the point where we broke off 😅.</p><h1 id=\"update-the-animation\">Update the animation</h1><p>With all the above information, we start the animation. But wait? Aren’t we missing something? We did start an animation b/w two points but how will our animator know <strong><strong>how</strong></strong> to animate?</p><p>Animation is just a bunch of frame updates that happen every fast. How do we update the marker position, the starting point of the route, the rotation in each and every frame of the animation? Well, the mobile/web framework allows us to do something every time the frame is updated.</p><p>But what is this something that we should do?</p><h2 id=\"1-update-marker-s-position\">1. Update marker’s position</h2><p>For markers, we need to update their position. Once we have the position, we can simply update the marker position using the <code>marker.setPosition()</code>. To find the position during each frame of the animation, we need the percentage of animation that has elapsed.</p><p>We can get the percentage from the Animation framework. Using this percentage and the start and end position, we calculate the intermediate position/s like this:</p><p><code>SphericalUtil.interpolate(startPosition, endPosition, fraction)</code></p><h2 id=\"2-update-routes\">2. Update Routes</h2><p>Routes need to be aligned with the marker’s movement. So, we update the routes as well using the values above and updating the polyline points of that route using the <code>polyline.setPoints()</code><em><em>.</em></em></p><p>And that’s a wrap. The result that we get is a very smooth, measured movement of the vehicle along the road.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/600/1*EtoKV1x7ufBgxOPdcsvnJg.gif\" class=\"kg-image\"></figure><p>There are a few more tips/tricks that we employ to ensure that there are no abrupt changes in the animation.</p><p>But that’s for next time. 😃</p><h3 id=\"what-s-next\">What’s next?</h3><p>We still need to go a long way to meet the standards that we have set for ourselves. Currently, this new experience is only rolled out to GoRide, GoCar, and GoBluebird. We are working on bringing the same experience to other services like GoFood, GoSend, and GoShop. Stay tuned for more!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/image-9.png\" class=\"kg-image\"></figure><p>Want stories like this one beamed straight to your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter!</a></p><p>Thanks to Koushik Krishna, Abhay Sood, Anup Cowkur, Sooraj Rajmohan, and Kshitij Choudhary.</p>","url":"https://gojek-ghost.zysk.in/tips-for-building-smooth-live-tracking/","canonical_url":null,"uuid":"90db33e9-3b67-4c66-a39f-7247172d3fa7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec94e8c7aa22c4066f83db2","reading_time":13}},{"node":{"id":"Ghost__Post__5eb1066a5524cd001e7392a4","title":"Why We Swear by the RCA","slug":"why-we-swear-by-the-rca","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_nOcToFzqvdWlHmOQ59v0sw.jpg","excerpt":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","custom_excerpt":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"12 May, 2020","updated_at_pretty":"02 June, 2020","created_at":"2020-05-05T11:53:38.000+05:30","published_at":"2020-05-12T11:53:00.000+05:30","updated_at":"2020-06-02T12:28:11.000+05:30","meta_title":"Why We Swear by the RCA","meta_description":"An account of how Gojek responds to production issues, and why the RCA is a critical part of the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"When Gojek was still finding its feet, Fridays used to be a nightmare.\n\nJakarta, being the capital of the fourth most-populous country in the world, is\nhome to many people who work in the city and travel to their hometowns on\nweekends. Many of them rely on Gojek as their preferred first mile connectivity\noption — resulting in a traffic spike on our systems on Friday evening. In those\nearly days, this often triggered a system outage.\n\nEvery outage erodes the hard earned trust we build with our customers and driver\npartners.\n\nEnter the RCA\nWe knew we couldn’t fix the failures overnight, but we could learn from them.\nAfter all, so many of these mistakes were common and easily overlooked. So we\ndecided to embrace the ‘Root Cause Analysis’ (RCA). If something related to\nGojek’s Engineering division failed, the person(s) who attended the support call\nand had most context of what happened would prepare a document. This document\nwould contain a timeline, detail what went wrong, suggest corrective measures,\nand compile lessons learned.\n\nThis process ensured everyone across the organisation had visibility into what\nhappened. As a result, even unaffected teams cited in the RCA could analyse\ntheir systems to ensure the same problem would not happen to them. More\nimportantly, it provided a degree of accountability — and that’s important when\nyou have 20+ products.\n\nA post-mortem, and a prevention.\n\nThis post details what happens when a system failure happens at Gojek, and how\nit makes it way into an RCA.\n\n1. The What\nWhen something fails, it is important to understand the origin of the problem.\nEvery team in Gojek sets up alerts which monitor the state of their systems. If\na state change in the system causes a deviation from expected behaviour, an\nalerting service called pager duty automatically dials the phones of the people\nresponsible for that part of the system.\n\nHere’s an example:\n\nWhen a booking is created, we find a list of driver partners and send the order\ndetails to them, at which point they get a pop-up with trip details like\nestimated duration and approximate earnings. The idea is to give driver partners\nenough information to make the decision to accept the trip. But there was a\nproblem.\n\n2. The Why\nOne of the fields this prompt contains is a Booking ID, which is stored as an\ninteger (which, in technical speak, has a limit of 32 bits). Unfortunately for\nus, the ID generated exceeded this limit.\n\nWelcome to what we call Integer Overflow.\n\nAs a result of this, the driver app started crashing.\n\nHow bad can that be, you ask?\n\n3. The Fallout\nDrivers being unable to use the app means they can’t accept bookings. This means\ncustomers can’t book rides, send packages, get food, or use any service that\ndepends on our driver partners.\n\nAs a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want\nto get all technical about it) plummeted. Pager duty is hit, and cell phones\nstart ringing off their proverbial hooks.\n\nWith driver partners stuck with malfunctioning apps, multiple Gojek services\nstart reporting errors. As customers try and figure out why the app is behaving\nthis way, engineers scramble to do the same.\n\n4. The Response\nWhen the phones ring, the team whose alerts have been triggered immediately get\nto work figuring out what happened. If they identify the problem quickly and\ndebug it, they notify other teams. The team then gets to work using information\nfrom the alerts and system dashboards to prepare an RCA.\n\nThis is, of course, the best case scenario.\n\nIf the concerned team cannot find a fix however, a war room is called.\n\nThe war room signifies a larger issue, and members of every available team drop\nwhat they’re doing and join the call. Sometimes, these are frantic Slack\ndiscussions and calls in the middle of the night. Other times, office boardrooms\nare blocked and everyone gathers to brainstorm collectively.\n\nDevs, Team Leads, Product Managers, all hands on deck.\n\nIn a war room scenario, whoever has most context on the situation takes charge\nand delegates tasks as required. This central person also plays a key role in\ndocumenting the happenings in the war room — how many people were present, which\nteams were represented, who was handling what, etc. All this information plays a\nkey role in the RCA. While this is going down, Driver and Customer Care centres\nare also notified, bracing for the inevitable flurry of complaints.\n\nThe fix may take the form of a few simple temporary hacks, or an hours long war\nroom — but in the end, there is always a fix.\n\nWords of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore\nAnd a sense of camaraderie 💚\n\nOnce the dust settles, the investigation begins. The person who managed the war\nroom generally authors a document analysing what went wrong, using all the info\nfrom the alerts, dashboards, and firsthand accounts of the responders present.\nTypically every stakeholder in the organisation gets an email the next day with\ndetails of what went wrong — the RCA.\n\n5. The Learnings\n“Collaborate With Compassion”\n\nThese three words mean a lot at Gojek, and our RCAs reflect that. When you open\nan RCA mail, there is rarely even a mention of specific people, except to\nacknowledge those who responded to the distress call and played a role in\nfinding a fix. Call out the ones who made the effort, never the ones\nresponsible.\n\nMost RCAs instead dwell on relevant, actionable information. Information that\nwas being collected and monitored right from when the alert tripped:\n\nThe What: What was the problem?\n\nThe Why: Why did it happen?\n\nThe Fallout: Which services were affected, and for how long?\n\nThe Response: How was it fixed?\n\nThe Learnings: What can be done to avoid a repeat of this in future?\n\nThis simple process has helped us scale more safely and efficiently. It also\nallows for early identification of potential vulnerabilities in other systems.\nAs you may have noticed, there is no mention of who was responsible, no finger\npointing, no blame games. Collaborate with compassion.\n\nTo get a better sense of how we write RCAs at Gojek, read a sample RCA\n[https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6]\n.\n\nIf you’d like to start a culture of RCAs as well, here’s our RCA template\n[https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit]\n, courtesy GoPay CTO Ranjan Sakalley [https://twitter.com/rnjn], who also\noccasionally drops invaluable insights in the ‘Learnings’ section. 😅\n\n\nRCAs have played an integral part in our journey to becoming a SuperApp.\nInvestigating, analysing, and documenting problems in production help us build\nbetter, more scalable systems, and tackle new problems in a mature manner\nwithout fear of retribution.\n\nThe days of weekly production issues are now a thing of the past. While we won’t\nbe so brash as to say we never have problems, embracing RCAs and a culture of\ncompassionate collaboration have helped us get to where we are today. 🙌\n\nWe’ll be writing about more interesting case studies on issues faced in\nproduction. Keep an eye on this blog, or subscribe to our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] for updates on our stories in\na neat little email.","html":"<p>When Gojek was still finding its feet, Fridays used to be a nightmare.</p><p>Jakarta, being the capital of the fourth most-populous country in the world, is home to many people who work in the city and travel to their hometowns on weekends. Many of them rely on Gojek as their preferred first mile connectivity option — resulting in a traffic spike on our systems on Friday evening. In those early days, this often triggered a system outage.</p><p><em><em>Every outage erodes the hard earned trust we build with our customers and driver partners.</em></em></p><h3 id=\"enter-the-rca\">Enter the RCA</h3><p>We knew we couldn’t fix the failures overnight, but we could learn from them. After all, so many of these mistakes were common and easily overlooked. So we decided to embrace the ‘Root Cause Analysis’ (RCA). If something related to Gojek’s Engineering division failed, the person(s) who attended the support call and had most context of what happened would prepare a document. This document would contain a timeline, detail what went wrong, suggest corrective measures, and compile lessons learned.</p><p>This process ensured everyone across the organisation had visibility into what happened. As a result, even unaffected teams cited in the RCA could analyse their systems to ensure the same problem would not happen to them. More importantly, it provided a degree of accountability — and that’s important when you have 20+ products.</p><p>A post-mortem, and a prevention.</p><p>This post details what happens when a system failure happens at Gojek, and how it makes it way into an RCA.</p><h3 id=\"1-the-what\">1. The What</h3><p>When something fails, it is important to understand the origin of the problem. Every team in Gojek sets up alerts which monitor the state of their systems. If a state change in the system causes a deviation from expected behaviour, an alerting service called <code>pager duty</code> automatically dials the phones of the people responsible for that part of the system.</p><p><strong><strong>Here’s an example:</strong></strong></p><p>When a booking is created, we find a list of driver partners and send the order details to them, at which point they get a pop-up with trip details like estimated duration and approximate earnings. The idea is to give driver partners enough information to make the decision to accept the trip. But there was a problem.</p><h3 id=\"2-the-why\">2. The Why</h3><p>One of the fields this prompt contains is a Booking ID, which is stored as an integer (which, in technical speak, has a limit of 32 bits). Unfortunately for us, the ID generated exceeded this limit.</p><p>Welcome to what we call Integer Overflow.</p><p>As a result of this, the driver app started crashing.</p><p><strong><strong><em><em>How bad can that be, you ask?</em></em></strong></strong></p><h3 id=\"3-the-fallout\">3. The Fallout</h3><p>Drivers being unable to use the app means they can’t accept bookings. This means customers can’t book rides, send packages, get food, or use any service that depends on our driver partners.</p><p>As a result, Gojek’s order numbers (or what we call ‘concurrence’, if you want to get all technical about it) plummeted. Pager duty is hit, and cell phones start ringing off their proverbial hooks.</p><p>With driver partners stuck with malfunctioning apps, multiple Gojek services start reporting errors. As customers try and figure out why the app is behaving this way, engineers scramble to do the same.</p><h3 id=\"4-the-response\">4. The Response</h3><p>When the phones ring, the team whose alerts have been triggered immediately get to work figuring out what happened. If they identify the problem quickly and debug it, they notify other teams. The team then gets to work using information from the alerts and system dashboards to prepare an RCA.</p><p><strong><strong>This is, of course, the best case scenario.</strong></strong></p><p>If the concerned team cannot find a fix however, a war room is called.</p><p>The war room signifies a larger issue, and members of every available team drop what they’re doing and join the call. Sometimes, these are frantic Slack discussions and calls in the middle of the night. Other times, office boardrooms are blocked and everyone gathers to brainstorm collectively.</p><p><em><em>Devs, Team Leads, Product Managers, all hands on deck.</em></em></p><p>In a war room scenario, whoever has most context on the situation takes charge and delegates tasks as required. This central person also plays a key role in documenting the happenings in the war room — <strong><strong>how many people were present, which teams were represented, who was handling what, etc.</strong></strong> <strong><strong>All this information plays a key role in the RCA.</strong></strong> While this is going down, Driver and Customer Care centres are also notified, bracing for the inevitable flurry of complaints.</p><p>The fix may take the form of a few simple temporary hacks, or an hours long war room — but in the end, there is always a fix.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1129/1*UFUYfO3Gw9tnKCiE1y40-Q.jpeg\" class=\"kg-image\"><figcaption>Words of appreciation from GoPay CEO Aldi Haryopratomo and Gojek CTO Ajey Gore</figcaption></figure><p><em><em>And a sense of camaraderie </em>💚</em></p><p>Once the dust settles, the investigation begins. The person who managed the war room generally authors a document analysing what went wrong, using all the info from the alerts, dashboards, and firsthand accounts of the responders present. Typically every stakeholder in the organisation gets an email the next day with details of what went wrong — the RCA.</p><h3 id=\"5-the-learnings\">5. The Learnings</h3><p>“Collaborate With Compassion”</p><p>These three words mean a lot at Gojek, and our RCAs reflect that. When you open an RCA mail, there is rarely even a mention of specific people, except to acknowledge those who responded to the distress call and played a role in finding a fix. <strong><strong>Call out the ones who made the effort, never the ones responsible.</strong></strong></p><p>Most RCAs instead dwell on relevant, actionable information. Information that was being collected and monitored right from when the alert tripped:</p><p><em><em>The What: What was the problem?</em></em></p><p><em><em>The Why: Why did it happen?</em></em></p><p><em><em>The Fallout: Which services were affected, and for how long?</em></em></p><p><em><em>The Response: How was it fixed?</em></em></p><p><em><em>The Learnings: What can be done to avoid a repeat of this in future?</em></em></p><p>This simple process has helped us scale more safely and efficiently. It also allows for early identification of potential vulnerabilities in other systems. As you may have noticed, there is no mention of who was responsible, no finger pointing, no blame games. <em><em>Collaborate with compassion.</em></em></p><p>To get a better sense of how we write RCAs at Gojek, <a href=\"https://docs.google.com/document/d/1r_PSsl7mBxbfAcibGTdFpnM5hm6ot82bF-_9VeV2J9w/edit?ts=5db7c330#heading=h.kreykp6cjau6\" rel=\"noopener\"><strong><strong>read a sample RCA</strong></strong></a>.</p><p>If you’d like to start a culture of RCAs as well, <a href=\"https://docs.google.com/document/d/12Ims21IwFCNWi9MXcw2TVxPLB6YyWrIoTNaw3P-M_t4/edit\" rel=\"noopener\"><strong><strong>here’s our RCA template</strong></strong></a>, courtesy GoPay CTO <a href=\"https://twitter.com/rnjn\" rel=\"noopener\">Ranjan Sakalley</a>, who also occasionally drops invaluable insights in the ‘Learnings’ section. <strong><strong>😅</strong></strong><br></p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/480/1*2sosYEnk68lMaQTVjdZjWQ.jpeg\" class=\"kg-image\"></figure><p>RCAs have played an integral part in our journey to becoming a SuperApp. Investigating, analysing, and documenting problems in production help us build better, more scalable systems, and tackle new problems in a mature manner without fear of retribution.</p><p>The days of weekly production issues are now a thing of the past. While we won’t be so brash as to say we never have problems, embracing RCAs and a culture of compassionate collaboration have helped us get to where we are today. 🙌</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-3.png\" class=\"kg-image\"></figure><p>We’ll be writing about more interesting case studies on issues faced in production. Keep an eye on this blog, or <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">subscribe to our newsletter</a> for updates on our stories in a neat little email.</p>","url":"https://gojek-ghost.zysk.in/why-we-swear-by-the-rca/","canonical_url":null,"uuid":"ef04187f-7199-434a-8647-6dcd386043cd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb1066a5524cd001e7392a4","reading_time":5}},{"node":{"id":"Ghost__Post__5eaf9f2234df85001e15f42d","title":"OK Google, Meet Gojek","slug":"ok-google-meet-gojek","featured":true,"feature_image":"https://res-5.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_QaQg1VnVWuhAebytXO-gKg.jpg","excerpt":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","custom_excerpt":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","visibility":"public","created_at_pretty":"04 May, 2020","published_at_pretty":"04 May, 2020","updated_at_pretty":"05 June, 2020","created_at":"2020-05-04T10:20:42.000+05:30","published_at":"2020-05-04T10:33:07.000+05:30","updated_at":"2020-06-05T14:23:31.000+05:30","meta_title":"Ok Google, Meet Gojek","meta_description":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"We added Gojek’s ride-hailing and food ordering functions to Google Assistant.\nHere’s what we learned in the process.\nBy Vikas Bajpayee and Lokesh Kalal\n\nOur aim behind building a Super App was to help our users get rid of the daily\nfrictions in their lives. But the journey doesn’t stop there. Even after\nbuilding all these convenient products, we still try and reduce frictions that\nmay be encountered even within our app — such as booking a ride or ordering\nfood.\n\nSo we thought, why don’t we integrate with Google Assistant, and let our users\ncommunicate with our products in a new way?\n\nIn this post, we explain how we integrated our food and transport products with\nthe Google Assistant.\n\nThe why\nWe’ve already addressed one part of the why — convenience. The other is user\nre-engagement. According to this survey\n[https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&utm_medium=twitter.com&utm_source=social&utm_campaign=buffer] \nconducted by Silicon Valley researcher Andrew Chen 77% of users stop using an\napp three days after they install it. Within a month, that number goes up to\n90%. ?\n\nThe how\nTo help integrate Android apps with the Google Assistant, Google launched App\nActions:\n\nWhat are app actions?\nApp Actions are a new way to make your android app content available in places\nlike Google Search, Google Assistant etc. From a user’s perspective, App Actions\nbehave like shortcuts to parts of your Android app. When users invoke an App\nAction, the Assistant either launches a screen in the Android app that the user\nhas already installed or shows an embedded visual card (Android Slice) that\nusers can interact with.\n\nApp actions provide a faster way for users to access Android apps. It can be\nachieved in two ways:- either user can be directed to a specific\nactivity(screen) using a deep link or user may see relevant content on the\nAssistant itself called Slices.\n\nMore info on this can be found here: \nhttps://developers.google.com/assistant/app/overview\n\nWhat are Slices?\nSlices are super-powered app actions. They provide a way to interact with apps\nwithout moving away from Assistant by showing a small piece of UI within\nAssistant. Slices are UI templates that can display rich, dynamic, and\ninteractive content from the app in Google Assistant.\n\nSlices can help users perform tasks faster by enabling engagement outside of the\nfullscreen app experience.\n\nYou can build Slices as enhancements to App Actions.\n\nHere’s an example:\n\nWe choose to use slices to show food order status, as the order status will have\nlimited information (eg. Driver is on the way to Restaurant, with his location\non Map ) which can be easily shown in a small piece of UI segment.\n\nIn fact, this functionality was recently demoed on stage at a Google event in\nIndonesia. You can check it out below:\n\nApp Actions Demo at #Google4ID 2019How does it work?\nWhenever a user says or types something in Assistant, assistant parses the\nquery. If the query matches the built-in intent\n[https://developers.google.com/assistant/app/reference/built-in-intents] grammar\nthen Google Assistant extracts the query parameter in schema.org\n[https://schema.org/] and generates a deep link URL using the mapping we provide\nin an actions.xml file.\n\nGoogle then attaches those extracted parameters to the deep link URL and creates\na final deep link which allows a user to launch specific content or screens in\nthe app.\n\nLet’s dig a little deeper:\n\nGoogle applies Machine Learning and Artificial Intelligence (Natural Language\nProcessing) to understand all the sentences we type in Assistant.\n\nWhile users can type anything they want in Assistant and the system gets better\nat interpreting them over time, but there are some sentences for specific intent\nthat are fixed by Google. More info here\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation]\n.\n\nHow did we integrate our services with Assistant?\nThe core of integrating Gojek with Assistant involved creating actions on Google\nAssistant with actions.xml file.\n\nLet’s explore how to do this:\n\n1. Create actions.xml file in your XML folder. This contains all the actions\nwith built-in intents which define what actions our app can support in the\nAssistant. Each action contains built-in intents\n[https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation] \nsupported by Google as a <intent-name> tag.\n\n2. Define a fulfilment mode for each app action — which can be deep links or\nslices. You have to pass a fulfilment mode in each action. This is compulsory.\n\n3. Pass the URL template which will allow a user to launch your app — this can\nbe the deep link to your app or URL to Slice provider.\n\n4. Define entity-set — the Gojek app is available in multiple locales, so to\nprovide locale for all the regions, we added the entity-set, which allows\nAssistant to understand more than one version of category. ex:- taxi can be\npronounced as taksi in Bahasa.\n\nSo, If you want locale for your specific parameter in deep-link URL, you can\nsimply attach an entity-set with that parameter, see how you can achieve this in\nbelow example\n\n<parameter name=”taxiReservation.category”><entity-set-reference\nentitySetId=”TransportCategoryEntitySet” /></parameter>\n\n5. Add a reference to actions.xml file using the <meta> tag in your app’s\nmanifest.xml file inside the application tag.\n\nIn order to integrate Slices:\n\n 1. Implement an Android Slice by following the steps described in the Slices\n    Getting Started guide\n    [https://developer.android.com/guide/slices/getting-started].\n 2. In the actions.xml file, in the <fulfillment> element, specify \n    fulfillmentMode=“actions.fulfillment.SLICE” to indicate that a user intent\n    can be fulfilled using a Slice in your app.\n\nA few quick notes on what we learnt\n 1. Testing this feature is pretty hard and things become weird when you have\n    multiple build types of your app. For testing, you need a build type on the\n    Play Store, (which means the package name of the testing build should match\n    the package name of the published app). You can use a plugin (developed by\n    Google) called App Actions Test Tool\n    [https://developers.google.com/assistant/app/test-tool] for testing this\n    feature.\n\n> Please make sure you are following points while testing with App Actions Test\nTool:\na) Log in to Android Studio and Google Assistant with the account which has\naccess to your published app on Play console.\nb) ApplicationId of the app should be the same as your published app.\nc) Your Gradle should be built successfully.\nd) Use App Action Tool to create and update preview and test the app actions and\nslice.\n2. If your app is used in different locales, you can create locales using \nentity-set\n[https://developers.google.com/assistant/app/action-schema#entity-set-reference] \nin the actions.xml file.\n\n3. In order to give early builds to QA or other users (if you have multiple\nbuild types in your app), you can create an internal test track on Play console\nand add relevant people to it. This allows you to share the build to production\nfor only some listed users.\n\n(See this\n[https://support.google.com/googleplay/android-developer/answer/3131213?hl=en] \nfor how you can create an internal test track for your app.)\n\n4. Actions.xml shouldn’t be obfuscated in release apk — it means if you are\nusing any obfuscated tools like proguard then actions.xml shouldn’t be\nobfuscated there.\n\n5. Slices can be requested before the onCreate of your application is completed.\nYou can run into issues if you are using something which is initialised in \nonCreate while creating slices.\n\n6. Don't refresh slices from onBindSlice() method, it will end up in an infinite\nloop where Google Assistant will call onBindSlice() infinitely.\n\nThat’s all from us folks. Hope this post gave you a better understanding of how\nApp Actions and Slices work with Google Assistant. Working on this feature was\nan amazing experience for us. If you use the Gojek app, make sure to give them a\ntry and let us know what you think. ?\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we’ll send you updates\nfrom the blog straight to your inbox! ?","html":"<h3 id=\"we-added-gojek-s-ride-hailing-and-food-ordering-functions-to-google-assistant-here-s-what-we-learned-in-the-process-\">We added Gojek’s ride-hailing and food ordering functions to Google Assistant. Here’s what we learned in the process.</h3><p><strong><strong><em>By Vikas Bajpayee and Lokesh Kalal</em></strong></strong></p><p>Our aim behind building a Super App was to help our users get rid of the daily frictions in their lives. But the journey doesn’t stop there. Even after building all these convenient products, we still try and reduce frictions that may be encountered even within our app — such as booking a ride or ordering food.</p><p>So we thought, why don’t we integrate with Google Assistant, and let our users communicate with our products in a new way?</p><p>In this post, we explain how we integrated our food and transport products with the Google Assistant.</p><h1 id=\"the-why\">The why</h1><p>We’ve already addressed one part of the <em><em>why — </em></em>convenience. The other is user re-engagement. According to <a href=\"https://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&amp;utm_medium=twitter.com&amp;utm_source=social&amp;utm_campaign=buffer\" rel=\"noopener\">this survey</a> conducted by Silicon Valley researcher Andrew Chen 77% of users stop using an app three days after they install it. Within a month, that number goes up to 90%. ?</p><h1 id=\"the-how\">The how</h1><p>To help integrate Android apps with the Google Assistant, Google launched App Actions:</p><h2 id=\"what-are-app-actions\">What are app actions?</h2><p>App Actions are a new way to make your android app content available in places like Google Search, Google Assistant etc. From a user’s perspective, App Actions behave like shortcuts to parts of your Android app. When users invoke an App Action, the Assistant either launches a screen in the Android app that the user has already installed or shows an embedded visual card (Android Slice) that users can interact with.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*w4jk-CTME9amkb5dsIQDzw.gif\" class=\"kg-image\"></figure><p>App actions provide a faster way for users to access Android apps. It can be achieved in two ways:- either user can be directed to a specific activity(screen) using a deep link or user may see relevant content on the Assistant itself called Slices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/260/1*KPBLtVMjiHBOPEJ53E9F8A.gif\" class=\"kg-image\"></figure><p>More info on this can be found here: <a href=\"https://developers.google.com/assistant/app/overview\" rel=\"noopener\">https://developers.google.com/assistant/app/overview</a></p><h2 id=\"what-are-slices\"><strong>What are Slices?</strong></h2><p>Slices are super-powered app actions. They provide a way to interact with apps without moving away from Assistant by showing a small piece of UI within Assistant. Slices are UI templates that can display rich, dynamic, and interactive content from the app in Google Assistant.</p><p><em><em>Slices can help users perform tasks faster by enabling engagement outside of the fullscreen app experience.</em></em></p><p>You can build Slices as enhancements to App Actions.</p><p>Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1080/1*EFF30b3185UtwKYjx0VP1A.jpeg\" class=\"kg-image\"></figure><p>We choose to use slices to show food order status, as the order status will have limited information (eg. Driver is on the way to Restaurant, with his location on Map ) which can be easily shown in a small piece of UI segment.</p><p>In fact, this functionality was recently demoed on stage at a Google event in Indonesia. You can check it out below:</p><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F0u20Iu4m2Co%3Fstart%3D5805%26feature%3Doembed%26start%3D5805&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0u20Iu4m2Co&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F0u20Iu4m2Co%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" allowfullscreen=\"\" frameborder=\"0\" height=\"480\" width=\"854\" title=\"#Google4ID 2019\" class=\"s t u iu ai\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 382.188px;\"></iframe><figcaption>App Actions Demo at #Google4ID 2019</figcaption></figure><h1 id=\"how-does-it-work\"><strong>How does it work?</strong></h1><p>Whenever a user says or types something in Assistant, assistant parses the query. If the query matches the<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents\" rel=\"noopener\"> built-in intent</a> grammar then Google Assistant extracts the query parameter in<a href=\"https://schema.org/\" rel=\"noopener\"> schema.org</a> and generates a deep link URL using the mapping we provide in an actions.xml file.</p><p>Google then attaches those extracted parameters to the deep link URL and creates a final deep link which allows a user to launch specific content or screens in the app.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1490/0*jUlpzwbXbFIgGy7s\" class=\"kg-image\"></figure><p>Let’s dig a little deeper:</p><p>Google applies Machine Learning and Artificial Intelligence (Natural Language Processing) to understand all the sentences we type in Assistant.</p><p>While users can type anything they want in Assistant and the system gets better at interpreting them over time, but there are some sentences for specific intent that are fixed by Google. More info <a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\">here</a>.</p><h1 id=\"how-did-we-integrate-our-services-with-assistant\"><strong>How did we integrate our services with Assistant?</strong></h1><p>The core of integrating Gojek with Assistant involved creating actions on Google Assistant with actions.xml file.</p><p>Let’s explore how to do this:</p><p>1. Create <strong><strong>actions.xml</strong></strong> file in your XML folder. This contains all the actions with built-in intents which define what actions our app can support in the Assistant. Each action contains<a href=\"https://developers.google.com/assistant/app/reference/built-in-intents#create-taxi-reservation\" rel=\"noopener\"> built-in intents</a> supported by Google as a &lt;intent-name&gt; tag.</p><p>2. Define a fulfilment mode for each app action — which can be deep links or slices. You have to pass a fulfilment mode in each action. This is compulsory.</p><p>3. Pass the URL template which will allow a user to launch your app — this can be the deep link to your app or URL to Slice provider.</p><p>4. Define entity-set — the Gojek app is available in multiple locales, so to provide locale for all the regions, we added the entity-set, which allows Assistant to understand more than one version of category. ex:- taxi can be pronounced as taksi in Bahasa.</p><p>So, If you want locale for your specific parameter in deep-link URL, you can simply attach an entity-set with that parameter, see how you can achieve this in below example</p><p><em>&lt;parameter name=”taxiReservation.category”&gt;&lt;entity-set-reference entitySetId=”TransportCategoryEntitySet” /&gt;&lt;/parameter&gt;</em></p><p>5. Add a reference to <strong><strong>actions.xml</strong></strong> file using the &lt;meta&gt; tag in your app’s manifest.xml file inside the application tag.</p><p><strong><strong>In order to integrate Slices:</strong></strong></p><ol><li>Implement an Android Slice by following the steps described in the <a href=\"https://developer.android.com/guide/slices/getting-started\" rel=\"noopener\">Slices Getting Started guide</a>.</li><li>In the actions.xml file, in the <code>&lt;fulfillment&gt;</code> element, specify <code>fulfillmentMode=“actions.fulfillment.SLICE”</code> to indicate that a user intent can be fulfilled using a Slice in your app.</li></ol><h1 id=\"a-few-quick-notes-on-what-we-learnt\"><strong>A few quick notes on what we learnt</strong></h1><ol><li>Testing this feature is pretty hard and things become weird when you have multiple build types of your app. For testing, you need a build type on the Play Store, (which means the package name of the testing build should match the package name of the published app). You can use a plugin (developed by Google) called<a href=\"https://developers.google.com/assistant/app/test-tool\" rel=\"noopener\"> <strong><strong>App Actions Test Tool</strong></strong></a> for testing this feature.</li></ol><blockquote><em><em>Please make sure you are following points while testing with App Actions Test Tool:</em></em><br><em><em>a) Log in to Android Studio and Google Assistant with the account which has access to your published app on Play console.</em></em><br><em><em>b) <code>ApplicationId</code> of the app should be the same as your published app.</em></em><br><em><em>c) Your Gradle should be built successfully.</em></em><br><em><em>d) Use App Action Tool to create and update preview and test the app actions and slice.</em></em></blockquote><p>2. If your app is used in different locales, you can create locales using <a href=\"https://developers.google.com/assistant/app/action-schema#entity-set-reference\" rel=\"noopener\">entity-set</a> in the actions.xml file.</p><p>3. In order to give early builds to QA or other users (if you have multiple build types in your app), you can create an internal test track on Play console and add relevant people to it. This allows you to share the build to production for only some listed users.</p><p>(See <a href=\"https://support.google.com/googleplay/android-developer/answer/3131213?hl=en\" rel=\"noopener\">this</a> for how you can create an internal test track for your app.)</p><p>4. Actions.xml shouldn’t be <strong><strong>obfuscated</strong></strong> in release apk — it means if you are using any obfuscated tools like proguard then actions.xml shouldn’t be obfuscated there.</p><p>5. Slices can be requested before the <code>onCreate</code> of your application is completed. You can run into issues if you are using something which is initialised in <code>onCreate</code> while creating slices.</p><p>6. Don't refresh slices from <code>onBindSlice()</code> method, it will end up in an infinite loop where Google Assistant will call <code>onBindSlice()</code> infinitely.</p><p>That’s all from us folks. Hope this post gave you a better understanding of how App Actions and Slices work with Google Assistant. Working on this feature was an amazing experience for us. If you use the Gojek app, make sure to give them a try and let us know what you think. ?</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we’ll send you updates from the blog straight to your inbox! ?</p>","url":"https://gojek-ghost.zysk.in/ok-google-meet-gojek/","canonical_url":null,"uuid":"a980d332-756f-4f47-a97f-921a11196ed7","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eaf9f2234df85001e15f42d","reading_time":6}},{"node":{"id":"Ghost__Post__5eb0f8af5524cd001e7391f4","title":"How Gojek Uses NLP to Name Pickup Locations at Scale","slug":"how-gojek-uses-nlp-to-name-pickup-locations-at-scale-2","featured":false,"feature_image":"https://res-2.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dFalBje-vQCkEY8Zrq9P5g.jpg","excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","custom_excerpt":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"01 May, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T10:55:03.000+05:30","published_at":"2020-05-01T09:30:00.000+05:30","updated_at":"2020-05-12T11:51:38.000+05:30","meta_title":"How Gojek Uses NLP to Name Pickup Points at Scale","meta_description":"Introducing CartoBERT, a Natural Language Processing (NLP) model developed by Gojek’s Cartography Data Science team.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Data","slug":"data","description":"Updates on Gojek's work in Data Science and Data Engineering—from infrastructure development to our experiments with AI and ML.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"When our customers want to use our ride hailing products like GoRide and GoCar,\nthey are presented with convenient, clearly named pickup points nearby. Here’s\nan example:\n\nThis saves customers the hassle of calling the driver partner, explaining where\nthey are, what colour clothes they are wearing, and so on. Our pickup points are\ndesigned to make lives easier for both customers and driver partners.\n\nThis is possible because the pickup points shown on the app are popular pickup\nlocations around the area. What’s more, the pickup point names are displayed\nexactly how customers driver partners usually refer to them.\n\nBut how do we manage to name so many pickup points accurately, and at scale?\n\nWe use past booking locations and their associated chat logs to discover named\npickup points. As our previous research has explained, we first perform \nclustering\n[https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29] \non historical bookings to form potential pickup points, then we use a language\nmodel\n[https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03] \nto select the best name. Here, we explain how we improved upon the previous\nstatistical language model with a state-of-the-art NLP model, which makes the\nentire naming exercise fully scalable. This is the magic behind all the pickup\npoints seen on the Gojek app.\n\nHow can we learn better?\nAs explained in our previous post, our original statistical language model\nselects the best pickup point name from the most probable n-grams extracted from\nbookings text. However, such a statistical language model doesn’t ‘understand’\nthe meaning of the texts, it simply chooses phrases with high frequencies\nwithout knowing the semantics. Sometimes it throws street names, sometimes even\ncommon phrases with no information about location. We have to manually check\neverything to make sure it reflects the right POI, before it appears on the app.\n\nThis creates a challenge — especially if we want to quickly expand the\nfrictionless pickup experience to customers across in new geographies. Hence, we\ndecided to go a step further with a deep-learning NLP model that ‘understands’\nand ‘learns’ to differentiate what is a valid pickup point name.\n\nAt Gojek, we never stop thinking and always go a step further\n\nMeet CartoBERT ?\nOne of the most recent and impactful breakthroughs NLP was the publication of\nBERT[1] — a contextual language representation with transformer models — by\nGoogle in late 2018. It obtained state-of-the-art results on a wide array of NLP\ntasks. In the 2019, many NLP researches were influenced by BERT, including\nXLNet, RoBERTa, ERNIE etc.\n\nBERT Explained\nBERT, or Bidirectional Encoder Representations from Transformers, is composed of\nan embedding layer, followed by groups of transformer layers.\n\nEvery word (token) in the input sentence will first get encoded into its\nembedding representations in the embedding layer, and then go through\nbidirectional transformer encoder layers. Every encoder layer will perform the\nmulti-head attention computation on the token representation from the previous\nlayer to create a new intermediate representation, which is then output to the\nnext layer. The output from the final layer is the contextual representation of\nthe input token. A pooled sentence level representation combining all token\nrepresentations could be created if needed by specific downstream tasks.\n\nWith the final contextual representations at either token or sentence level, a\npre-trained BERT on large unlabelled text corpus, could be further extended to a\nwide variety of NLP tasks, such as text classification, question answering,\nNamed Entity Recognition (NER) etc.\n\nALBERT[2], published by Google in Sep 2019, improved on BERT with embedding\nparameter factorisation and cross layer parameter sharing to reduce the number\nof parameters (by 9 times for base model). It also uses sequence order\nprediction instead of next sentence prediction for the pre-train task. In the\npaper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE\netc), with fewer parameters.\n\nPre-train CartoBERT to learn language representation from Gojek bookings text\nInspired by ALBERT’s lightweight model and performance, we developed CartoBERT,\nGojek’s very own pickup point name recognition model, based on ALBERT’s\narchitecture.\n\nAs illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked\nbookings text corpus of about 200 million sentences. Booking text is first\npre-processed for data masking to mask all customer sensitive information,\nlanguage detection, text normalisation (including text cleaning, slang,\nabbreviation transformations, lowercase transformation and emoji removal). The\npre-processed text is used to build subword vocabularies which handles\nOut-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword\npatterns. CartoBERT tokenizer is then created with the subword vocabularies and\nfurther used to encode and tokenize the same preprocessed bookings text to form\npre-trained input files.\n\nSame as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text\nusing Masked Language Model — which predicts randomly masked tokens in input\nsentences — and Sentence Order Prediction tasks, which predicts the order of\ninput sentences pair.\n\nFine-tuning CartoBERT to extract pickup point names from Gojek bookings text\nWith the huge amount of bookings text we have at Gojek, now CartoBERT can better\n‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a\nbooking text sentence.\n\nFor every token in the input sentence, CartoBERT will output a 768-dimension\nvector (we use the default hidden layer size of the ALBERT base model in\nCartoBERT, however this is configurable) from last transformer encoder layer,\nand we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning\nin the sentence context for fine-tune step.\n\nAs illustrated in the diagram below, while fine-tuning CartoBERT for pickup\npoint name recognition, we replace the Masked Language Model and Sequence Order\nPrediction layers from CartoBERT in pre-train step with token classification\nlayer. The token classification layer learns to predict the probability of a\ntoken belonging to a pickup point name, with the final token representation\noutput from CartoBERT transformer layers, from labelled training data created\nwith bookings text sentences, and corresponding pickup point names. Here, we use\nweighted cross entropy loss to deal with class imbalance, as tokens tagged to\npickup point names are a minority.\n\n\n\nWith this, CartoBERT is fine-tuned to extract pickup point names from bookings\ntext sentences, if any.\n\nHow does the model perform?\nCartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93%\naccuracy, which is measured as the percentage of valid pick up point names out\nof generated names. With this high accuracy, we have achieved full scalability\nof automatic generation for named pickup points to quickly cover multiple\ngeographies without heavy reliance on human inputs.\n\nWhat’s next?\nWe are not stopping here and are exploring using active learning to further\nimprove CartoBERT. With active learning, we only flag out uncertain predictions,\nwhich are measured as sentence level least token probability[3] for human\nlabelling. We then use human-curated data as feedback for model learning. In\nthis way, we can improve model learning efficiency with minimum labelling\neffort.\n\nWhat’s more, with the success of CartoBERT, we are considering pre-training and\nopen sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus\nfrom wiki, news, Twitter etc. Currently, the options for open-sourced language\nmodel in Indonesia Bahasa are very limited, only pre-trained static word\nembeddings such as word2vec, fasttext etc are available. It would be beneficial\nto the community if we have a good state-of-the-art attention-based transformer\nmodel for the language. Stay tuned for more updates from the Cartography Data\nScience team. ?\n\nLeave a ? if you liked what you read. Ping me with suggestions and feedback.\n\nThanks to all the amazing people who contributed to this post: Tan Funan, Zane\nLim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur\nIzzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.\n\n\n--------------------------------------------------------------------------------\n\nReferences\n\n[1] J. Devlin [https://arxiv.org/search/cs?searchtype=author&query=Devlin%2C+J], \nM. Chang [https://arxiv.org/search/cs?searchtype=author&query=Chang%2C+M], K.\nLee [https://arxiv.org/search/cs?searchtype=author&query=Lee%2C+K], K. Toutanova\n[https://arxiv.org/search/cs?searchtype=author&query=Toutanova%2C+K]: BERT:\nPre-training of Deep Bidirectional Transformers for Language Understanding.\narXiv:1810.04805 [https://arxiv.org/abs/1810.04805] (2018)\n\n[2] Z. Lan [https://arxiv.org/search/cs?searchtype=author&query=Lan%2C+Z], M.\nChen [https://arxiv.org/search/cs?searchtype=author&query=Chen%2C+M], S. Goodman\n[https://arxiv.org/search/cs?searchtype=author&query=Goodman%2C+S], K. Gimpel\n[https://arxiv.org/search/cs?searchtype=author&query=Gimpel%2C+K], P. Sharma\n[https://arxiv.org/search/cs?searchtype=author&query=Sharma%2C+P], R. Soricut\n[https://arxiv.org/search/cs?searchtype=author&query=Soricut%2C+R]: ALBERT: A\nLite BERT for Self-supervised Learning of Language Representations. \narXiv:1909.11942 [https://arxiv.org/abs/1909.11942] (2019)\n\n[3] M.Liu [https://arxiv.org/search/cs?searchtype=author&query=Liu%2C+M], Z. Tu\n[https://arxiv.org/search/cs?searchtype=author&query=Tu%2C+Z], Z. Wang\n[https://arxiv.org/search/cs?searchtype=author&query=Wang%2C+Z], X. Xu\n[https://arxiv.org/search/cs?searchtype=author&query=Xu%2C+X]: LTP: A New Active\nLearning Strategy for Bert-CRF Based Named Entity Recognition. arXiv:2001.02524\n[https://arxiv.org/abs/2001.02524] (2020)\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] to have our latest stories\ndelivered straight to your inbox!","html":"<p>When our customers want to use our ride hailing products like GoRide and GoCar, they are presented with convenient, clearly named pickup points nearby. Here’s an example:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/180/1*msS7z4IN06LVM0XvClmmPQ.gif\" class=\"kg-image\"></figure><p>This saves customers the hassle of calling the driver partner, explaining where they are, what colour clothes they are wearing, and so on. Our pickup points are designed to make lives easier for both customers and driver partners.</p><p>This is possible because the pickup points shown on the app are popular pickup locations around the area. What’s more, the pickup point names are displayed exactly how customers driver partners usually refer to them.</p><p><strong><strong>But how do we manage to name so many pickup points accurately, and at scale?</strong></strong></p><p>We use past booking locations and their associated chat logs to discover named pickup points. As our previous research has explained, we first perform <a href=\"https://blog.gojekengineering.com/fantastic-drivers-and-how-to-find-them-a88239ef3b29\" rel=\"noopener\">clustering</a> on historical bookings to form potential pickup points, then we use a <a href=\"https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03\" rel=\"noopener\">language model</a> to select the best name. Here, we explain how we improved upon the previous statistical language model with a state-of-the-art NLP model, which makes the entire naming exercise fully scalable. This is the magic behind all the pickup points seen on the Gojek app.</p><h1 id=\"how-can-we-learn-better\">How can we learn better?</h1><p>As explained in our previous post, our original statistical language model selects the best pickup point name from the most probable n-grams extracted from bookings text. However, such a statistical language model doesn’t ‘understand’ the meaning of the texts, it simply chooses phrases with high frequencies without knowing the semantics. Sometimes it throws street names, sometimes even common phrases with no information about location. We have to manually check everything to make sure it reflects the right POI, before it appears on the app.</p><p>This creates a challenge — especially if we want to quickly expand the frictionless pickup experience to customers across in new geographies. Hence, we decided to go a step further with a deep-learning NLP model that ‘understands’ and ‘learns’ to differentiate what is a valid pickup point name.</p><p><em><em>At Gojek, we never stop thinking and always go a step further</em></em></p><h1 id=\"meet-cartobert-\">Meet CartoBERT ?</h1><p>One of the most recent and impactful breakthroughs NLP was the publication of BERT[1] — a contextual language representation with transformer models — by Google in late 2018. It obtained state-of-the-art results on a wide array of NLP tasks. In the 2019, many NLP researches were influenced by BERT, including XLNet, RoBERTa, ERNIE etc.</p><h2 id=\"bert-explained\">BERT Explained</h2><p>BERT, or Bidirectional Encoder Representations from Transformers, is composed of an embedding layer, followed by groups of transformer layers.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1226/1*qHFXdPcW_3UkLEsRJy2FRg.png\" class=\"kg-image\"></figure><p>Every word (token) in the input sentence will first get encoded into its embedding representations in the embedding layer, and then go through bidirectional transformer encoder layers. Every encoder layer will perform the multi-head attention computation on the token representation from the previous layer to create a new intermediate representation, which is then output to the next layer. The output from the final layer is the contextual representation of the input token. A pooled sentence level representation combining all token representations could be created if needed by specific downstream tasks.</p><p>With the final contextual representations at either token or sentence level, a pre-trained BERT on large unlabelled text corpus, could be further extended to a wide variety of NLP tasks, such as text classification, question answering, Named Entity Recognition (NER) etc.</p><p>ALBERT[2], published by Google in Sep 2019, improved on BERT with embedding parameter factorisation and cross layer parameter sharing to reduce the number of parameters (by 9 times for base model). It also uses sequence order prediction instead of next sentence prediction for the pre-train task. In the paper, ALBERT also outperforms BERT on standard NLP tasks/datasets (SQUAD, RACE etc), with fewer parameters.</p><h2 id=\"pre-train-cartobert-to-learn-language-representation-from-gojek-bookings-text\">Pre-train CartoBERT to learn language representation from Gojek bookings text</h2><p>Inspired by ALBERT’s lightweight model and performance, we developed CartoBERT, Gojek’s very own pickup point name recognition model, based on ALBERT’s architecture.</p><p>As illustrated below, the uncased CartoBERT is pre-trained on Gojek’s own masked bookings text corpus of about 200 million sentences. Booking text is first pre-processed for data masking to mask all customer sensitive information, language detection, text normalisation (including text cleaning, slang, abbreviation transformations, lowercase transformation and emoji removal). The pre-processed text is used to build subword vocabularies which handles Out-Of-Vocabulary (OOV) tokens that could be decomposed to frequent subword patterns. CartoBERT tokenizer is then created with the subword vocabularies and further used to encode and tokenize the same preprocessed bookings text to form pre-trained input files.</p><p>Same as ALBERT, the model is pre-trained to ‘understand’ Gojek’s bookings text using Masked Language Model — which predicts randomly masked tokens in input sentences — and Sentence Order Prediction tasks, which predicts the order of input sentences pair.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1386/1*STaqWssxlYPhFaDulLwJzg.png\" class=\"kg-image\"></figure><h2 id=\"fine-tuning-cartobert-to-extract-pickup-point-names-from-gojek-bookings-text\">Fine-tuning CartoBERT to extract pickup point names from Gojek bookings text</h2><p>With the huge amount of bookings text we have at Gojek, now CartoBERT can better ‘understand’ past bookings text. Theoretically, it ‘understands’ every word of a booking text sentence.</p><p>For every token in the input sentence, CartoBERT will output a 768-dimension vector (we use the default hidden layer size of the ALBERT base model in CartoBERT, however this is configurable) from last transformer encoder layer, and we use that to represent CartoBERT’s ‘understanding’ of the token’s meaning in the sentence context for fine-tune step.</p><p>As illustrated in the diagram below, while fine-tuning CartoBERT for pickup point name recognition, we replace the Masked Language Model and Sequence Order Prediction layers from CartoBERT in pre-train step with token classification layer. The token classification layer learns to predict the probability of a token belonging to a pickup point name, with the final token representation output from CartoBERT transformer layers, from labelled training data created with bookings text sentences, and corresponding pickup point names. Here, we use weighted cross entropy loss to deal with class imbalance, as tokens tagged to pickup point names are a minority.</p><p></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1526/1*WO1LRHQPqAqzpLBMMl-NuA.png\" class=\"kg-image\"></figure><p>With this, CartoBERT is fine-tuned to extract pickup point names from bookings text sentences, if any.</p><h2 id=\"how-does-the-model-perform\">How does the model perform?</h2><p>CartoBERT gives a lift of more than 25% in pickup point name accuracy to ~93% accuracy, which is measured as the percentage of valid pick up point names out of generated names. With this high accuracy, we have achieved full scalability of automatic generation for named pickup points to quickly cover multiple geographies without heavy reliance on human inputs.</p><h1 id=\"what-s-next\">What’s next?</h1><p>We are not stopping here and are exploring using active learning to further improve CartoBERT. With active learning, we only flag out uncertain predictions, which are measured as sentence level least token probability[3] for human labelling. We then use human-curated data as feedback for model learning. In this way, we can improve model learning efficiency with minimum labelling effort.</p><p>What’s more, with the success of CartoBERT, we are considering pre-training and open sourcing a general Indonesia Bahasa ALBERT model with Indonesia open corpus from wiki, news, Twitter etc. Currently, the options for open-sourced language model in Indonesia Bahasa are very limited, only pre-trained static word embeddings such as word2vec, fasttext etc are available. It would be beneficial to the community if we have a good state-of-the-art attention-based transformer model for the language. Stay tuned for more updates from the Cartography Data Science team. ?</p><p>Leave a ? if you liked what you read. Ping me with suggestions and feedback.</p><p>Thanks to all the amazing people who contributed to this post: Tan Funan, Zane Lim, Dang Le, Lijuan Chia, Bani Widyatmiko, Maureen Koha, Ringga Saputra, Nur Izzahudinr, Sandya Ardi, Yeni Primasari, Ardya Dipta.</p><hr><p><strong>References</strong></p><p>[1] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Devlin%2C+J\" rel=\"noopener\">J. Devlin</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chang%2C+M\" rel=\"noopener\">M. Chang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lee%2C+K\" rel=\"noopener\">K. Lee</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Toutanova%2C+K\" rel=\"noopener\">K. Toutanova</a>: BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.<br><a href=\"https://arxiv.org/abs/1810.04805\" rel=\"noopener\">arXiv:1810.04805</a> (2018)</p><p>[2] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Lan%2C+Z\" rel=\"noopener\">Z. Lan</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Chen%2C+M\" rel=\"noopener\">M. Chen</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Goodman%2C+S\" rel=\"noopener\">S. Goodman</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Gimpel%2C+K\" rel=\"noopener\">K. Gimpel</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Sharma%2C+P\" rel=\"noopener\">P. Sharma</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Soricut%2C+R\" rel=\"noopener\">R. Soricut</a>: ALBERT: A Lite BERT for Self-supervised Learning of Language Representations. <a href=\"https://arxiv.org/abs/1909.11942\" rel=\"noopener\">arXiv:1909.11942</a> (2019)</p><p>[3] <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Liu%2C+M\" rel=\"noopener\">M.Liu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Tu%2C+Z\" rel=\"noopener\">Z. Tu</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Wang%2C+Z\" rel=\"noopener\">Z. Wang</a>, <a href=\"https://arxiv.org/search/cs?searchtype=author&amp;query=Xu%2C+X\" rel=\"noopener\">X. Xu</a>: LTP: A New Active Learning Strategy for Bert-CRF Based Named Entity Recognition. <a href=\"https://arxiv.org/abs/2001.02524\" rel=\"noopener\">arXiv:2001.02524</a> (2020)</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> to have our latest stories delivered straight to your inbox!</p>","url":"https://gojek-ghost.zysk.in/how-gojek-uses-nlp-to-name-pickup-locations-at-scale-2/","canonical_url":null,"uuid":"51dd4492-b728-4b37-8c7f-41fd41619f7a","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb0f8af5524cd001e7391f4","reading_time":6}},{"node":{"id":"Ghost__Post__5e8efa6b5cbf39001e28e7fa","title":"How We Do Delightful Customer Pickups","slug":"how-we-do-delightful-customer-pickups","featured":false,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg","excerpt":"The little things that make getting where you need to go that much better.","custom_excerpt":"The little things that make getting where you need to go that much better.","visibility":"public","created_at_pretty":"09 April, 2020","published_at_pretty":"07 April, 2020","updated_at_pretty":"12 May, 2020","created_at":"2020-04-09T16:05:23.000+05:30","published_at":"2020-04-07T09:30:00.000+05:30","updated_at":"2020-05-12T11:51:53.000+05:30","meta_title":"How We Do Delightful Customer Pickups","meta_description":"The little things that make getting where you need to go that much better.","og_description":null,"og_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg","og_title":null,"twitter_description":null,"twitter_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-Do-Delightful-Customer-Pickups-.jpg","twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Did you know Gojek’s Transport team (which oversees the ride hailing products of\nour SuperApp) has a ‘Pickup Experience’ pod?\n\nNo, we’re not helping you get better dates, you’re on your own there. ?\n\nI’m talking about the customer pickup experience on booking a ride with us on\nGoRide (2-wheeler taxis) and GoCar (4-wheeler taxis).\n\nYou know the feeling. The feeling of going to a big mall in an unfamiliar place,\ntrying to book a ride, but not knowing which is the most convenient pickup spot.\n\nDo I try the north entrance? Oh wait, there’s a one-way there, might need to\nwait a long while.\n\nAh, I got a driver but I don’t know how to tell her which side I am on. Wait,\nthere’s a Starbucks here. I’m in front of Starbucks!\n\nOh, you’re near McDonalds? Wait, maybe I can just come to you. But, how do I get\nto McDonalds now? ?‍♂️\n\n> Yeah, we’ve all been there.\nPickup points may seem like trivial things, but when you operate on a scale of\nmillions of orders per day, smoother pickups which require less coordination\n(and time) mean our customers get places faster, and our driver partners earn\nmore.\n\nIn this post, we’ll talk about how Gojek improved the pickup experience for\ncustomers and partners using Points of Interest (POI) — like a mall — and then\nstreamlined pickups around these areas using Pre-Defined Pickup Points (PPOI).\n\nThe Breakdown\nMany of the cities Gojek operates in are highly congested urban settings, where\nlocations are often not properly labelled on maps and pickup points can be hard\nto determine. This initially led to a lot of additional coordination between\npartners and customers over the phone, which is not the best use of anyone’s\ntime.\n\nIn order to streamline this process, we first began identifying POIs in popular\nareas. Once this was done, we located areas around these landmarks where lots of\npickups happened, and began suggesting them as pre-defined pickup points to our\nusers. Making these suggestions within the app was the first step in reducing\nthe cognitive load associated with pickups. (If you’d like to know how we\nidentified these spots. Check out this post\n[https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03]\n).\n\nOur next step in the process was to provide customers some details about the\nquality of these locations. We started showing them more details about the\npickup points near them—are they sheltered from weather, in case the driver\nneeds a couple of minutes to reach them? If it’s night, is it well-lit?\n\nBut wait, there’s more…\nPPOIs have contributed hugely to streamlining pickups and making life easier for\nour stakeholders. But what if the customer is new to an area and cannot easily\nidentify the locations we’re suggesting? Could we do more?\n\nOf course we could.\n\nUp until recently, pickup points showed up as map pins on the customer app based\non their location. We decided to add some additional functionality, starting\nwith images.\n\nIf you’re making a booking from an unfamiliar location, or have unreliable GPS\nconnectivity, how do you know you’re at the correct point suggested by the Gojek\napp? By adding images to the corresponding pins, we gave our customers the\nadvantage of being able to visually confirm they were in the right place.\n\nWith the two-factor confirmation of GPS pin and visual, our customers could\nconfirm their pickup point, and wait in peace. Not bad, eh?\n\nAt this point, our app could cater reliably to most of our users, whether it was\nregulars who already had a lot of context on ideal pickup spots or users who\nwere new to an area. However, we wanted to go even further to make a more\nairtight solution. What if a user was near a pickup point, but did not know how\nto reach it?\n\nThis was a problem with significant impact, as a user walking a short distance\nto a nearby well-served pickup point would be significantly faster than a driver\npartner navigating to an unfamiliar location nearby. Driver partners would\npotentially run into obstacles like one ways, or areas in Jakarta where odd-even\nrules are implemented.\n\nHowever, we didn’t want to put the onus of navigating to the PPOI on the user.\nThe least we could do in return for their cooperation was help them with\ndirections.\n\nSo that’s what we did.\n\nBeing able to leverage technology to help users book rides is an achievement in\nitself, one we’re proud of. But stopping at the solution is not how Super Apps\nare built. We exist to solve problems, and then delighting our users further\nthrough ease of use.\n\nFrom vague pickup points defined by often inaccurate GPS pings, our pickup\nexperience had evolved to the point where a user with zero knowledge of an area\ncould easily identify the best location nearby for smooth pickup, understand\nwhether it was convenient to wait at, navigate there, and confirm their arrival\nby sight. Utter delight. ?\n\nThat said, all our bookings don’t happen in dense urban areas with defined\nPPOIs. We’re working towards having PPOIs in most major areas, but sometimes,\ngood old chat-based coordination is still the default fallback.\n\nWe did learn a thing or two from our experience of putting images on PPOIs, so\nwe worked with Gojek’s Platform team (which handles our chat functionality), and\nbaked in the ability to share images in Driver-to-Customer chat. Even if all\nelse fails, our customers could still click a picture of their current location,\nand share it with our partners to help them identify it.\n\nIt’s safe to say that putting in the effort to help our customers get to their\nrides easily has paid off.\n\n> In the areas where we’ve deployed these features, we’ve seen pickup accuracy\ndouble on average. ✌\nWhat’s next?\nThere’s more?\n\nThere’s always more.\n\nEven as we continue to roll out this functionality across more regions we\noperate in, we’re working towards making it better—by allowing our users to give\nus feedback on how accurate our images/directions were, and even upload PPOI\nimages themselves.\n\nWe’ll keep you updated on how we fare. In the meantime, follow us for more\nstories, and sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]! ?","html":"<p>Did you know Gojek’s Transport team (which oversees the ride hailing products of our SuperApp) has a ‘Pickup Experience’ pod?</p><p><em><em>No, we’re not helping you get better dates, you’re on your own there. </em></em>?</p><p>I’m talking about the customer pickup experience on booking a ride with us on GoRide (2-wheeler taxis) and GoCar (4-wheeler taxis).</p><p>You know the feeling. The feeling of going to a big mall in an unfamiliar place, trying to book a ride, but not knowing which is the most convenient pickup spot.</p><p><em><em>Do I try the north entrance? Oh wait, there’s a one-way there, might need to wait a long while.</em></em></p><p><em><em>Ah, I got a driver but I don’t know how to tell her which side I am on. Wait, there’s a Starbucks here. I’m in front of Starbucks!</em></em></p><p><em><em>Oh, you’re near McDonalds? Wait, maybe I can just come to you. But, how do I get to McDonalds now?</em></em> ?‍♂️</p><blockquote>Yeah, we’ve all been there.</blockquote><p>Pickup points may seem like trivial things, but when you operate on a scale of millions of orders per day, smoother pickups which require less coordination (and time) mean our customers get places faster, and our driver partners earn more.</p><p>In this post, we’ll talk about how Gojek improved the pickup experience for customers and partners using Points of Interest (POI) — like a mall — and then streamlined pickups around these areas using Pre-Defined Pickup Points (PPOI).</p><h2 id=\"the-breakdown\">The Breakdown</h2><p>Many of the cities Gojek operates in are highly congested urban settings, where locations are often not properly labelled on maps and pickup points can be hard to determine. This initially led to a lot of additional coordination between partners and customers over the phone, which is not the best use of anyone’s time.</p><p>In order to streamline this process, we first began identifying POIs in popular areas. Once this was done, we located areas around these landmarks where lots of pickups happened, and began suggesting them as pre-defined pickup points to our users. Making these suggestions within the app was the first step in reducing the cognitive load associated with pickups. (If you’d like to know how we identified these spots. Check out <a href=\"https://blog.gojekengineering.com/how-i-met-my-gojek-driver-without-a-single-call-95041f4fdd03\" rel=\"noopener\">this post</a>).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do.gif\" class=\"kg-image\"></figure><p>Our next step in the process was to provide customers some details about the quality of these locations. We started showing them more details about the pickup points near them—are they sheltered from weather, in case the driver needs a couple of minutes to reach them? If it’s night, is it well-lit?</p><h2 id=\"but-wait-there-s-more-\">But wait, there’s more…</h2><p>PPOIs have contributed hugely to streamlining pickups and making life easier for our stakeholders. But what if the customer is new to an area and cannot easily identify the locations we’re suggesting? Could we do more?</p><p>Of course we could.</p><p>Up until recently, pickup points showed up as map pins on the customer app based on their location. We decided to add some additional functionality, starting with images.</p><p>If you’re making a booking from an unfamiliar location, or have unreliable GPS connectivity, how do you know you’re at the correct point suggested by the Gojek app? By adding images to the corresponding pins, we gave our customers the advantage of being able to visually confirm they were in the right place.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do-1.gif\" class=\"kg-image\"></figure><p>With the two-factor confirmation of GPS pin and visual, our customers could confirm their pickup point, and wait in peace. Not bad, eh?</p><p>At this point, our app could cater reliably to most of our users, whether it was regulars who already had a lot of context on ideal pickup spots or users who were new to an area. However, we wanted to go even further to make a more airtight solution. What if a user was near a pickup point, but did not know how to reach it?</p><p>This was a problem with significant impact, as a user walking a short distance to a nearby well-served pickup point would be significantly faster than a driver partner navigating to an unfamiliar location nearby. Driver partners would potentially run into obstacles like one ways, or areas in Jakarta where odd-even rules are implemented.</p><p>However, we didn’t want to put the onus of navigating to the PPOI on the user. The least we could do in return for their cooperation was help them with directions.</p><p>So that’s what we did.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/How-We-do-2.gif\" class=\"kg-image\"></figure><p>Being able to leverage technology to help users book rides is an achievement in itself, one we’re proud of. But stopping at the solution is not how Super Apps are built. We exist to solve problems, and then delighting our users further through ease of use.</p><p>From vague pickup points defined by often inaccurate GPS pings, our pickup experience had evolved to the point where a user with zero knowledge of an area could easily identify the best location nearby for smooth pickup, understand whether it was convenient to wait at, navigate there, and confirm their arrival by sight. Utter delight. ?</p><p>That said, all our bookings don’t happen in dense urban areas with defined PPOIs. We’re working towards having PPOIs in most major areas, but sometimes, good old chat-based coordination is still the default fallback.</p><p>We did learn a thing or two from our experience of putting images on PPOIs, so we worked with Gojek’s Platform team (which handles our chat functionality), and baked in the ability to share images in Driver-to-Customer chat. Even if all else fails, our customers could still click a picture of their current location, and share it with our partners to help them identify it.</p><p>It’s safe to say that putting in the effort to help our customers get to their rides easily has paid off.</p><blockquote><em><em>In the areas where we’ve deployed these features, we’ve seen pickup accuracy double on average. <em>✌</em></em></em></blockquote><h2 id=\"what-s-next\">What’s next?</h2><p><em><em>There’s more?</em></em></p><p><em><em>There’s always more.</em></em></p><p>Even as we continue to roll out this functionality across more regions we operate in, we’re working towards making it better—by allowing our users to give us feedback on how accurate our images/directions were, and even upload PPOI images themselves.</p><p>We’ll keep you updated on how we fare. In the meantime, follow us for more stories, and <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter</a>! ?</p>","url":"https://gojek-ghost.zysk.in/how-we-do-delightful-customer-pickups/","canonical_url":null,"uuid":"96625509-a74c-4bd5-a090-f45a04166e62","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e8efa6b5cbf39001e28e7fa","reading_time":5}},{"node":{"id":"Ghost__Post__5eb128b6f7c7da001effcd8c","title":"Gojek’s Best Practices to Work From Home [Beta]","slug":"gojeks-best-practices-to-work-from-home-beta","featured":true,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_g1gfRNDqLKJWtAwURoFgaw.jpg","excerpt":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","custom_excerpt":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"16 March, 2020","updated_at_pretty":"02 June, 2020","created_at":"2020-05-05T14:19:58.000+05:30","published_at":"2020-03-16T09:30:00.000+05:30","updated_at":"2020-06-02T12:21:45.000+05:30","meta_title":"Gojek’s Best Practices to Work From Home [Beta]","meta_description":"How to come to terms with ‘working from home’, and a few guidelines to help with the transition.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek—explained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Kevin Aluwi\n\nIt’s been a trying couple of weeks since the Coronavirus outbreak. As\ngovernments and authorities encourage social distancing, many companies — Gojek\nincluded — have started to put a heightened emphasis on working from home. As an\norganization with a distributed workforce, we have offices in Indonesia,\nSingapore, Vietnam, Thailand, Philippines, and India, a remote strategy has\nalways been embedded in our DNA. This post details some lessons and what we\nthink are ‘best practices’ to follow in a Work from home (WFH) situation.\n\nAt the outset, it’s important to call out a key point: During this time of\nuncertainty, employees may not be at their productive best. There’s a lot of\nanxiety with family and friends, and rightly so. WFH requires high \nAccountability, but also Empathy and Trust. Be mindful, this is a stressful time\nfor everyone. Trust your colleagues to do the best they can given the times.\n\nBefore we begin — context\nGojek has always been mindful of our employees’ health and wellbeing. We have\nunlimited sick leaves, and encourage employees to work where and when they are\nat their productive best. We have proven success — with functional leaders\nworking fully remotely without compromising on effectively launching org-wide\ninitiatives: career ladders, new hiring programs, even setting up an entire new\nfunction. But this is by all means not a comprehensive or a definitive guide.\nThink of this as a ‘beta’ document summarising some lessons in a bid to get\nfeedback from you, our readers. We’re putting this out there so we can learn\ntogether to do better.\n\nIf you think we’ve missed out on something, please leave a comment — will help\nus a long way in fine-tuning our own practices. These are trying times, and we\nwant to do what is right for everyone.\n\n(1)The right environment\nOffice spaces provide designated areas employees start associating with work and\nfocus. This may not be the case in a home environment, so it is important to\nrecreate this space. Some ideal prerequisites include an area with plenty of\nlight, minimal distractions and a comfortable desk and chair.\n\nWorking from home also potentially involves sharing the space with other family\nmembers / housemates. It’s important to set guidelines to indicate when you are\nat work and not to be disturbed — one team member for example set up a plush toy\non a desk as a makeshift ‘Do Not Disturb’ sign!\n\nOnce a setup is established, don’t neglect the importance of taking breaks. The\nabsence of colleagues and social interaction should not lead to long\nuninterrupted sessions. Set a timer to alert you if you’ve been continuously at\nyour desk for over two hours. Take short breaks to stretch your legs. Use the\ntime to also spend time with family, or work on personal projects that require\nthe occasional check-in! There’s a silver lining to every scenario :)\n\nThis whole point might seem obvious and rather trivial, but is critical when you\nwant focus, and don’t have your colleagues to ‘pair’ with you and nudge you.\n\n(2) The right tools\nEnsure the coordination tools used by your organisation / team are installed on\nyour laptop and working properly. At Gojek we use Slack for messaging, Zoom for\nvideo conferencing, and Asana and JIRA for project coordination. Here are a few\nquick tips from our WFH Best Practices\n[https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing] \non how best to use them in a remote work scenario:\n\nOver communicate: Set clear expectations and create WFH Rules of Engagement for\nyour team. What cadences need to be synchronous vs. async? Set your Slack status\nto away every time you leave the computer for a break, and update it once you’re\nback. Clearly request responses to critical communications you send, and do the\nsame to confirm you’ve received an update (even Slack’s emoji responses will do,\nas long as there is recorded acknowledgement).\n\nDocument everything: Meetings may become increasingly asynchronous, so it is\nimportant to document all the items discussed and assigned. Record key decisions\nin a centralized decision log. This can be done via written notes hosted in a\ncommon cloud folder, as well as tasks on Asana for accountability. Minimise\ncommunication gaps.\n\nChoose the most high-context communication medium available: A lot gets lost in\ntranslation when you don’t have visual cues. Use video conferencing whenever\npossible. Failing video, (spotty connection) default to a phone call, then chat.\nIn chat, don’t hesitate to use emojis liberally to convey your tone! ?\n\nPro tip: In Zoom preferences, set the option to video muted/off as the default —\nthen manually enable them once you join a meeting. It can help avoid a few\nfacepalms. Not everyone has the perfect Instagram workspace at home, so Zoom’s\nbackground masks\n[https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background] \nwill help.\n\n(3) The right mindset\nThe shift to remote will be alien for a lot of us. Be respectful and considerate\n— everyone’s doing the best they can. Set up core work hours when the entire\nteam is expected to be available and clearly define these on a calendar. Be\nmindful of each other’s calendars and schedule sensitively so all concerned\nparties can extract the maximum output from their workday.\n\nQuantify what is being done at the end of each day, and by whom. Transparency is\nkey here. You can shape this right at the beginning during daily team meetings.\nWhen social interactions with colleagues are virtual, you as a manager, or an\nemployer, tend to worry about accountability. Maintain a notepad of things you\ndid, what you’re working on, when others can expect work to be delivered, and\nwhen you will respond to messages or requests. This reduces anxiety and helps\nyou plan your day. In the midst of all this, don’t forget to respect your own\ntime as well. Define your working hours, and stop once they are up.\n\nIt’s equally easy to also overwork yourself when working from home. Be mindful\nof your on-screen time.\n\nSnackable hacks\nWe spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:\n\n * If you find your attention span dwindling, take time off, browse your\n   favorite social media app, go for a walk — get that Vitamin D in, talk to a\n   friend/family member etc…\n * Eat on time, eat healthy — set timelines for this on your calendar so you’re\n   not skipping meals.\n * Create a mini-team virtual group just for social interactions that do not\n   discuss work — movies, books, art, interesting articles etc.\n * Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you\n   eat. Do not sway here. Did we say hydrate? Hydrate.\n * Team calls should start with something fun — a new fact you learnt, an\n   interesting fact you learnt, or something interesting going on in team\n   member’s lives outside of work.\n * Change into a separate set of clothes during core working hours, even if they\n   are just a different set of comfortable PJs. It helps delineate “work time”\n   from “waking up” or “me time” when both are happening in the same place. It’s\n   tempting to work in bed while wearing the clothes you slept in, but avoid\n   this!\n * Your calendar is sacred — set timers for food breaks, leisure walks, time\n   off, family obligations etc.\n * Call out good work! Do this more often than usual and with consistency. Start\n   your meetings with kudos.\n\nWe’re trying to get better\nThis is an important shift in how organisations get work done. While this guide\nis a foundation to help us figure things out, we don’t have all the answers.\n\nIf you have significant experience with remote work\n[https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing]\n, we’d like to hear your thoughts. Feel free to drop into our comments.\n\nThat’s all from us for now, stay safe!\n\nP.S. Empathy & Trust — The two key words you want to keep in mind. ✌️","html":"<p>By Kevin Aluwi</p><p>It’s been a trying couple of weeks since the Coronavirus outbreak. As governments and authorities encourage social distancing, many companies — Gojek included — have started to put a heightened emphasis on working from home. As an organization with a distributed workforce, we have offices in Indonesia, Singapore, Vietnam, Thailand, Philippines, and India, a remote strategy has always been embedded in our DNA. This post details some lessons and what we think are ‘best practices’ to follow in a Work from home (WFH) situation.</p><p><em><em>At the outset, it’s important to call out a key point: During this time of uncertainty, employees may not be at their productive best. There’s a lot of anxiety with family and friends, and rightly so. WFH requires high </em></em><strong><strong><em><em>Accountability</em></em></strong></strong><em><em>, but also </em></em><strong><strong><em><em>Empathy</em></em></strong></strong><em><em> and </em></em><strong><strong><em><em>Trust</em></em></strong></strong><em><em>. Be mindful, this is a stressful time for everyone. Trust your colleagues to do the best they can given the times.</em></em></p><h3 id=\"before-we-begin-context\">Before we begin — context</h3><p>Gojek has always been mindful of our employees’ health and wellbeing. We have unlimited sick leaves, and encourage employees to work where and when they are at their productive best. <strong><strong>We have proven success</strong></strong> — with functional leaders working fully remotely without compromising on effectively launching org-wide initiatives: career ladders, new hiring programs, even setting up an entire new function. But this is by all means <strong><strong>not</strong></strong> a comprehensive or a definitive guide. Think of this as a ‘beta’ document summarising some lessons in a bid to get feedback from you, our readers. We’re putting this out there so we can learn together to do better.</p><p><em><em>If you think we’ve missed out on something, please leave a comment — will help us a long way in fine-tuning our own practices. These are trying times, and we want to do what is right for everyone.</em></em></p><h3 id=\"-1-the-right-environment\">(1)The right environment</h3><p>Office spaces provide designated areas employees start associating with work and focus. This may not be the case in a home environment, so it is important to recreate this space. Some ideal prerequisites include an area with plenty of light, minimal distractions and a comfortable desk and chair.</p><p>Working from home also potentially involves sharing the space with other family members / housemates. It’s important to set guidelines to indicate when you are at work and not to be disturbed — one team member for example set up a plush toy on a desk as a makeshift ‘Do Not Disturb’ sign!</p><p>Once a setup is established, don’t neglect the importance of taking breaks. The absence of colleagues and social interaction should not lead to long uninterrupted sessions. Set a timer to alert you if you’ve been continuously at your desk for over two hours. Take short breaks to stretch your legs. Use the time to also spend time with family, or work on personal projects that require the occasional check-in! There’s a silver lining to every scenario :)</p><p><strong><strong>This whole point might seem obvious and rather trivial, but is critical when you want focus, and don’t have your colleagues to ‘pair’ with you and nudge you.</strong></strong></p><h3 id=\"-2-the-right-tools\">(2) The right tools</h3><p>Ensure the coordination tools used by your organisation / team are installed on your laptop and working properly. At Gojek we use Slack for messaging, Zoom for video conferencing, and Asana and JIRA for project coordination. Here are a few quick tips from our <a href=\"https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing\" rel=\"noopener\">WFH Best Practices</a> on how best to use them in a remote work scenario:</p><p><strong><strong>Over communicate:</strong></strong> Set clear expectations and create WFH Rules of Engagement for your team. What cadences need to be synchronous vs. async? Set your Slack status to away every time you leave the computer for a break, and update it once you’re back. Clearly request responses to critical communications you send, and do the same to confirm you’ve received an update (even Slack’s emoji responses will do, as long as there is recorded acknowledgement).</p><p><strong><strong>Document everything:</strong></strong> Meetings may become increasingly asynchronous, so it is important to document all the items discussed and assigned. Record key decisions in a centralized decision log. This can be done via written notes hosted in a common cloud folder, as well as tasks on Asana for accountability. Minimise communication gaps.</p><p><strong><strong>Choose the most high-context communication medium available:</strong></strong> A lot gets lost in translation when you don’t have visual cues. Use <strong><strong>video</strong></strong> conferencing whenever possible. Failing video, (spotty connection) default to a phone call, then chat. In chat, don’t hesitate to use emojis liberally to convey your tone! ?</p><p><strong><strong><em><em>Pro tip:</em></em></strong></strong> In Zoom preferences, set the option to<strong><strong> video</strong></strong> <strong><strong>muted/off </strong></strong>as the default — then manually enable them once you join a meeting. It can help avoid a few facepalms. Not everyone has the perfect Instagram workspace at home, so <a href=\"https://support.zoom.us/hc/en-us/articles/204674889-Zoom-Rooms-Customized-Background\" rel=\"noopener\">Zoom’s background masks</a> will help.</p><h3 id=\"-3-the-right-mindset\">(3) The right mindset</h3><p>The shift to remote will be alien for a lot of us. Be respectful and considerate — everyone’s doing the best they can. Set up core work hours when the entire team is expected to be available and clearly define these on a calendar. Be mindful of each other’s calendars and schedule sensitively so all concerned parties can extract the maximum output from their workday.</p><p>Quantify what is being done at the end of each day, and by whom. Transparency is key here. You can shape this right at the beginning during daily team meetings. When social interactions with colleagues are virtual, you as a manager, or an employer, tend to worry about accountability. Maintain a notepad of things you did, what you’re working on, when others can expect work to be delivered, and when you will respond to messages or requests. This reduces anxiety and helps you plan your day. In the midst of all this, don’t forget to respect your own time as well. Define your working hours, and stop once they are up.</p><p><em>It’s equally easy to also overwork yourself when working from home. Be mindful of your on-screen time.</em></p><h3 id=\"snackable-hacks\">Snackable hacks</h3><p>We spoke to a bunch of Gojek folks to get some of their actionable WFH hacks:</p><ul><li>If you find your attention span dwindling, take time off, browse your favorite social media app, go for a walk — get that Vitamin D in, talk to a friend/family member etc…</li><li>Eat on time, eat healthy — set timelines for this on your calendar so you’re not skipping meals.</li><li>Create a mini-team virtual group just for social interactions that do not discuss work — movies, books, art, interesting articles etc.</li><li>Hydrate. Stretch every 30 minutes. Hydrate. Have strict timelines on when you eat. Do not sway here. Did we say hydrate? Hydrate.</li><li>Team calls should start with something fun — a new fact you learnt, an interesting fact you learnt, or something interesting going on in team member’s lives outside of work.</li><li>Change into a separate set of clothes during core working hours, even if they are just a different set of comfortable PJs. It helps delineate “work time” from “waking up” or “me time” when both are happening in the same place. It’s tempting to work in bed while wearing the clothes you slept in, but avoid this!</li><li>Your calendar is sacred — set timers for food breaks, leisure walks, time off, family obligations etc.</li><li>Call out good work! Do this more often than usual and with consistency. Start your meetings with kudos.</li></ul><h3 id=\"we-re-trying-to-get-better\">We’re trying to get better</h3><p>This is an important shift in how organisations get work done. While this guide is a foundation to help us figure things out, we don’t have all the answers.</p><p>If you have significant experience with <a href=\"https://docs.google.com/document/d/1TPAKV-AowBpODVul5cL73mKN5caN6RQf0wvV_6O5Ees/edit?usp=sharing\" rel=\"noopener\">remote work</a>, we’d like to hear your thoughts. Feel free to drop into our comments.</p><p>That’s all from us for now, stay safe!</p><p>P.S. Empathy &amp; Trust — The two key words you want to keep in mind. ✌️</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/06/1_Yigf1nGxRKjzV7vIC_YkYg-1.png\" class=\"kg-image\"></figure>","url":"https://gojek-ghost.zysk.in/gojeks-best-practices-to-work-from-home-beta/","canonical_url":null,"uuid":"9c6ef422-8c4d-4d75-a8a4-420f3ab462e3","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128b6f7c7da001effcd8c","reading_time":5}},{"node":{"id":"Ghost__Post__5ecb65447aa22c4066f83f64","title":"Speed Up Your Workflow With IntelliJ","slug":"speed-up-your-workflow-with-intellij","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_ygP4I6VnLARQODtQvTzheQ.jpeg","excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","custom_excerpt":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","visibility":"public","created_at_pretty":"25 May, 2020","published_at_pretty":"27 January, 2020","updated_at_pretty":"25 May, 2020","created_at":"2020-05-25T11:57:16.000+05:30","published_at":"2020-01-27T09:30:00.000+05:30","updated_at":"2020-05-25T12:07:15.000+05:30","meta_title":"Speed Up Your Workflow With IntelliJ","meta_description":"Tips and tricks to maximise the features provided in IntelliJ and become a productivity ninja","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"I do the bulk of my test automation development in Kotlin/Java or Python\nlanguages. After the programming language, a very important component for the\ndev workflow is a good IDE.\n\nPurists generally rave about the use of Editors like Sublime, VSCode or even use\nof Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or\nEclipse. However, the truth is most modern devs in this day and age use/prefer\nIDE’s for the host of convenience features, speed, and flexibility they provide.\n\nPersonally, I am a big fan of IDE’s provided by Jetbrains\n[https://www.jetbrains.com/], and they are generally my tools of choice—saving\nme a ton of time while performing refactoring and greatly decreasing development\ntime.\n\n> Not convinced yet?\nIf you’ve used IntelliJ, then ppen up IntelliJ > Help > Productivity Guide and\nsee how much time it has saved you.\n\nThis is my breakdown in the past two years:\n\nHowever,\n\n * Do we really extract the maximum juice out of these tools?\n * How many of the IDE’s features do we really use on a day-to-day basis?\n\nWell, fret not. This post will share some awesome tips that you can also follow\nto become more productive with your editors. I got to know some of these\nfeatures when the prolific Dev evangelist Hadi Hariri [https://hadihariri.com/] \nfrom Jetbrains visited Gojek [https://www.gojek.io/] Bengaluru and shared these\nduring a meetup.\n\nTo demonstrate these features, I would be using appium Java client\n[https://github.com/appium/java-client] project but the same features can be\napplied in any Java/Kotlin (IntelliJ IDEA) project of your choice or Python\nproject (In Pycharm).\n\nIdeavim\nTo start with, did you know all Jetbrains editors come with a very good VIM\nsupport via IdeaVim plugin? Vim commands are amazing.\n\nOnce you get used to them, your editing and code navigation speed is easily\nmultiplied 2X and it’s so easy to use it within IntelliJ. If you want to know\nVIM basics, I wrote a post\n[https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/] \non it some time back.\n\nTo install this plugin, either opt for it when freshly installing IntelliJ or Go\nto preferences > Plugins and search for IdeaVim in marketplace, don't worry, you\ncan always temporarily disable it and practice first before starting to use it\nin your day to day workflow.\n\nThe most common commands that you should be aware of are mentioned right when\nyou open it.\n\nI use the IntelliJ IDEA classic keybindings, however, you should be able to\nquickly find the short cuts for these operations in the binding of your choice ( \nLook into Preferences > Keymap)\n\nSearch Shortcuts\nDouble Shift brings up the search console and this is the single place to either\n\n * Search Classes or Files (Shift + Cmd + N): with certain names in your project\n   or\n * Perform any action (Shift + Cmd + A): for example, refactoring certain\n   components inside a class\n\nYou can also easily learn the keyboard shortcuts for the common operations\nwithin the editor by seeing the shortcut right beside the command on this\nscreen. Trust me, the investment in learning these has huge payoffs.\n\n> The number of times that you avoid using the trackpad or mouse is one time less \nthat you have to context switch while coding. Believe me, that makes a\ndifference.\nSearch by file initials\nWhile trying to find a file, often we just know the name vaguely by memory. In\nSearch, it is sufficient to just mention the initials of the file and IntelliJ\nwill list out all the files which match that criteria\n\nLet’s say, for example, I want to search for all test files which start with A \nand have Test suffix, I can just enter ATes and see all the file names which\nmatch this.\n\nSearch method inside a file matching a pattern\nWhat if I want to search for all methods having find keyword inside test files\nnamed AndTes?\n\nWell you just use a dot . in these search queries and you can easily search for\neven methods inside classes based on partial pattern search.\n\nIn this case, AndTest.find would show all the methods with find keyword in them.\nNeat huh?\n\nSearch for file names inside a particular folder\nIn the example below, I am searching for file names starting with KeyE under \nnativekey folder by separating them with a forward slash /\n\nnativekey/KeyE\n\nNavigating options all within the search\nIf you type a forward slash / in the search bar, you can see different IDE\nactions that you can take right there.\n\nFind usages\nYou can quickly find out usages of a given function, class, interface, etc by\nhitting Cmd + B, This saves a ton of time over manually searching for code. You\ncan either navigate right inside the result pop up or open it in dedicated\nwindow by selecting Open in find window.\n\nWhat if I want to see all the classes and methods that are present in \nAndroidTest.java class?\n\nWe can open the Structure tab (Cmd + 7) and glance at all the available methods\nwith options to even show anonymous classes/lambdas inside the class.\n\nNow, this could be very useful when you have a long class and want to see all\nthe methods and then quickly navigate to them. Too many methods might hint at a\npotential refactoring candidate.\n\nSwitcher\nTo switch between open files and open tabs\n\nUse Ctrl + Tab and then to move down continue pressing Ctrl + Tab and to move up\nin switcher use Ctrl + Shift + Tab\n\nThis is a useful way to quickly navigate among files and menu options again\nwithout using mouse or trackpad\n\nRecent files\nYou do not need to remember what files were recently opened. To view recent\nfiles accessed, execute Cmd + E\n\nNavigation bar\nHow many times have you switched the project tree using Cmd + 1 and gone one\nlevel up to open a file? Before observing this, I know I kept on doing this\nagain and again.\n\nHowever, IntelliJ has a navigation bar on top of the editor which can be used to\nvery quickly navigate up the project tree.\n\nLive templates\nIntelliJ has a bunch of templates already created which can be quickly used to\ncreate a base skeleton code for many common constructs.\n\nIt is also aware of what type of file is currently opened and can show available\noptions by opening Cmd + J, once you select the one that you are looking for,\nexpand this code using Tab key\n\nTo open these templates and maybe even add your own, open Preferences > Editor >\nLive Templates\n\nInject language reference\nIntelliJ allows us to insert the context of a particular language and allows to\nwork with it within another file. Seems confusing? Let me explain why this is a\nsuper neat feature.\n\nLet’s assume you want to store JSON string inside a Java file. Typically Java 8\ndoes not have support for multi-line string (Added in Java 12 though\n[https://dzone.com/articles/jdk-12-raw-string-literals])\n\nYou can start with a simple string variable. Press Option + Enter and select \nInject language or reference\n\nAnd then select the file type. Let’s say JSON\n\nNow that we have provided the context, You can again press Option + Enter and\nthen select Edit JSON fragment . This opens up a new window where you can create\nand edit JSON freely and the corresponding concatenated string is automagically\ninserted.\n\nValidate regex inside the editor\nRegexes are a very powerful concept to learn and use. How many times have you\nhad to write small scratch files (or use regex sites [https://regexr.com/]) with\nbelow snippet to test whether a given string matches a regex?\n\nI have personally done this many times.\n\nclass Scratch {\npublic static void main(String[] args) {\nString regex = \"\\w+ world!\";\nString testString = \"Hello world!\";\nSystem.out.println(testString.matches(regex));\n}\n}\n\nIntelliJ makes this even easier. Given a regex, enter Option + Enter and select \nCheck RegExp\n\nEnter test strings and IntelliJ would automatically test whether the sample\nstring is a match or not. Neat right?\n\nDrop frames while debugging\nWhile developing it’s very important to be good at debugging. IntelliJ allows a\nvery rich set of inspection features to know the state of variables/classes at a\ngiven point in the code.\n\nIn this below example, we have a simple fooBar() method which is a wrapper over \nfoo and bar methods where foo has a debug point.\n\nWhat if we want to move a step back from the current frame? It turns out we can\nselect the current frame and select Drop frame and that would move the debug\nflow back to foo method.\n\nIt’s amazing how much time this saves since we do not need to rewire the\ndebugging session from scratch.\n\nHopefully, this post encouraged you to also explore the feature-rich IDEs that\nJetbrains provides, and give your automation development a literal nitro boost.\n(NFS reference anyone? 😋)\n\nWhat other IDE tricks have been lifesavers for you? Let me know in the comments.\nIf you found this useful, do share it with a friend or colleague.\n\nFor more such stories sent to your inbox once a week, sign up for our\nnewsletter! [https://mailchi.mp/go-jek/gojek-tech-newsletter]\n\ngojek.jobs [http://bit.ly/2UcJEI0]","html":"<p>I do the bulk of my test automation development in Kotlin/Java or Python languages. After the programming language, a very important component for the dev workflow is a good IDE.</p><p>Purists generally rave about the use of Editors like Sublime, VSCode or even use of Vim/Emacs over full-fledged IDE’s like Jetbrains IntelliJ, Pycharm or Eclipse. However, the truth is most modern devs in this day and age use/prefer IDE’s for the host of convenience features, speed, and flexibility they provide.</p><p>Personally, I am a big fan of IDE’s provided by <a href=\"https://www.jetbrains.com/\" rel=\"noopener\">Jetbrains</a>, and they are generally my tools of choice—saving me a ton of time while performing refactoring and greatly decreasing development time.</p><blockquote><em><em>Not convinced yet?</em></em></blockquote><p>If you’ve used IntelliJ, then ppen up <code>IntelliJ &gt; Help &gt; Productivity Guide</code> and see how much time it has saved you.</p><p>This is my breakdown in the past two years:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mRHQ5HihrnXqU7bh.png\" class=\"kg-image\"></figure><p>However,</p><ul><li>Do we really extract the maximum juice out of these tools?</li><li>How many of the IDE’s features do we really use on a day-to-day basis?</li></ul><p>Well, fret not. This post will share some awesome tips that you can also follow to become more productive with your editors. I got to know some of these features when the prolific Dev evangelist <a href=\"https://hadihariri.com/\" rel=\"noopener\">Hadi Hariri</a> from Jetbrains visited <a href=\"https://www.gojek.io/\" rel=\"noopener\">Gojek</a> Bengaluru and shared these during a meetup.</p><p>To demonstrate these features, I would be using appium <a href=\"https://github.com/appium/java-client\" rel=\"noopener\">Java client</a> project but the same features can be applied in any <strong><strong>Java/Kotlin (IntelliJ IDEA)</strong></strong> project of your choice or <strong><strong>Python project (In Pycharm).</strong></strong></p><h3 id=\"ideavim\">Ideavim</h3><p>To start with, did you know all Jetbrains editors come with a very good VIM support via IdeaVim plugin? Vim commands are amazing.</p><p>Once you get used to them, your editing and code navigation speed is easily multiplied 2X and it’s so easy to use it within IntelliJ. If you want to know VIM basics, I wrote a <a href=\"https://automationhacks.blog/2018/09/23/vim-the-editor-you-need-but-not-the-one-you-deserve/\" rel=\"noopener\">post</a> on it some time back.</p><p>To install this plugin, either opt for it when freshly installing IntelliJ or <code>Go to preferences &gt; Plugins and search for IdeaVim in marketplace</code>, don't worry, you can always temporarily disable it and practice first before starting to use it in your day to day workflow.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_mMdadKP3FjJ2Jj9c.png\" class=\"kg-image\"></figure><p>The most common commands that you should be aware of are mentioned right when you open it.</p><p>I use the IntelliJ IDEA classic keybindings, however, you should be able to quickly find the short cuts for these operations in the binding of your choice ( <code>Look into Preferences &gt; Keymap</code>)</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_2xCQI_tMRl7RQpAv.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_dndhilLo2bXVYO_D.png\" class=\"kg-image\"></figure><h3 id=\"search-shortcuts\">Search Shortcuts</h3><p>Double Shift brings up the search console and this is the single place to either</p><ul><li>Search Classes or Files <strong><strong>(Shift + Cmd + N):</strong></strong> with certain names in your project or</li><li>Perform any action <strong><strong>(Shift + Cmd + A):</strong></strong> for example, refactoring certain components inside a class</li></ul><p>You can also easily learn the keyboard shortcuts for the common operations within the editor by seeing the shortcut right beside the command on this screen. Trust me, the investment in learning these has huge payoffs.</p><blockquote><em><em><em>The number of times that you avoid using the trackpad or mouse is </em><strong><strong><em>one time less</em></strong></strong><em> that you have to context switch while coding. Believe me, that makes a difference.</em></em></em></blockquote><h3 id=\"search-by-file-initials\">Search by file initials</h3><p>While trying to find a file, often we just know the name vaguely by memory. In Search, it is sufficient to just mention the initials of the file and IntelliJ will list out all the files which match that criteria</p><p>Let’s say, for example, I want to search for all test files which start with <code>A</code> and have Test suffix, I can just enter <code>ATes</code> and see all the file names which match this.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0__Q-aR5Yl8g_PYSvr.png\" class=\"kg-image\"></figure><h3 id=\"search-method-inside-a-file-matching-a-pattern\">Search method inside a file matching a pattern</h3><p>What if I want to search for all methods having <code>find</code> keyword inside test files named <code>AndTes</code>?</p><p>Well you just use a <code>dot .</code> in these search queries and you can easily search for even methods inside classes based on partial pattern search.</p><p>In this case, <code>AndTest.find</code> would show all the methods with <code>find</code> keyword in them. Neat huh?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-tEBZAYAl_oD6DHS.png\" class=\"kg-image\"></figure><h3 id=\"search-for-file-names-inside-a-particular-folder\">Search for file names inside a particular folder</h3><p>In the example below, I am searching for file names starting with <code>KeyE</code> under <code>nativekey</code> folder by separating them with a forward slash <code>/</code></p><p><code>nativekey/KeyE</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_IW8jxxtq6cyfMpSC.png\" class=\"kg-image\"></figure><h3 id=\"navigating-options-all-within-the-search\">Navigating options all within the search</h3><p>If you type a forward slash <code>/</code> in the search bar, you can see different IDE actions that you can take right there.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_9tsFLNRrv1Y3lTjt.png\" class=\"kg-image\"></figure><h3 id=\"find-usages\">Find usages</h3><p>You can quickly find out usages of a given function, class, interface, etc by hitting <code>Cmd + B</code>, This saves a ton of time over manually searching for code. You can either navigate right inside the result pop up or open it in dedicated window by selecting <code>Open in find window</code>.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_CJOyIsf7nGojY9Lg.png\" class=\"kg-image\"></figure><p>What if I want to see all the classes and methods that are present in <code>AndroidTest.java</code> class?</p><p>We can open the <strong><strong>Structure</strong></strong> tab <strong><strong>(Cmd + 7)</strong></strong> and glance at all the available methods with options to even show <strong><strong>anonymous classes/lambdas</strong></strong> inside the class.</p><p>Now, this could be very useful when you have a long class and want to see all the methods and then quickly navigate to them. Too many methods might hint at a potential refactoring candidate.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_RH_TICWZf2VTasMN.png\" class=\"kg-image\"></figure><h3 id=\"switcher\">Switcher</h3><p>To switch between open files and open tabs</p><p>Use <code>Ctrl + Tab</code> and then to move down continue pressing <code>Ctrl + Tab</code> and to move up in switcher use <code>Ctrl + Shift + Tab</code></p><p>This is a useful way to quickly navigate among files and menu options again without using mouse or trackpad</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_u1OO-wpwoKH39BQs.png\" class=\"kg-image\"></figure><h3 id=\"recent-files\">Recent files</h3><p>You do not need to remember what files were recently opened. To view recent files accessed, execute <code>Cmd + E</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZaMfMJ8LsxnnQk7F.png\" class=\"kg-image\"></figure><h3 id=\"navigation-bar\">Navigation bar</h3><p>How many times have you switched the project tree using <code>Cmd + 1</code> and gone one level up to open a file? Before observing this, I know I kept on doing this again and again.</p><p>However, IntelliJ has a navigation bar on top of the editor which can be used to very quickly navigate up the project tree.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_ZCHnmBhFtgljalI2.png\" class=\"kg-image\"></figure><h3 id=\"live-templates\">Live templates</h3><p>IntelliJ has a bunch of templates already created which can be quickly used to create a base skeleton code for many common constructs.</p><p>It is also aware of what type of file is currently opened and can show available options by opening <code>Cmd + J</code>, once you select the one that you are looking for, expand this code using <code>Tab</code> key</p><p>To open these templates and maybe even add your own, open <code>Preferences &gt; Editor &gt; Live Templates</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_lgWhZ-WL3zco-U5W.png\" class=\"kg-image\"></figure><h3 id=\"inject-language-reference\">Inject language reference</h3><p>IntelliJ allows us to insert the context of a particular language and allows to work with it within another file. Seems confusing? Let me explain why this is a super neat feature.</p><p>Let’s assume you want to store JSON string inside a Java file. Typically Java 8 does not have support for multi-line string (Added in <a href=\"https://dzone.com/articles/jdk-12-raw-string-literals\" rel=\"noopener\">Java 12 though</a>)</p><p>You can start with a simple string variable. Press <code>Option + Enter</code> and select <code>Inject language or reference</code></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_-aSyY4KPrz8ZJ0rS.png\" class=\"kg-image\"></figure><p>And then select the file type. Let’s say JSON</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_jHjlLhAkzjtluqcG.png\" class=\"kg-image\"></figure><p>Now that we have provided the context, You can again press <code>Option + Enter</code> and then select <code>Edit JSON fragment</code> . This opens up a new window where you can create and edit JSON freely and the corresponding concatenated string is automagically inserted.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_beIcluwz5QOnPmVu.png\" class=\"kg-image\"></figure><h3 id=\"validate-regex-inside-the-editor\">Validate regex inside the editor</h3><p>Regexes are a very powerful concept to learn and use. How many times have you had to write small scratch files (or use <a href=\"https://regexr.com/\" rel=\"noopener\">regex sites</a>) with below snippet to test whether a given string matches a regex?</p><p>I have personally done this many times.</p><!--kg-card-begin: markdown--><p>class Scratch {<br>\npublic static void main(String[] args) {<br>\nString regex = &quot;\\w+ world!&quot;;<br>\nString testString = &quot;Hello world!&quot;;<br>\nSystem.out.println(testString.matches(regex));<br>\n}<br>\n}</p>\n<!--kg-card-end: markdown--><p>IntelliJ makes this even easier. Given a regex, enter <code>Option + Enter</code> and select <strong><strong>Check RegExp</strong></strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_0NBq6qgPT14_zYIn.png\" class=\"kg-image\"></figure><p>Enter test strings and IntelliJ would automatically test whether the sample string is a match or not. Neat right?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_PPZYME7bt4PGZtrR.png\" class=\"kg-image\"></figure><h3 id=\"drop-frames-while-debugging\">Drop frames while debugging</h3><p>While developing it’s very important to be good at debugging. IntelliJ allows a very rich set of inspection features to know the state of variables/classes at a given point in the code.</p><p>In this below example, we have a simple <code>fooBar()</code> method which is a wrapper over <code>foo</code> and <code>bar</code> methods where <code>foo</code> has a debug point.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_P7eZVtk2sSDPiUFD.png\" class=\"kg-image\"></figure><p>What if we want to move a step back from the current frame? It turns out we can select the current frame and select <code>Drop frame</code> and that would move the debug flow back to <code>foo</code> method.</p><p>It’s amazing how much time this saves since we do not need to rewire the debugging session from scratch.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/0_DdZ775opHOP0z_uL.png\" class=\"kg-image\"></figure><p>Hopefully, this post encouraged you to also explore the feature-rich IDEs that Jetbrains provides, and give your automation development a literal nitro boost. (NFS reference anyone? 😋)</p><p>What other IDE tricks have been lifesavers for you? Let me know in the comments. If you found this useful, do share it with a friend or colleague.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_Yigf1nGxRKjzV7vIC_YkYg-3.png\" class=\"kg-image\"></figure><p>For more such stories sent to your inbox once a week, <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">sign up for our newsletter!</a></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://gojek-ghost.zysk.in/content/images/2020/05/1_XSAkmYAomyHp6_18rjjAfA-2.jpeg\" class=\"kg-image\" alt=\"gojek.jobs\"><figcaption><a href=\"http://bit.ly/2UcJEI0\">gojek.jobs</a></figcaption></figure>","url":"https://gojek-ghost.zysk.in/speed-up-your-workflow-with-intellij/","canonical_url":null,"uuid":"c97cb86d-8608-410e-9740-e4e613b1c3bf","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ecb65447aa22c4066f83f64","reading_time":7}},{"node":{"id":"Ghost__Post__5ec2ca3d7aa22c4066f83b6c","title":"Screenshot Testing our Design System on Android","slug":"screenshot-testing-our-design-system-on-android","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_CDWU7CE8XeZNDZ0fa4KNLw.jpeg","excerpt":"An overview of how we do screenshot tests, and the open source libraries that helped us along the way.","custom_excerpt":"An overview of how we do screenshot tests, and the open source libraries that helped us along the way.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"14 January, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T23:17:41.000+05:30","published_at":"2020-01-14T09:30:00.000+05:30","updated_at":"2020-05-18T23:43:30.000+05:30","meta_title":null,"meta_description":"An overview of how we do screenshot tests, and the open source libraries that helped us along the way.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Design","slug":"design","description":"Chronicles of the design journeys behind Gojek products, case studies, and insights on UI/UX design.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Jitin Sharma\n\nIn this post, we’ll take a look at how we test our Design System components on\nAndroid using screenshot tests to make them pixel perfect. 👌\n\nLet’s start with an example.\n\nTake a look at these two images:\n\nAre these images identical?They may look the same, but they aren’t! Here’s\nwhat’s different:\n\nThere are two subtle changes — the colour of the button is a different shade of\ngreen and the elevation is also different.\n\nIn Asphalt\n[https://blog.gojekengineering.com/ux-engineering-at-gojek-9de2abe24928], our\ndesign language system, we want to make sure our UI components are robust and\ndetect breakages early. Here’s how we leveraged screenshot tests to achieve\nthis.\n\nComponents Everywhere\nAsphalt Components in Gojek appWith Asphalt, we create components that can be\nreused across the Gojek app. Every button, text, input, or card which you see in\nmost of the screens of the app is an Asphalt Component. On top of this, we have\na demo app which showcases the usage of these components.\n\nAsphalt Components in Demo appOur components are the backbone of the Gojek app\nUI. For example, our button class has 300+ occurrences across Gojek’s consumer\napp codebase. This heavy reuse helps us enforce design guidelines across the\napp. The importance of these components requires that we test them thoroughly,\nas even a small regression in one component could mean a degraded experience for\nour users.\n\n[U]n[I]t Testing\nUnit tests are supposed to test logic and fail when expectations aren’t met. How\ndo we expect that a certain UI is being rendered properly?\n\nThe idea of screenshot testing is to have a master copy of screenshots that we\nknow are correct and on every test run compare the current screenshots to the\nmaster copy. If the current set does not match the master set, the test fails.\nThis will allow us to check unintentional UI changes. If the changes are\nintentional, then we run the tests in update mode which updates the master\nscreenshots.\n\nHere is the high level outline:\n\n> - Write Espresso test for all activities in the demo\n> - Take screenshots and create a master set\n> - At every CI run take screenshots again and compare with master set\nWe started out with Shot [https://github.com/Karumi/Shot], an open source\nlibrary which allows us to take screenshots and compare them using gradle\ncommands and generate reports.\n\nHere’s what a test for our Alert component looks like 👇\n\nAchilles Heel — The Android Emulator\nWhile the Android emulator has improved a lot in recent times, we found running\nemulators in CI is still unreliable.\n\nHere are a few issues we faced:\n\n> - We had to wait to for the emulator to start up, which was only possible\nthrough a hack(y) script by continuously pinging adb commands\n> Emulator would put more memory pressure on CI runners\n> Emulators also need hardware acceleration which required us to enable kvm on our\nLinux-based machines.\nRunning Instrumentation test cases with these issues would mean our tests would\nbe flaky — and we couldn’t have that.\n\nFirebase Test Lab saves the day!\nWe decide to move away from emulators to real devices.\n\nOne idea was to have devices connected to a machine and use the machine as a\nrunner for running test cases in CI — a device test lab.\n\nBut devices come with their own baggage — maintaining them. They may be\ninterrupted by software updates, system dialogs… or get overcharged and explode!\n🔥\n\nWe found the next best thing: Firebase Test Lab\n[https://firebase.google.com/docs/test-lab] — a set of devices in cloud, managed\nautomatically and available via CLI.\n\nThis solved our device problem, but we ran into another one — Firebase Test Lab\ndoesn’t allow you to run custom gradle commands. Instead, it expects you to\nupload a debug and a test apk, and it will run the tests for you. This meant we\ncould no longer use Shot for taking screenshots and comparing them 😦\n\nWhile scratching our heads over how to overcome this problem, we found that\nFirebase Test Lab allows you\n[https://firebase.google.com/docs/test-lab/android/test-screenshots] to take\nscreenshots through a library and then retrieve them from Google Cloud Bucket.\n\nThere is also a gradle plugin [https://github.com/runningcode/fladle/] which\nautomates this process including downloading artifacts from GCP — open source to\nthe rescue again!\n\nHere’s how our test case looks like with Firebase screenshot library:\n\nFor image comparison we used ImageMagick [https://imagemagick.org/], a very\npopular and feature-packed CLI tool for image manipulation. It also allows us to\noutput a different image in case two images don’t match, which is super useful\nfor generating test failure reports.\n\nThe final piece — integrating screenshot tests into our developer workflow\nAs part of CI, we do the following things when a merge request is raised:\n\n> - Build the project\n> - Run Espresso Tests on Firebase Test Lab\n> - Retrieve screenshots and compare them with master set\n> - If any screenshot doesn’t match, we fail the build and add a comment to PR\nusing Danger [https://danger.systems/]\nDanger reporting mismatch in screenshot along with diff image.We have been using\nthis setup for some time now, and it’s worked out great for us! We have been\nable to execute multiple UI refactors with high confidence.\n\nWhat’s next?\nWe will continue to invest in this setup in the future. Things like testing\nlocalisation, having a test matrix with multiple screen sizes, API levels,\ndevice densities… these are some things we have planned for the future.\n\nA big thank you to the open source libraries that helped us achieve this!\n\n\n--------------------------------------------------------------------------------\n\nLiked what you read? Sign up for our newsletter\n[https://mailchi.mp/go-jek/gojek-tech-newsletter] and we’ll send you weekly\nupdates about our stories! 🖖","html":"<p>By Jitin Sharma</p><p>In this post, we’ll take a look at how we test our Design System components on Android using screenshot tests to make them pixel perfect. 👌</p><p>Let’s start with an example.</p><p>Take a look at these two images:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1052/1*GON1POsYNn-n13Yvx9KWlQ.png\" class=\"kg-image\"><figcaption>Are these images identical?</figcaption></figure><p>They may look the same, but they aren’t! Here’s what’s different:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1052/1*0Cunmda2Ctain_g4xPU3iQ.png\" class=\"kg-image\"></figure><p>There are two subtle changes — the colour of the button is a different shade of green and the elevation is also different.</p><p>In <a href=\"https://blog.gojekengineering.com/ux-engineering-at-gojek-9de2abe24928\" rel=\"noopener\">Asphalt</a>, our design language system, we want to make sure our UI components are robust and detect breakages early. Here’s how we leveraged screenshot tests to achieve this.</p><h1 id=\"components-everywhere\">Components Everywhere</h1><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1584/1*UH05mhuGHielEDM4RtbOcQ.png\" class=\"kg-image\"><figcaption>Asphalt Components in Gojek app</figcaption></figure><p>With Asphalt, we create components that can be reused across the Gojek app. Every button, text, input, or card which you see in most of the screens of the app is an Asphalt Component. On top of this, we have a demo app which showcases the usage of these components.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1220/1*ixxp__0PC20bAMigugixhg.png\" class=\"kg-image\"><figcaption>Asphalt Components in Demo app</figcaption></figure><p>Our components are the backbone of the Gojek app UI. For example, our button class has 300+ occurrences across Gojek’s consumer app codebase. This heavy reuse helps us enforce design guidelines across the app. The importance of these components requires that we test them thoroughly, as even a small regression in one component could mean a degraded experience for our users.</p><h1 id=\"-u-n-i-t-testing\">[U]n[I]t Testing</h1><p>Unit tests are supposed to test logic and fail when expectations aren’t met. How do we expect that a certain UI is being rendered properly?</p><p>The idea of screenshot testing is to have a master copy of screenshots that we know are correct and on every test run compare the current screenshots to the master copy. If the current set does not match the master set, the test fails. This will allow us to check unintentional UI changes. If the changes are intentional, then we run the tests in <code>update</code> mode which updates the master screenshots.</p><p><strong><strong>Here is the high level outline:</strong></strong></p><blockquote><em><em>- Write Espresso test for all activities in the demo</em></em></blockquote><blockquote><em><em>- Take screenshots and create a master set</em></em></blockquote><blockquote><em><em>- At every CI run take screenshots again and compare with master set</em></em></blockquote><p>We started out with <a href=\"https://github.com/Karumi/Shot\" rel=\"noopener\">Shot</a>, an open source library which allows us to take screenshots and compare them using gradle commands and generate reports.</p><p>Here’s what a test for our Alert component looks like 👇</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/jitinsharma/c57e8afbb0b4849ff75a29eeba4dc4d1.js\"></script><!--kg-card-end: html--><h1 id=\"achilles-heel-the-android-emulator\">Achilles Heel — The Android Emulator</h1><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1400/0*WWyaL1uLibHeXC15.png\" class=\"kg-image\"></figure><p>While the Android emulator has improved a lot in recent times, we found running emulators in CI is still unreliable.</p><p>Here are a few issues we faced:</p><blockquote><em><em>- We had to wait to for the emulator to start up, which was only possible through a hack(y) script by continuously pinging <code>adb</code> commands</em></em></blockquote><blockquote><em><em>Emulator would put more memory pressure on CI runners</em></em></blockquote><blockquote><em><em>Emulators also need hardware acceleration which required us to enable <code>kvm</code> on our Linux-based machines.</em></em></blockquote><p>Running Instrumentation test cases with these issues would mean our tests would be flaky — and we couldn’t have that.</p><h1 id=\"firebase-test-lab-saves-the-day-\">Firebase Test Lab saves the day!</h1><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1280/0*IIH6x5bWvHn1Gcv_.jpg\" class=\"kg-image\"></figure><p>We decide to move away from emulators to real devices.</p><p>One idea was to have devices connected to a machine and use the machine as a runner for running test cases in CI — a device test lab.</p><p>But devices come with their own baggage — maintaining them. They may be interrupted by software updates, system dialogs… or get overcharged and explode! 🔥</p><p>We found the next best thing: <a href=\"https://firebase.google.com/docs/test-lab\" rel=\"noopener\">Firebase Test Lab</a> — a set of devices in cloud, managed automatically and available via CLI.</p><p>This solved our device problem, but we ran into another one — Firebase Test Lab doesn’t allow you to run custom gradle commands. Instead, it expects you to upload a debug and a test apk, and it will run the tests for you. This meant we could no longer use Shot for taking screenshots and comparing them 😦</p><p>While scratching our heads over how to overcome this problem, we found that Firebase Test Lab <a href=\"https://firebase.google.com/docs/test-lab/android/test-screenshots\" rel=\"noopener\">allows you</a> to take screenshots through a library and then retrieve them from Google Cloud Bucket.</p><p>There is also a <a href=\"https://github.com/runningcode/fladle/\" rel=\"noopener\">gradle plugin</a> which automates this process including downloading artifacts from GCP — open source to the rescue again!</p><p>Here’s how our test case looks like with Firebase screenshot library:</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/jitinsharma/971c95389af0ae11b38f392076dc6df8.js\"></script><!--kg-card-end: html--><p>For image comparison we used <a href=\"https://imagemagick.org/\" rel=\"noopener\">ImageMagick</a>, a very popular and feature-packed CLI tool for image manipulation. It also allows us to output a different image in case two images don’t match, which is super useful for generating test failure reports.</p><h1 id=\"the-final-piece-integrating-screenshot-tests-into-our-developer-workflow\">The final piece — integrating screenshot tests into our developer workflow</h1><p>As part of CI, we do the following things when a merge request is raised:</p><blockquote><em><em>- Build the project</em></em></blockquote><blockquote><em><em>- Run Espresso Tests on Firebase Test Lab</em></em></blockquote><blockquote><em><em>- Retrieve screenshots and compare them with master set</em></em></blockquote><blockquote><em><em>- If any screenshot doesn’t match, we fail the build and add a comment to PR using <a href=\"https://danger.systems/\" rel=\"noopener\">Danger</a></em></em></blockquote><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1970/1*D6gb_yARAM4n83umso03Xw.png\" class=\"kg-image\"><figcaption>Danger reporting mismatch in screenshot along with diff image.</figcaption></figure><p>We have been using this setup for some time now, and it’s worked out great for us! We have been able to execute multiple UI refactors with high confidence.</p><h1 id=\"what-s-next\">What’s next?</h1><p>We will continue to invest in this setup in the future. Things like testing localisation, having a test matrix with multiple screen sizes, API levels, device densities… these are some things we have planned for the future.</p><p>A big thank you to the open source libraries that helped us achieve this!</p><hr><p>Liked what you read? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\" rel=\"noopener\">Sign up for our newsletter</a> and we’ll send you weekly updates about our stories! 🖖</p>","url":"https://gojek-ghost.zysk.in/screenshot-testing-our-design-system-on-android/","canonical_url":null,"uuid":"4a57a774-789f-4e2c-ac66-c0896c460a22","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2ca3d7aa22c4066f83b6c","reading_time":5}},{"node":{"id":"Ghost__Post__5eb12eb3f7c7da001effce0b","title":"How We Supercharged Chat","slug":"how-we-supercharged-chat","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_tuDgHHPUouXxzsK4OEzPaw.jpg","excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","custom_excerpt":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"10 January, 2020","updated_at_pretty":"18 May, 2020","created_at":"2020-05-05T14:45:31.000+05:30","published_at":"2020-01-10T09:30:00.000+05:30","updated_at":"2020-05-18T20:45:50.000+05:30","meta_title":null,"meta_description":"The nuts and bolts of the framework that allows other Gojek products to leverage our chat platform via extensions.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It’s one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Benzi Ahamed\n\nThe Gojek consumer app comes with a chat feature. This allows users to have\nconversations with:\n\n * The currently assigned driver partner in relation to a booking.\n * Other Gojek users, provided they are known contacts in your address book.\n   These can be either personal or group chats.\n\nIn order to use the chat platform as springboard to other services within\nGojek’s vast ecosystem, we wanted to expose some features that integrate with\nour other offerings — within the convenience of a chat window.\n\nOne of the first service options we wanted to focus on was payments — paying and\nrequesting for money between individuals and groups. Chat had the platform to\ncreate connections between people, GoPay had payments — it was time to marry the\ntwo.\n\nArchitecture\nTo start with, as a chat platform team, we did not really know anything about\nthe payments domain. In fact, most of the integrations we planned for required\ncollaborating with other product teams within Gojek.\n\nWe decided early on that we needed a plugin-based framework that other product\nteams (and even chat team’s core services) could use. We also decided that the\nAPI surface area for this new framework should have as much as possible in\ncommon between the Android and iOS implementations.\n\nThe first use case we focused on was integrating payment options within chat —\nwhich would help us kickstart our design and feature rollout.\n\nApproach\nIn the vein of keeping things as simple as possible, we came up with the\nfollowing set of guidelines:\n\n * The chat subsystem can expose add-on features to the user\n * These features will not be part of the core chat offering, but can be\n   plugged-in externally\n * These plugin-based entities — chat extensions — can have mainly two\n   capabilities\n * Display a button (widget) in a chat window to trigger the chat extension’s\n   functionality\n * Display chat extension messages that can support rich text, images,\n   call-to-actions\n\nChat extension messages are merely text messages with additional metadata. While\nplain text-based messages are rendered by the core chat rendering system, chat\nextension messages need to be rendered by the chat extension that created the\nmessage.\n\nChat Extension Framework — Key ActorsThe illustration above depicts the final\nframework components we came up with.\n\n * Chat Extension Providers are responsible for vending Chat Extensions based on\n   the active Chat Session (there might be cases where we want to enable a\n   certain feature only for certain types of chats e.g. those between our\n   drivers and customers).\n * Chat Extensions are the components responsible for vending trigger points (\n   Widget Views) and custom message views (Extension Message Views).\n\nWhile the core subsystem takes care of managing life cycles of the chat\nextensions, widgets, and message views, it is the responsibility of extension\nauthors to purely focus on the implementation details of their feature.\n\nWith the above design in place, we were ready to start collaborating and start\nimplementing features.\n\nLet’s take a look at some integrations we were able to build collaboratively.\n\nSample Integrations\nPayments\nThe first integration we did was Request and Pay flows. Utilising GoPay,\ncustomers can make payments and request for money from friends.\n\nHere’s the Request Flow in action, within a personal chat:\n\nRequest Money from an IndividualIn a group chat, Request Flow translates to a\nSplit Bill flow:\n\nRequest Money in a GroupHere’s the Pay flow in action:\n\nPay via GoPay, continue conversation in ChatIn the Pay Flow, we start with\nmaking a payment from the home-screen of the Gojek App. Once a payment is done,\nyou have an option to continue to chat with the person you made the payment to.\nThis flow is of course in addition to similar flows for Request where you can\ntrigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\nIn the Pay Flow, we start with making a payment from the home-screen of the\nGojek App. Once a payment is done, you have an option to continue to chat with\nthe person you made the payment to. This flow is of course in addition to\nsimilar flows for Request where you can trigger a payment within chat itself.\n\nThe payments team were able to create a UX flow that could be triggered either\nfrom the home screen or the chat window.\n\nRestaurant Sharing\nNext up, our GoFood team wanted to explore sharing restaurant information via\nchat. Since we already had support for extensions at this point in time, we\ncreated a generic Share Via Chat flow that supports sharing simple text messages\nor custom extension message content.\n\n\nShare Restaurant Details via ChatWhat’s interesting is that once a Restaurant\nCard has been shared via chat, a recipient clicking on that card can proceed to\nmake a food order, directly from the chat window itself. This is made possible\nby the fact that Extension Message Views can be fully interactive (e.g. detect\nuser taps), and the chat window provides contextual navigation controls to them.\n\nImage Sharing\nLastly, let us take a look at the most recent feature we rolled out to\nproduction — image sharing in our customer-driver chats.\n\nImage Sharing via ChatDuring the implementation of this feature, we recognised\nthat image sharing would be better triggered from the chat window if there was a\ndirect shortcut button (e.g. a camera icon) within the bottom text input area of\nthe chat window.\n\nThis leads us to enhance our extension framework to allow Chat Extensions to\nprovide Chat Extension Shortcuts as well. Our updated framework looks like\nbelow:\n\nLessons Learned\nIt has been a great journey so far exploring various kinds of integrations in a\nsimple chat window. We have a lot more planned, but in the meanwhile, here are a\nfew key things we learned along the way\n\n * When you are developing a platform, evangelising what your platform provides\n   is key. This is equally relevant if you are a platform-product company, or a\n   platform team within a company. We conducted an internal chat extension\n   hackathon which helped broaden our outreach, and saw some pretty cool ideas\n   implemented including Live Location Sharing, Booking Sharing, Games, Sticker\n   Packs etc.\n * Document your public API! Teams are more willing to collaborate if you have\n   proper, up-to-date documentation in place. We created detailed technical\n   documents, integration guides, and even provided a sample chat extension (a\n   starter-pack, if you will) — these greatly helped teams adopting these new\n   features. Also, the feedback we got during the internal hackathon fed\n   directly back into improving our documentation.\n * Having a common design language helped our Android and iOS engineers to\n   collaborate more closely. It was easier for the team to work on implementing\n   the feature by focussing on the common characteristics during tech\n   discussion, design ratification sessions etc. and leaving the nuances of each\n   platform to respective teams during development. Having a common language\n   that engineers can speak (irrespective of their specialisations) improves\n   cross-communications and collaboration.\n * It is important to design solutions exercising self-imposed constraints.\n   These constraints should directly limit the engineering scope of the\n   solution. As engineers, we are all too comfortable going down the technical\n   analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit\n   (possibly) over-engineered solution. This usually ends up in complicated\n   designs, which translate into complicated code. It is better to design\n   simpler systems and iteratively add smaller features, where each iteration\n   cycle should also incorporate refactoring every step of the way. Even though\n   we knew having something like Extension Shortcuts was nice to have from the\n   get go, we had to exercise restraint and only implemented the feature when it\n   was actually required.\n * We cannot stress this enough, but continuous refactoring (whenever required)\n   is one surefire way to reduce the build-up of tech debt in any codebase.\n   Improve a function here, rename a variable there, refactor a class into two —\n   every little bit helps. It is the responsibility of the entire team to be\n   engaged in this exercise.\n\nSo there you have it, a quick look at the way the core chat team developed a\nbase extension framework that is currently being used to build richer\nintegrations into chat.\n\n\n--------------------------------------------------------------------------------\n\nWant more where that come from? Have our updates delivered straight to your\ninbox by signing up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Benzi Ahamed</p><p>The Gojek consumer app comes with a chat feature. This allows users to have conversations with:</p><ul><li>The currently assigned driver partner in relation to a booking.</li><li>Other Gojek users, provided they are known contacts in your address book. These can be either personal or group chats.</li></ul><p>In order to use the chat platform as springboard to other services within Gojek’s vast ecosystem, we wanted to expose some features that integrate with our other offerings — within the convenience of a chat window.</p><p>One of the first service options we wanted to focus on was payments — paying and requesting for money between individuals and groups. Chat had the platform to create connections between people, GoPay had payments — it was time to marry the two.</p><h1 id=\"architecture\">Architecture</h1><p>To start with, as a chat platform team, we did not really know anything about the payments domain. In fact, most of the integrations we planned for required collaborating with other product teams within Gojek.</p><p>We decided early on that we needed a plugin-based framework that other product teams (and even chat team’s core services) could use. We also decided that the API surface area for this new framework should have as much as possible in common between the Android and iOS implementations.</p><p>The first use case we focused on was integrating payment options within chat — which would help us kickstart our design and feature rollout.</p><h2 id=\"approach\">Approach</h2><p>In the vein of keeping things as simple as possible, we came up with the following set of guidelines:</p><ul><li>The chat subsystem can expose add-on features to the user</li><li>These features will not be part of the core chat offering, but can be plugged-in externally</li><li>These plugin-based entities — chat extensions — can have mainly two capabilities</li><li>Display a button (widget) in a chat window to trigger the chat extension’s functionality</li><li>Display chat extension messages that can support rich text, images, call-to-actions</li></ul><p>Chat extension messages are merely text messages with additional metadata. While plain text-based messages are rendered by the core chat rendering system, chat extension messages need to be rendered by the chat extension that created the message.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1980/1*yZbylgYQ7Q7jaF8cooEpeQ.png\" class=\"kg-image\"><figcaption>Chat Extension Framework — Key Actors</figcaption></figure><p>The illustration above depicts the final framework components we came up with.</p><ul><li><strong><strong>Chat Extension Providers</strong></strong> are responsible for vending <strong><strong>Chat Extension</strong></strong>s based on the active <strong><strong>Chat Session</strong></strong> (there might be cases where we want to enable a certain feature only for certain types of chats e.g. those between our drivers and customers).</li><li><strong><strong>Chat Extensions</strong></strong> are the components responsible for vending trigger points (<strong><strong>Widget Views</strong></strong>) and custom message views (<strong><strong>Extension Message Views</strong></strong>).</li></ul><p>While the core subsystem takes care of managing life cycles of the chat extensions, widgets, and message views, it is the responsibility of extension authors to purely focus on the implementation details of their feature.</p><p>With the above design in place, we were ready to start collaborating and start implementing features.</p><p>Let’s take a look at some integrations we were able to build collaboratively.</p><h1 id=\"sample-integrations\">Sample Integrations</h1><h2 id=\"payments\">Payments</h2><p>The first integration we did was Request and Pay flows. Utilising GoPay, customers can make payments and request for money from friends.</p><p>Here’s the Request Flow in action, within a personal chat:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*2mJZ8btzdO7bVq5rXtwvoQ.gif\" class=\"kg-image\"><figcaption>Request Money from an Individual</figcaption></figure><p>In a group chat, Request Flow translates to a Split Bill flow:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/402/1*OHgw8oUSuN6n1d8sjWCw7A.gif\" class=\"kg-image\"><figcaption>Request Money in a Group</figcaption></figure><p>Here’s the Pay flow in action:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*6z12Pjg1Vgy8Y-0P1jFPSw.gif\" class=\"kg-image\"><figcaption>Pay via GoPay, continue conversation in Chat</figcaption></figure><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.</p><p>In the Pay Flow, we start with making a payment from the home-screen of the Gojek App. Once a payment is done, you have an option to continue to chat with the person you made the payment to. This flow is of course in addition to similar flows for Request where you can trigger a payment within chat itself.</p><p>The payments team were able to create a UX flow that could be triggered either from the home screen or the chat window.</p><h2 id=\"restaurant-sharing-1\">Restaurant Sharing</h2><p>Next up, our GoFood team wanted to explore sharing restaurant information via chat. Since we already had support for extensions at this point in time, we created a generic Share Via Chat flow that supports sharing simple text messages or custom extension message content.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/404/1*iMz_DNDwFwiCM4aiMRilAg.gif\" class=\"kg-image\"><figcaption>Share Restaurant Details via Chat</figcaption></figure><p>What’s interesting is that once a Restaurant Card has been shared via chat, a recipient clicking on that card can proceed to make a food order, directly from the chat window itself. This is made possible by the fact that Extension Message Views can be fully interactive (e.g. detect user taps), and the chat window provides contextual navigation controls to them.</p><h2 id=\"image-sharing\">Image Sharing</h2><p>Lastly, let us take a look at the most recent feature we rolled out to production — image sharing in our customer-driver chats.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/600/1*uFGU-NAQrIM2L4USdNLuWA.gif\" class=\"kg-image\"><figcaption>Image Sharing via Chat</figcaption></figure><p>During the implementation of this feature, we recognised that image sharing would be better triggered from the chat window if there was a direct shortcut button (e.g. a camera icon) within the bottom text input area of the chat window.</p><p>This leads us to enhance our extension framework to allow Chat Extensions to provide Chat Extension Shortcuts as well. Our updated framework looks like below:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/2140/1*BDMz2IPpUJcX3M80qI_7bw.png\" class=\"kg-image\"></figure><h1 id=\"lessons-learned\">Lessons Learned</h1><p>It has been a great journey so far exploring various kinds of integrations in a simple chat window. We have a lot more planned, but in the meanwhile, here are a few key things we learned along the way</p><ul><li>When you are developing a platform, evangelising what your platform provides is key. This is equally relevant if you are a platform-product company, or a platform team within a company. We conducted an internal chat extension hackathon which helped broaden our outreach, and saw some pretty cool ideas implemented including Live Location Sharing, Booking Sharing, Games, Sticker Packs etc.</li><li>Document your public API! Teams are more willing to collaborate if you have proper, up-to-date documentation in place. We created detailed technical documents, integration guides, and even provided a sample chat extension (a starter-pack, if you will) — these greatly helped teams adopting these new features. Also, the feedback we got during the internal hackathon fed directly back into improving our documentation.</li><li>Having a common design language helped our Android and iOS engineers to collaborate more closely. It was easier for the team to work on implementing the feature by focussing on the common characteristics during tech discussion, design ratification sessions etc. and leaving the nuances of each platform to respective teams during development. Having a common language that engineers can speak (irrespective of their specialisations) improves cross-communications and collaboration.</li><li>It is important to design solutions exercising self-imposed constraints. These constraints should directly limit the engineering scope of the solution. As engineers, we are all too comfortable going down the technical analysis rabbit-hole in our pursuit of coming up with a well rounded, albeit (possibly) over-engineered solution. This usually ends up in complicated designs, which translate into complicated code. It is better to design simpler systems and iteratively add smaller features, where each iteration cycle should also incorporate refactoring every step of the way. Even though we knew having something like Extension Shortcuts was nice to have from the get go, we had to exercise restraint and only implemented the feature when it was actually required.</li><li>We cannot stress this enough, but <em><em>continuous refactoring</em></em> (whenever required) is one surefire way to reduce the build-up of tech debt in any codebase. Improve a function here, rename a variable there, refactor a class into two — every little bit helps. It is the responsibility of the entire team to be engaged in this exercise.</li></ul><p>So there you have it, a quick look at the way the core chat team developed a base extension framework that is currently being used to build richer integrations into chat.</p><hr><p>Want more where that come from? Have our updates delivered straight to your inbox by <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">signing up for our newsletter!</a></p>","url":"https://gojek-ghost.zysk.in/how-we-supercharged-chat/","canonical_url":null,"uuid":"a5657369-e813-44f1-af8d-aa2e306bfafd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12eb3f7c7da001effce0b","reading_time":6}}]}},"pageContext":{"slug":"gojek","limit":12,"skip":0,"numberOfPages":4,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":2,"previousPagePath":null,"nextPagePath":"/author/gojek/page/2/"}}}