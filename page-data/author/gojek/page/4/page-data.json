{"componentChunkName":"component---src-templates-author-js","path":"/author/gojek/page/4/","result":{"data":{"ghostAuthor":{"slug":"gojek","name":"Gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","cover_image":"https://gojek-ghost.zysk.in/content/images/2020/05/GoRide-with-Passenger.jpg","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","location":null,"website":"https://www.gojek.io","twitter":"@gojektech","facebook":"gojektech"},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5ec2af8a7aa22c4066f83abe","title":"Applying the Single Responsibility Principle to Microservices","slug":"applying-the-single-responsibility-principle-to-microservices","featured":false,"feature_image":"https://gojek-ghost.zysk.in/content/images/2020/05/1_5lEpe0Ab9138LC9cY1QZSQ.jpeg","excerpt":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","custom_excerpt":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","visibility":"public","created_at_pretty":"18 May, 2020","published_at_pretty":"05 February, 2019","updated_at_pretty":"18 May, 2020","created_at":"2020-05-18T21:23:46.000+05:30","published_at":"2019-02-05T09:30:00.000+05:30","updated_at":"2020-05-18T21:30:57.000+05:30","meta_title":null,"meta_description":"The single responsibility principle helped us fix Icebreaker, our chat service. This is how we did it.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Tech","slug":"tech","description":"Learnings from technical challenges solved at Gojek, how-tos, and programming tips.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Soham Kamani\n\nThe single responsibility principle is one of the most tried-and-tested tenets\nof software design. Every module or class should do one thing, and do it well.\nWe found this principle was applicable, and incredibly important, while\ndesigning our systems.\n\nAbout a year ago, we released a new chat service (which we internally called \nIcebreaker). It allowed our users to communicate with drivers through the app\nitself, rather than use SMS (which cost both the driver and customer money).\n\nHowever, all was not well. For numerous reasons, the service gave us a lot of\nissues and late night pagers. This post details the lessons we learnt, and some\nof the decisions we took to make this service more reliable.\n\nThe Problem(s)\nIn a nutshell, Icebreaker depended on too many other services to function\nproperly. Let‚Äôs look at some of the tasks Icebreaker performed in order to\ncreate a channel:\n\n 1. Authorise the API call: This made a call to our authentication service.\n 2. Fetch the customer profile: This required an HTTP call to our customer\n    service.\n 3. Fetch the drivers‚Äô profile: This required an HTTP call to our driver\n    service.\n 4. Verify if the customer-driver pair are in an active order: This made a call\n    to our active booking storage service.\n 5. Create the channel.\n\nIf any of these services failed, Icebreaker would fail as well.\n\nSimultaneous dependence on multiple services ensures that the dependent service\nis less stable than any of themEven if we could ensure 99% uptime for all\nservices in question, that still means the chances of all of them being up at\nthe same time was 96%.\n\nP(icebreaker active) = P(customer service active) * P(driver service active) *\nP(authentication service active) * P(active booking storage active) = 0.99 *\n0.99 * 0.99 * 0.99 ~= 0.96\n\nThis means our downtime has increased four times over (4%, as opposed to 1%).\n\nNot my job\nWhen a service starts to do too many things, it‚Äôs bound to fail sooner or later.\nIn this case, Icebreaker‚Äôs job was to create a channel between a customer and a\ndriver. However, it was doing all this extra stuff: like authentication,\nverification, and profile retrieval. ü§¶‚Äç‚ôÇ\n\nLet‚Äôs take a look at the changes we made to get rid of each dependency:\n\nAuthentication\nEvery API call arriving to Icebreaker came with an API token which needed\nauthentication. To solve this, we added a Kong [https://konghq.com/] API\ngateway. This authenticated all requests and added information about the\nauthenticated user within the API headers.\n\nNow, every request arriving to Icebreaker was authenticated.\n\n> Key takeaway: Tell, don‚Äôt ask. The requests coming from the API gateway told the\nservice that they were authenticated, rather than Icebreaker having to ask\nanother service.\nProfile retrieval\nIn order to create a channel, we needed a piece of information called the ‚Äòchat\ntoken‚Äô for each user. This was stored in the customer service for the customer,\nand the driver service for the driver.\n\nSince Icebreaker was the only service using this token, we moved these tokens to\nit, and removed them from the customer and driver services.\n\nNow,Icebreaker had all the information it needed in its own database, which was\na more reliable source of truth as compared to a whole other HTTP service.\n\n> Key takeaway: If your service is the only one using any piece of information, it\nshould reside within the service itself\nActive booking storage\nIcebreaker used to create a channel on-demand every time the user hit its\nchannel creation API. This on-demand creation required us to verify that an\nactive booking existed, for which the user needed to create a channel. After\nall, it didn‚Äôt make sense to create a channel when the parties involved did not\nhave an order with each other.\n\nTo fix this, we moved to an asynchronous architecture for channel creation.\nInstead of on-demand channel creation, we made use of GO-JEKs data pipeline\n[https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929],\nthat published events every time a booking was made. Icebreaker now consisted of\ntwo components: the worker and the server.\n\n 1. The worker consumed booking events every time they were made. It then\n    created a channel between the customer and driver in the booking, and stored\n    the channel information on a Redis cache.\n 2. The server served channel creation requests as before. Only, this time, the\n    channels were already created and cached, along with the order number.\n    \n\nSo, instead of on demand channel creation, the channels were created and stored\nbeforehand. Since we were consuming booking events from our own data pipeline,\nthere was no need to verify whether the booking was genuine or not.\n\n> Key takeaway: Again, tell, don‚Äôt ask. The events coming from our data pipeline\ntold Icebreaker that the bookings were genuine. This meant it could create the\nchannel, instead of hitting a service to verify the authenticity of the booking.\nResults\nNow Icebreaker did only what it was truly meant to do: create channels.\n\nSince we removed dependencies on most external systems, we no longer had to\nworry about one system failure causing Icebraker to malfunction. The load on the\nexternal services also reduced, since Icebreaker was no longer using their\nendpoints for channel creation.\n\nMoving to the asynchronous architecture also led to a drastic reduction in\nresponse time, from ~200ms to ~10ms, since we were pre-creating and caching\nchannels for every order.\n\nThe takeaways we got from this experience conform with the single responsibility\nprinciple. In the end, it‚Äôs always better to ask ourselves: ‚ÄúCan this service do\nless?‚Äù\n\n\n--------------------------------------------------------------------------------\n\nWant our stories in your inbox? Sign up for our newsletter!\n[https://mailchi.mp/go-jek/gojek-tech-newsletter]","html":"<p>By Soham Kamani</p><p>The single responsibility principle is one of the most tried-and-tested tenets of software design. Every module or class should do one thing, and do it well. We found this principle was applicable, and incredibly important, while designing our systems.</p><p>About a year ago, we released a new chat service (which we internally called <strong><strong>Icebreaker</strong></strong>). It allowed our users to communicate with drivers through the app itself, rather than use SMS (which cost both the driver and customer money).</p><p>However, all was not well. For numerous reasons, the service gave us a lot of issues and late night pagers. This post details the lessons we learnt, and some of the decisions we took to make this service more reliable.</p><h1 id=\"the-problem-s-\">The Problem(s)</h1><p>In a nutshell, Icebreaker depended on too many other services to function properly. Let‚Äôs look at some of the tasks Icebreaker performed in order to create a channel:</p><ol><li>Authorise the API call: This made a call to our authentication service.</li><li>Fetch the customer profile: This required an HTTP call to our customer service.</li><li>Fetch the drivers‚Äô profile: This required an HTTP call to our driver service.</li><li>Verify if the customer-driver pair are in an active order: This made a call to our active booking storage service.</li><li>Create the channel.</li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1304/1*oSRgws5JNm767tOTJfq7EA.png\" class=\"kg-image\"></figure><p><strong><strong>If any of these services failed, Icebreaker would fail as well.</strong></strong></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/1304/1*tpBpiBUBVK-N0chl5fkLGQ.png\" class=\"kg-image\"><figcaption>Simultaneous dependence on multiple services ensures that the dependent service is less stable than any of them</figcaption></figure><p>Even if we could ensure 99% uptime for all services in question, that still means the chances of all of them being up at the same time was 96%.</p><p><code>P(icebreaker active) = P(customer service active) * P(driver service active) * P(authentication service active) * P(active booking storage active) = 0.99 * 0.99 * 0.99 * 0.99 ~= 0.96</code></p><p>This means our downtime has increased four times over (4%, as opposed to 1%).</p><h1 id=\"not-my-job\">Not my job</h1><p>When a service starts to do too many things, it‚Äôs bound to fail sooner or later. In this case, Icebreaker‚Äôs job was to create a channel between a customer and a driver. However, it was doing all this extra stuff: like authentication, verification, and profile retrieval. ü§¶‚Äç‚ôÇ</p><p>Let‚Äôs take a look at the changes we made to get rid of each dependency:</p><h2 id=\"authentication\">Authentication</h2><p>Every API call arriving to Icebreaker came with an API token which needed authentication. To solve this, we added a <a href=\"https://konghq.com/\" rel=\"noopener\">Kong</a> API gateway. This authenticated all requests and added information about the authenticated user within the API headers.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*2d7v8u_WVx7YDowNapZGNQ.png\" class=\"kg-image\"></figure><p>Now, every request arriving to Icebreaker was authenticated.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Tell, don‚Äôt ask. The requests coming from the API gateway told the service that they were authenticated, rather than Icebreaker having to ask another service.</em></em></em></blockquote><h2 id=\"profile-retrieval\">Profile retrieval</h2><p>In order to create a channel, we needed a piece of information called the ‚Äòchat token‚Äô for each user. This was stored in the customer service for the customer, and the driver service for the driver.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*dKBOVH4ODILeTSqgQIazcw.png\" class=\"kg-image\"></figure><p>Since Icebreaker was the only service using this token, we moved these tokens to it, and removed them from the customer and driver services.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/1634/1*eXYrRFGNnEPqv0nvbwjbIA.png\" class=\"kg-image\"></figure><p>Now,Icebreaker had all the information it needed in its own database, which was a more reliable source of truth as compared to a whole other HTTP service.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: </em><em>If your service is the only one using any piece of information, it should reside within the service itself</em></em></em></blockquote><h1 id=\"active-booking-storage\">Active booking storage</h1><p>Icebreaker used to create a channel on-demand every time the user hit its channel creation API. This on-demand creation required us to verify that an active booking existed, for which the user needed to create a channel. After all, it didn‚Äôt make sense to create a channel when the parties involved did not have an order with each other.</p><p>To fix this, we moved to an asynchronous architecture for channel creation. Instead of on-demand channel creation, we made use of GO-JEKs <a href=\"https://blog.gojekengineering.com/data-infrastructure-at-go-jek-cd4dc8cbd929\" rel=\"noopener\">data pipeline</a>, that published events every time a booking was made. <strong><strong>Icebreaker now consisted of two components: the worker and the server.</strong></strong></p><ol><li>The worker consumed booking events every time they were made. It then created a channel between the customer and driver in the booking, and stored the channel information on a Redis cache.</li><li>The server served channel creation requests as before. Only, this time, the channels were already created and cached, along with the order number.<br></li></ol><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://miro.medium.com/max/3283/1*hNR_iSrTKkyvUhwMviHX_g.png\" class=\"kg-image\"></figure><p>So, instead of on demand channel creation, the channels were created and stored beforehand. Since we were consuming booking events from our own data pipeline, there was no need to verify whether the booking was genuine or not.</p><blockquote><em><em><strong><strong><em>Key takeaway</em></strong></strong><em>: Again, tell, don‚Äôt ask. The events coming from our data pipeline told Icebreaker that the bookings were genuine. This meant it could create the channel, instead of hitting a service to verify the authenticity of the booking.</em></em></em></blockquote><h1 id=\"results\">Results</h1><p>Now Icebreaker did only what it was truly meant to do: create channels.</p><p>Since we removed dependencies on most external systems, we no longer had to worry about one system failure causing Icebraker to malfunction. The load on the external services also reduced, since Icebreaker was no longer using their endpoints for channel creation.</p><p>Moving to the asynchronous architecture also led to a drastic reduction in response time, from ~200ms to ~10ms, since we were pre-creating and caching channels for every order.</p><p>The takeaways we got from this experience conform with the single responsibility principle. In the end, it‚Äôs always better to ask ourselves: <strong><strong><em><em>‚ÄúCan this service do less?‚Äù</em></em></strong></strong></p><hr><p>Want our stories in your inbox? <a href=\"https://mailchi.mp/go-jek/gojek-tech-newsletter\">Sign up for our newsletter!</a><br></p>","url":"https://gojek-ghost.zysk.in/applying-the-single-responsibility-principle-to-microservices/","canonical_url":null,"uuid":"8bb46a92-34cc-4bf4-a26e-65dc26a77873","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ec2af8a7aa22c4066f83abe","reading_time":4}},{"node":{"id":"Ghost__Post__5eb12c67f7c7da001effcdd8","title":"How Gojek Manages 1 Million Drivers With 12 Engineers (Part 2)","slug":"how-gojek-manages-1-million-drivers-with-12-engineers-part-2","featured":false,"feature_image":"https://res-1.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_dWQkpxR4YJawDR4G6JgYFw.jpg","excerpt":"An overburdened codebase, an updated tech stack, a big rewrite‚Äî how a lean team built the foundation for a Super App","custom_excerpt":"An overburdened codebase, an updated tech stack, a big rewrite‚Äî how a lean team built the foundation for a Super App","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"02 July, 2018","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:35:43.000+05:30","published_at":"2018-07-02T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:24.000+05:30","meta_title":null,"meta_description":"An overburdened codebase, an updated tech stack, a big rewrite‚Äî how a lean team built the foundation for a Super App","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Adithya Venkatesan\n\nThis is Part 2 of a feature story profiling the ‚ÄòAllocations‚Äô team at GOJEK. For\nPart 1 of the story, please click here. [http://bit.ly/gojekfeature]\n\nThe Infinite Onion\nEvery onion layer you peel is accompanied by more tears. It seems like an\nendless problem. And just when you think it‚Äôs done, there‚Äôs another layer. For\nthe next 3 months, it was onion after onion, layer after layer across teams at\nGOJEK. Downtimes were the new normal by the beginning of 2016.\n\nBack to square one.\n\nThe ‚ÄòBroadcast algorithm‚Äô the bid engine team was relying on was failing. But\nhow?\n\nEvery driver was seeing the same order multiple times. The algorithm\n‚Äòbroadcasted‚Äô the same order across its driver database. So if there were 100\norders in a specific area and 200 drivers, each driver would see the order, but\nnot necessarily be able to fulfil it. There was a three-fold problem to the\nalgorithm: Accountability, High-concurrency and promoting Unhealthy competition.\n\nAccountability: How can we reward the drivers who are doing more orders, zero\ncancellations etc‚Ä¶ when he/she simply couldn‚Äôt accept the order? How can we deny\nbonus, because by design, a driver was not getting an order due to a dozen\nreasons? There was no accountability for the driver, or the business\nfundamentals.\n\nHigh-concurrency: The sheer volume of orders meant drivers were missing out on\norders because it was blasted across phones. Some orders were not being\nfulfilled because of multiple blasts and server loads. More orders, less drivers\n= some orders not being fulfilled, which resulted in a poor customer experience.\n\nNote: The location-based orders are a peculiar problem for GOJEK.\n\n> Why? In a distance of 20metres, you‚Äôll spot more than 30+ GO-RIDE scooters, as\nopposed to maybe a maximum of 10 cars.\nUnhealthy competition: Once you‚Äôre blasting an order to all, you‚Äôre not\nfactoring in quality drivers for customers. We were also not getting the nearest\ndriver for an order. This breeds unhealthy competitiveness among drivers.\n\nThere is an adequate probability of doubt in the nature the algorithm was\ndesigned, and other constraints that are outside of the realm. Who gets the\norder became a function of the phone ‚Äî better GPS, hardware, Internet, software;\nall played a critical portion. And that was unfair. So zero accountability and\nhigh congestion of drivers meant things were going awry.\n\n10x growth, 100% failure\nWhen Niranjan [https://twitter.com/niranjan_p] pulled a couple of all nighters\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32] \nand and rewrote the code, the core portion was rewritten to make it a SPIKE.\nWhat is a spike? You break the rules and throw caution to the air with the\nobjective of shipping something out to keep the company afloat. The problem with\nSPIKE is that it wasn‚Äôt the end-solution. And that meant more downtimes and more\nfailures. But, the team was in murky waters by late 2015.\n\nAt this point, GOJEK was managing 300,000+ orders every day. Failures were\nroutine. Again. Wherever Nadiem went, he was questioned on why the app was\ncrashing or users could simply not find customers. At this point, the tech team\nwas made up of around 10 people, who were firefighting every day. When Shobhit\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n, one of our star programmers, went to a Domino‚Äôs store nearby to grab a quick\nbite, drivers started questioning him. Anyone who wore a GOJEK T-shirt became\nthe unofficial complaint box. Something needed to change, and fast.\n\nThis was again an underestimation of how much Indonesians relied on GOJEK.\nEveryone wanted to use GOJEK. It made life easier in the traffic-congested glut\nthat was Indonesia. Importantly, jobs and lives depended on it.\n\nDecisions‚Ä¶\n\nNadiem‚Äôs internal mail> ‚ÄúNo project has a budget and impact as big as this in\nGOJEK‚Äôs history‚Äù\nThe big rewrite ‚Äî The Perfect Allocation\nThe team needed to work on a different algorithm: 1‚Äì1 personalisation, pin\naccountability on drivers, identify what a perfect driver looks like, and ideate\non how to frame this persona. The big rewrite began in the middle of 2016. The\n‚Äòbid engine‚Äô team was now rechristened as the ‚ÄòAllocations‚Äô team. At this point,\nwe were still losing customers. There were leaky faucets that were not sealed.\nAfter all, the work of the Allocations team criss-crossed all of GOJEK‚Äôs\nproducts and services. It was time to revisit the mothership.\n\nHello Clojure.\n\nBack to square one. Back to taking risks. By now, the core team was all too\nfamiliar with handling high-pressure timelines and live codebases. Clojure was\nan obvious choice because of the specific complexities it intended to solve.\n\n> ‚ÄúOnly two in the team knew Clojure then, but it solved an important business\nproblem. We went with it and we all had to learn. Back to school. Again.‚Äù ‚Äî \nNiranjan Paranjape\n[https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------]\nThe first task was to replicate the bid engine logic. A 6-member team got to\nwork with Clojure. Why Clojure? Because the language designs better abstractions\nfor a specific problem the team needed to solve. While Golang was the modern\nsuperbike that had it all, Clojure was the cruiser ‚Äî really simple and capable\nof designing complex code. Clojure ushered this idea of getting organised and\nensuring good software development practices.\n\nOn the left, you see the Allocation code in Go. On the right, the exact same\ncode in Clojure.\n\nThis is not to state one language is better than the other. It‚Äôs tempting to\narrive at that conclusion when you see the image above. There were trade-offs\nmade when the switch was made. While Go is superior in performance, the\ncapability to make changes and add features was hard. Language was traded for\ndesign.\n\nThe innate abstraction to sniff out what works when, how and why is what makes\nlean engineering so special at GOJEK.\n\n‚ÄúThe more boring a rewrite is, the sweeter the success,‚Äù ‚Äî Shobhit\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n. After the 2-month long big rewrite, a stable product was live. Pause. Breathe.\nAfter 3 days of releasing, no one noticed there was a new codebase/algorithm in\nplace. That‚Äôs what success tastes like. Smooth as butter. No issues and\nachieving scale.\n\nShaping a mindset\nThat‚Äôs half the story told. A million mistakes later, we‚Äôre still making\nmistakes. But that‚Äôs the good part. We fail fast. We build fast. No hierarchy. \nThere‚Äôs an ingrained mentality of managing more with less. Anything that‚Äôs\nrepetitive gets automated. One could argue this was born out of the desperation\nof GOJEK products being the arteries criss-crossing through the heart of\nIndonesia. Regardless, the engineering psyche was passed down and filters\nthrough our recruitment. Here‚Äôs a reckoner on why GOJEK is hard to get into and\nequally hard to abandon.\n[https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790]\n\nThe simplification of the story would merely state the Allocation team allocates\ndrivers to customers. But their genesis is filled with fascinating engineering\ninsights. How do you factor supply and demand, how do you reward drivers, manage\ndriver health by reducing the workload, figure surge pricing, check for\nloopholes, and so on. Each function has dozens of people in similar startups at\nGOJEK‚Äôs scale. We are able to cut this down because of our emphasis on lean\nengineering. We don‚Äôt make compromises on our recruitment either. Leaders code.\nEveryone codes.\n\nEngineers are running their own startups in a startup. GOJEK is creating a one\nof a kind Super App with a platform for other startups to be part of\n\nToday, anyone within a 300-meter range can grab a ride. That‚Äôs only an average.\nIn popular malls near Jakarta, there are drivers every 10 metres or lesser. Then\ncame dashboards and data to crunch driver statistics, daily research to tweak\nthe algorithm. The last time I checked, GOJEK does more than 35+ orders each\nsecond across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc‚Ä¶\n\nThe ship of Theseus\nYou use a really old car to commute to office. It breaks, stutters and sometimes\nrefuses to move entirely. You can‚Äôt scrap it because it‚Äôs the only car you have.\nBut you want a supercar. So you go about buying the steering wheel and fixing it\nto the old car. Then comes the rims, the music system, leather seats and slowly,\nthe car begins to take shape. But it still has components of nostalgia; the car\nthat ferried you in dark times when nothing else would. Stan Marsh is that old\ncar.\n\nRemember Stan Marsh? The old legacy code on which GOJEK was being built?\n\n10% of Stan Marsh survives. Even till date. (There is a plan to eventually put\nit to bed [https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf])\nIt‚Äôs there for legacy reasons. I suspect the team is also sentimental about it.\nThink of it as the ‚ÄòShip of Theseus‚Äô conundrum. No matter what engineers who\njoin GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built.\nSmart engineering is also about working with a legacy codebase and improving it.\nFly with what you have and make it better. Everything else will follow. The team\nembraced that challenge.\n\nIt all boils down to the kind of people you let in the system. People are\nempowered to make decisions at GOJEK. As our India Head, Sidu Ponnappa\n[https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------] \noften repeats, ‚ÄúDon‚Äôt throw people at a problem.‚Äù It‚Äôs a typical outsourcing\nmindset Indian Engineers have been cajoled into. More people does not mean\nbetter work. More people does not mean better code. If that were true, GOJEK\nsimply wouldn‚Äôt exist today doing more than a 100 million+ orders a month with a\npaltry 200+ engineers.\n\n\n--------------------------------------------------------------------------------\n\nStory credits: Shobhit Srivastava\n[https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------]\n, Ranjeet Singh\n[https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------]\n, Mehakdeep Singh\n[https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------]\n, Bergas Bimo Branarto\n[https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------]\n.","html":"<p>By Adithya Venkatesan</p><p>This is Part 2 of a feature story profiling the ‚ÄòAllocations‚Äô team at GOJEK. For Part 1 of the story, please click <a href=\"http://bit.ly/gojekfeature\" rel=\"noopener\">here.</a></p><h1 id=\"the-infinite-onion\">The Infinite Onion</h1><p>Every onion layer you peel is accompanied by more tears. It seems like an endless problem. And just when you think it‚Äôs done, there‚Äôs another layer. For the next 3 months, it was onion after onion, layer after layer across teams at GOJEK. Downtimes were the new normal by the beginning of 2016.</p><p>Back to square one.</p><p>The ‚ÄòBroadcast algorithm‚Äô the bid engine team was relying on was failing. But how?</p><p>Every driver was seeing the same order multiple times. The algorithm ‚Äòbroadcasted‚Äô the same order across its driver database. So if there were 100 orders in a specific area and 200 drivers, each driver would see the order, but not necessarily be able to fulfil it. There was a three-fold problem to the algorithm: Accountability, High-concurrency and promoting Unhealthy competition.</p><p><strong><strong>Accountability:</strong></strong> How can we reward the drivers who are doing more orders, zero cancellations etc‚Ä¶ when he/she simply couldn‚Äôt accept the order? How can we deny bonus, because by design, a driver was not getting an order due to a dozen reasons? There was no accountability for the driver, or the business fundamentals.</p><p><strong><strong>High-concurrency: </strong></strong>The sheer volume of orders meant drivers were missing out on orders because it was blasted across phones. Some orders were not being fulfilled because of multiple blasts and server loads. More orders, less drivers = some orders not being fulfilled, which resulted in a poor customer experience.</p><p><strong><strong>Note: The location-based orders are a peculiar problem for GOJEK.</strong></strong></p><blockquote>Why? In a distance of 20metres, you‚Äôll spot more than 30+ GO-RIDE scooters, as opposed to maybe a maximum of 10 cars.</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/528/1*UwVrMbrdIEzUdeyhOaI65A.gif\" class=\"kg-image\"></figure><p><strong><strong>Unhealthy competition: </strong></strong>Once you‚Äôre blasting an order to all, you‚Äôre not factoring in quality drivers for customers. We were also not getting the nearest driver for an order. This breeds unhealthy competitiveness among drivers.</p><p>There is an adequate probability of doubt in the nature the algorithm was designed, and other constraints that are outside of the realm. Who gets the order became a function of the phone ‚Äî better GPS, hardware, Internet, software; all played a critical portion. And that was unfair. So zero accountability and high congestion of drivers meant things were going awry.</p><h1 id=\"10x-growth-100-failure\">10x growth, 100% failure</h1><p>When <a href=\"https://twitter.com/niranjan_p\" rel=\"noopener\">Niranjan</a> pulled a couple of <a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-1-978af9ccfd32\" rel=\"noopener\">all nighters</a> and and rewrote the code, the core portion was rewritten to make it a SPIKE. What is a spike? You break the rules and throw caution to the air with the objective of shipping something out to keep the company afloat. The problem with SPIKE is that it wasn‚Äôt the end-solution. And that meant more downtimes and more failures. But, the team was in murky waters by late 2015.</p><p>At this point, GOJEK was managing 300,000+ orders every day. Failures were routine. Again. Wherever Nadiem went, he was questioned on why the app was crashing or users could simply not find customers. At this point, the tech team was made up of around 10 people, who were firefighting every day. When <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit</a>, one of our star programmers, went to a Domino‚Äôs store nearby to grab a quick bite, drivers started questioning him. <strong><strong>Anyone who wore a GOJEK T-shirt became the unofficial complaint box</strong></strong>. Something needed to change, and fast.</p><p>This was again an underestimation of how much Indonesians relied on GOJEK. Everyone wanted to use GOJEK. It made life easier in the traffic-congested glut that was Indonesia. Importantly, jobs and lives depended on it.</p><p>Decisions‚Ä¶</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://miro.medium.com/max/681/1*GoeCvdf2ZFyxxDlyeVC0tQ.png\" class=\"kg-image\"><figcaption>Nadiem‚Äôs internal mail</figcaption></figure><blockquote>‚ÄúNo project has a budget and impact as big as this in GOJEK‚Äôs history‚Äù</blockquote><h1 id=\"the-big-rewrite-the-perfect-allocation\">The big rewrite ‚Äî The Perfect Allocation</h1><p>The team needed to work on a different algorithm: 1‚Äì1 personalisation, pin accountability on drivers, identify what a perfect driver looks like, and ideate on how to frame this persona. The big rewrite began in the middle of 2016. The ‚Äòbid engine‚Äô team was now rechristened as the ‚ÄòAllocations‚Äô team. At this point, we were still losing customers. There were leaky faucets that were not sealed. After all, the work of the Allocations team criss-crossed all of GOJEK‚Äôs products and services. It was time to revisit the mothership.</p><p><em><em><strong><strong><em>Hello Clojure.</em></strong></strong></em></em></p><p>Back to square one. Back to taking risks. By now, the core team was all too familiar with handling high-pressure timelines and live codebases. Clojure was an obvious choice because of the specific complexities it intended to solve.</p><blockquote>‚ÄúOnly two in the team knew Clojure then, but it solved an important business problem. We went with it and we all had to learn. Back to school. Again.‚Äù ‚Äî <a href=\"https://medium.com/u/689ebe477c46?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Niranjan Paranjape</a></blockquote><p>The first task was to replicate the bid engine logic. A 6-member team got to work with Clojure. Why Clojure? Because the language designs better abstractions for a specific problem the team needed to solve. While Golang was the modern superbike that had it all, Clojure was the cruiser ‚Äî really simple and capable of designing complex code. Clojure ushered this idea of getting organised and ensuring good software development practices.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1895/1*7W31wteVSSria2fq7mZ7bA.jpeg\" class=\"kg-image\"></figure><p>On the left, you see the Allocation code in Go. On the right, the exact same code in Clojure.</p><p>This is not to state one language is better than the other. It‚Äôs tempting to arrive at that conclusion when you see the image above. There were trade-offs made when the switch was made. While Go is superior in performance, the capability to make changes and add features was hard. Language was traded for design.</p><p><em><em>The innate abstraction to sniff out what works when, how and why is what makes lean engineering so special at GOJEK.</em></em></p><p>‚ÄúThe more boring a rewrite is, the sweeter the success,‚Äù ‚Äî <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit</a>. After the 2-month long big rewrite, a stable product was live. Pause. Breathe. After 3 days of releasing, no one noticed there was a new codebase/algorithm in place. That‚Äôs what success tastes like. Smooth as butter. No issues and achieving scale.</p><h1 id=\"shaping-a-mindset\">Shaping a mindset</h1><p>That‚Äôs half the story told. A million mistakes later, we‚Äôre still making mistakes. But that‚Äôs the good part. We fail fast. We build fast. No hierarchy. <strong><strong>There‚Äôs an ingrained mentality of managing more with less. Anything that‚Äôs repetitive gets automated</strong></strong>. One could argue this was born out of the desperation of GOJEK products being the arteries criss-crossing through the heart of Indonesia. Regardless, the engineering psyche was passed down and filters through our recruitment. Here‚Äôs a reckoner on <a href=\"https://medium.com/gojekengineering/why-we-ask-for-code-b276b45ea790\" rel=\"noopener\">why GOJEK is hard to get into and equally hard to abandon.</a></p><p>The simplification of the story would merely state the Allocation team allocates drivers to customers. But their genesis is filled with fascinating engineering insights. How do you factor supply and demand, how do you reward drivers, manage driver health by reducing the workload, figure surge pricing, check for loopholes, and so on. Each function has dozens of people in similar startups at GOJEK‚Äôs scale. We are able to cut this down because of our emphasis on lean engineering. We don‚Äôt make compromises on our recruitment either. Leaders code. Everyone codes.</p><p>Engineers are running their own startups in a startup. GOJEK is creating a one of a kind Super App with a platform for other startups to be part of</p><p>Today, anyone within a 300-meter range can grab a ride. That‚Äôs only an average. In popular malls near Jakarta, there are drivers every 10 metres or lesser. Then came dashboards and data to crunch driver statistics, daily research to tweak the algorithm. The last time I checked, GOJEK does more than 35+ orders <strong><strong>each second</strong></strong> across our services like GO-FOOD, GO-SEND, GO-MASSAGE etc‚Ä¶</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1200/1*uIDXYaHyIQzvhtIHRThNWA.jpeg\" class=\"kg-image\"></figure><h1 id=\"the-ship-of-theseus\">The ship of Theseus</h1><p>You use a really old car to commute to office. It breaks, stutters and sometimes refuses to move entirely. You can‚Äôt scrap it because it‚Äôs the only car you have. But you want a supercar. So you go about buying the steering wheel and fixing it to the old car. Then comes the rims, the music system, leather seats and slowly, the car begins to take shape. But it still has components of nostalgia; the car that ferried you in dark times when nothing else would. Stan Marsh is that old car.</p><p><em><em>Remember Stan Marsh? The old legacy code on which GOJEK was being built?</em></em></p><p>10% of Stan Marsh survives. Even till date. (<a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\">There is a plan to eventually put it to bed</a>) It‚Äôs there for legacy reasons. I suspect the team is also sentimental about it. Think of it as the ‚ÄòShip of Theseus‚Äô conundrum. No matter what engineers who join GOJEK think of Stan Marsh, it was the foundation on which GOJEK was built. Smart engineering is also about working with a legacy codebase and improving it. Fly with what you have and make it better. Everything else will follow. The team embraced that challenge.</p><p>It all boils down to the kind of people you let in the system. People are empowered to make decisions at GOJEK. As our India Head, <a href=\"https://medium.com/u/e2e244e6c6b3?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Sidu Ponnappa</a> often repeats, ‚ÄúDon‚Äôt throw people at a problem.‚Äù It‚Äôs a typical outsourcing mindset Indian Engineers have been cajoled into. More people does not mean better work. More people does not mean better code. If that were true, GOJEK simply wouldn‚Äôt exist today doing more than a 100 million+ orders a month with a paltry 200+ engineers.</p><hr><p>Story credits: <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Shobhit Srivastava</a>, <a href=\"https://medium.com/u/710d3b419a5a?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Ranjeet Singh</a>, <a href=\"https://medium.com/u/36ce12a82c52?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Mehakdeep Singh</a>, <a href=\"https://medium.com/u/5cffcceadf08?source=post_page-----35f6a27a0faf----------------------\" rel=\"noopener\">Bergas Bimo Branarto</a>.</p>","url":"https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-2/","canonical_url":null,"uuid":"b71c3dd0-28bd-4805-8af7-6071c17748f3","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12c67f7c7da001effcdd8","reading_time":7}},{"node":{"id":"Ghost__Post__5eb12b71f7c7da001effcdbe","title":"How Gojek Manages 1 million Drivers With 12 Engineers (Part 1)","slug":"how-gojek-manages-1-million-drivers-with-12-engineers-part-1","featured":true,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/1_0G01nMPD--K_MrKhhkurtw.jpg","excerpt":"The story of GOJEK‚Äôs first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.","custom_excerpt":"The story of GOJEK‚Äôs first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"24 May, 2018","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:31:37.000+05:30","published_at":"2018-05-24T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:36.000+05:30","meta_title":null,"meta_description":"The story of GOJEK‚Äôs first ever team, and consequently, the psyche of how 200 engineers run a Super App of 18+ products.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Stories","slug":"stories","description":"Deep dives into high-impact initiatives and products that helped Gojek create significant impact.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Adithya Venkatesan\n\nIn Norse mythology, Yggdrasil is a gigantic mythical tree that connects the nine\nworlds of Norse cosmology. It‚Äôs a holy tree whose branches touch the heavens.\nThe gods hold court beneath Yggdrasil ‚Äî debating the fates of other gods, men\nand monsters. It‚Äôs the tree of life and the centre of everything in Norse\nmythology. In GOJEK, think of the `Allocations` team as this eternal green ash\ntree. Our multiple products rely on this team to assign drivers to complete\norders.\n\nThe team cuts across products and services responsible for 1,000,000+ registered\ndrivers on our platform.\n\nAnd 12 engineers do this.\n\nA similar ride-sharing equivalent has 300-odd people solving the same problem\nand still does fewer bookings. But how do they do it? This is their story.\n\nOn planet Earth, problems galore\nWhen GOJEK started in 2010, it all began with a call centre. Customers would\ncall a number, the call centre would ‚Äòallocate‚Äô a driver after looking at an\nExcel sheet of drivers in the roster. Our CEO Nadiem Makarim was the first\nperson to test the app built for drivers and customers. As soon as a dummy order\nwas created and Nadiem got the first notification, GOJEK was open for business.\n\nAt its peak in 2014, GOJEK had 200 drivers. The 3-person engineering team had a\nbasic stop-gap model of matchmaking between a driver and a customer. This\ncodebase had to be reworked to match scale. The new matchmaking codebase was\nbuilt in two days and could handle about 700 drivers. It was all manual and\nsomething had to be done to automate\n[https://blog.gojekengineering.com/how-we-do-what-we-do-at-go-jek-tech-d1d5d952e13] \nthe whole process.\n\nIn the beginning of 2015, a version of the app was launched to keep pace with\nincreasing demand. GO-RIDE, GO-FOOD and GO-SEND went live. Customers would ‚Äòbid‚Äô\nfor a driver, drivers would get a notification, accept a drive and voila, we‚Äôre\ngood to go. This was the birth of the ‚Äòbid engine‚Äô ‚Äî a classic matchmaker\nbetween supply and demand: Driver and Customer. It would form the genesis on\nwhich GOJEK was going to be built. The problem: siloed boxes.\n\nThere were a total of three products with the same underlying infrastructure,\nbut no interconnectedness. THAT was a problem that shouldn‚Äôt exist when success\ndepends on deeper linkage between all teams. This problem is further pronounced\nwhen you realise all three teams were working on the same infrastructure.\n\nImportantly, GOJEK simply wasn‚Äôt prepared to handle the kind of adoption and\ngrowth the company began to witness as soon as the app was launched.\n\nThe algorithm started to crumble. The engineering was pretty straightforward\nwith 10‚Äì15 lines of code, and solved problems for a small set of data. As the\ndrivers increased, downtimes became a routine affair. There were way too many\nbottlenecks. GOJEK was failing, and fast.\n\nSoon, Sequoia had mutual investment portfolios and unlocked some doors. Sidu\nPonnappa, our current India Head, then the CEO of CodeMonk, travelled to\nIndonesia to pick between three of Sequoia‚Äôs companies. The team‚Äôs ultimate\ndecision to work with GOJEK is not entirely surprising because it was bigger,\nlarger than anything they had witnessed in India. The market was ripe for the\ntaking. Read his telling tale from his first visit to Indonesia here.\n[https://blog.gojekengineering.com/my-go-jek-story-af5f1925bfe]\n\nIn no time, Nadiem acquired CodeMonk. But before that, our current CTO, Niranjan\nParanjappe was being poached. ? The team stood together. It was all, or none.\n\nAnd Nadiem wanted all. The deal was closed in a small tea shop between Sidu,\nNiranjan, Nadiem, Ajey and Kevin. Overnight, GOJEK had one of India‚Äôs best\nconsulting firms in its arsenal. The task for the engineering team: Work on the\nbidding engine. No more downtimes.\n\nIt‚Äôs the 0‚Äôs and 1‚Äôs\nThe old codebase was written in Java. It‚Äôs a programming language that belonged\nto the Internet age. But not for a startup in 2015 that was exploding in demand\nand imploding with a lack of resources and engineering wherewithal. Why Java?\nBecause, the classic Golden Hammer Anti-Pattern:\n\n‚ÄúIf all you have is a hammer, everything looks like a nail.‚Äù And hence, ‚ÄòI know\nJava, so Java is the best.‚Äô\n\nNiranjan Paranjape\n[https://medium.com/u/689ebe477c46?source=post_page-----978af9ccfd32----------------------]\n, our now CTO (Ajey Gore\n[https://medium.com/u/bb9ef62c7bae?source=post_page-----978af9ccfd32----------------------] \nis our Group CTO), plugged in the hard drive and checked the code. As soon as he\nopened the README file, the first line was mvn install -DskipTest\n\nThe code had *never* been tested.\n\nIn other words, the code was live without ever passing a single quality check.\nThe old codebase was called Stan Marsh\n[https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf]. For the\nuninitiated, Stan Marsh is a character from South Park, and if you watch the\nshow, you‚Äôd get the obvious reference to the famous line:\n\n> ‚ÄúDude, this is pretty f****d up right here.‚Äù\nAnd thus it came to be. Stan Marsh was the legacy code on which GOJEK was going\nto be built. Because there was no test harness, it was difficult to understand\nwhich portion of the app was working, and which wasn‚Äôt. Considering the app was\nlive, no one wanted to touch a ticking time bomb. It was‚Ä¶ sorry, is‚Ä¶ very much\npart of engineering folklore. (More on that later)\n\nAs urban legends go, Niranjan re-wrote the entire codebase in Golang, a language\nhe didn‚Äôt know. Three nights. A dozen Redbulls. Two dozen coffees. Golang could\nhandle concurrency, manage load; the kind GOJEK was witnessing. The mothership\nwas ready. Or so the team thought.\n\nIt wasn‚Äôt an easy decision to go with Golang. Not many knew the programming\nlanguage. But some risks are worth taking ‚Äî and that defines good engineering\nfrom great. Luckily, this initial decision-making set the tone for the team;\nlearn, experiment, adapt, take responsibility or be disrupted. In a month,\nGOJEK‚Äôs driver count tripled. But‚Ä¶ there were more problems to come. Bigger fish\nto fry.\n\nFor Part 2 of the story, please click here\n[https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-2-35f6a27a0faf]\n\n\n--------------------------------------------------------------------------------\n\nStory credits: Shobhit Srivastava\n[https://medium.com/u/e5f92a17704d?source=post_page-----978af9ccfd32----------------------]\n, Ranjeet Singh\n[https://medium.com/u/710d3b419a5a?source=post_page-----978af9ccfd32----------------------]\n, Mehakdeep Singh\n[https://medium.com/u/36ce12a82c52?source=post_page-----978af9ccfd32----------------------]\n, Bergas Bimo Branarto\n[https://medium.com/u/5cffcceadf08?source=post_page-----978af9ccfd32----------------------]","html":"<p>By Adithya Venkatesan</p><p>In Norse mythology, <em><em>Yggdrasil</em></em> is a gigantic mythical tree that connects the nine worlds of Norse cosmology. It‚Äôs a holy tree whose branches touch the heavens. The gods hold court beneath <em><em>Yggdrasil ‚Äî </em></em>debating the fates of other gods, men and monsters. It‚Äôs the tree of life and the centre of everything in Norse mythology. In GOJEK, think of the <strong><strong><em><em>`Allocations` </em></em></strong></strong>team as this eternal green ash tree. Our multiple products rely on this team to assign drivers to complete orders.</p><p>The team cuts across products and services responsible for 1,000,000+ registered drivers on our platform.</p><p><strong>And 12 engineers do this.</strong></p><p>A similar ride-sharing equivalent has 300-odd people solving the same problem and still does fewer bookings. But how do they do it? This is their story.</p><h2 id=\"on-planet-earth-problems-galore\">On planet Earth, problems galore</h2><p>When GOJEK started in 2010, it all began with a call centre. Customers would call a number, the call centre would ‚Äòallocate‚Äô a driver after <em><em>looking at an Excel sheet of drivers</em></em> in the roster. Our CEO Nadiem Makarim was the first person to test the app built for drivers and customers. As soon as a dummy order was created and Nadiem got the first notification, GOJEK was open for business.</p><p>At its peak in 2014, GOJEK had 200 drivers. The 3-person engineering team had a basic stop-gap model of matchmaking between a driver and a customer. This codebase had to be reworked to match scale. The new matchmaking codebase was built in two days and could handle about 700 drivers. It was all manual and something had to be done to <a href=\"https://blog.gojekengineering.com/how-we-do-what-we-do-at-go-jek-tech-d1d5d952e13\" rel=\"noopener\">automate</a> the whole process.</p><p>In the beginning of 2015, a version of the app was launched to keep pace with increasing demand. GO-RIDE, GO-FOOD and GO-SEND went live. Customers would ‚Äòbid‚Äô for a driver, drivers would get a notification, accept a drive and voila, we‚Äôre good to go. This was the birth of the ‚Äò<strong><strong>bid engine‚Äô ‚Äî a classic matchmaker between supply and demand:</strong></strong> Driver and Customer. <em><em>It would form the genesis on which GOJEK was going to be built</em></em>. The problem: siloed boxes.</p><p>There were a total of three products with the same underlying infrastructure, but no interconnectedness. THAT was a problem that shouldn‚Äôt exist when success depends on deeper linkage between all teams. This problem is further pronounced when you realise all three teams were working on the same infrastructure.</p><p><em><em>Importantly, GOJEK simply wasn‚Äôt prepared to handle the kind of adoption and growth the company began to witness as soon as the app was launched.</em></em></p><p>The algorithm started to crumble. The engineering was pretty straightforward with 10‚Äì15 lines of code, and solved problems for a small set of data. As the drivers increased, downtimes became a routine affair. There were way too many bottlenecks. <strong><strong>GOJEK was failing, and fast.</strong></strong></p><p>Soon, Sequoia had mutual investment portfolios and unlocked some doors. Sidu Ponnappa, our current India Head, then the CEO of CodeMonk, travelled to Indonesia to pick between three of Sequoia‚Äôs companies. The team‚Äôs ultimate decision to work with GOJEK is not entirely surprising because it was bigger, larger than anything they had witnessed in India. The market was ripe for the taking. Read his telling tale from his first visit to Indonesia <a href=\"https://blog.gojekengineering.com/my-go-jek-story-af5f1925bfe\" rel=\"noopener\">here.</a></p><p><em><em>In no time, Nadiem acquired CodeMonk. But before that, our current CTO, Niranjan Paranjappe was being poached. <em>? </em>The team stood together. It was all, or none.</em></em></p><p>And Nadiem wanted all. <strong><strong>The deal was closed in a small tea shop</strong></strong> between Sidu, Niranjan, Nadiem, Ajey and Kevin. Overnight, GOJEK had one of India‚Äôs best consulting firms in its arsenal. The task for the engineering team: Work on the bidding engine. No more downtimes.</p><h2 id=\"it-s-the-0-s-and-1-s\">It‚Äôs the 0‚Äôs and 1‚Äôs</h2><p>The old codebase was written in Java. It‚Äôs a programming language that belonged to the Internet age. But not for a startup in 2015 that was exploding in demand and imploding with a lack of resources and engineering wherewithal. Why Java? Because, the classic <strong><strong>Golden Hammer Anti-Pattern:</strong></strong></p><p><em><em>‚ÄúIf all you have is a hammer, everything looks like a nail.‚Äù And hence, ‚ÄòI know Java, so Java is the best.‚Äô</em></em></p><p><a href=\"https://medium.com/u/689ebe477c46?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Niranjan Paranjape</a>, our now CTO (<a href=\"https://medium.com/u/bb9ef62c7bae?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Ajey Gore</a> is our Group CTO), plugged in the hard drive and checked the code. As soon as he opened the README file, the first line was mvn install -DskipTest</p><p><strong><strong>The code had *<em><em>never</em></em>* been tested.</strong></strong></p><p>In other words, the code was live without ever passing a single quality check. The old codebase was called <a href=\"https://blog.gojekengineering.com/thank-you-stan-marsh-29db553544bf\" rel=\"noopener\"><strong><strong>Stan Marsh</strong></strong></a><strong><strong>.</strong></strong> For the uninitiated, Stan Marsh is a character from South Park, and if you watch the show, you‚Äôd get the obvious reference to the famous line:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://miro.medium.com/max/1600/1*Mk4tc6cfIHlC_f1CblNGNQ.jpeg\" class=\"kg-image\"></figure><blockquote><em><em>‚ÄúDude, this is pretty f****d up right here.‚Äù</em></em></blockquote><p>And thus it came to be. <strong><strong>Stan Marsh was the legacy code on which GOJEK was going to be built</strong></strong>. Because there was no test harness, it was difficult to understand which portion of the app was working, and which wasn‚Äôt. Considering the app was live, no one wanted to touch a ticking time bomb. It was‚Ä¶ sorry, is‚Ä¶ very much part of engineering folklore. (More on that later)</p><p>As urban legends go, Niranjan re-wrote the entire codebase in Golang, a language he didn‚Äôt know. Three nights. A dozen Redbulls. Two dozen coffees. Golang could handle concurrency, manage load; the kind GOJEK was witnessing. The mothership was ready. Or so the team thought.</p><p>It wasn‚Äôt an easy decision to go with Golang. Not many knew the programming language. But some risks are worth taking ‚Äî and that defines good engineering from great. Luckily, this initial decision-making set the tone for the team; learn, experiment, adapt, take responsibility or be disrupted. In a month, GOJEK‚Äôs driver count tripled. But‚Ä¶ there were more problems to come. Bigger fish to fry.</p><p>For Part 2 of the story, please click <a href=\"https://blog.gojekengineering.com/how-go-jek-manages-1-million-drivers-with-12-engineers-part-2-35f6a27a0faf\" rel=\"noopener\">here</a></p><hr><p>Story credits: <a href=\"https://medium.com/u/e5f92a17704d?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Shobhit Srivastava</a>, <a href=\"https://medium.com/u/710d3b419a5a?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Ranjeet Singh</a>, <a href=\"https://medium.com/u/36ce12a82c52?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Mehakdeep Singh</a>, <a href=\"https://medium.com/u/5cffcceadf08?source=post_page-----978af9ccfd32----------------------\" rel=\"noopener\">Bergas Bimo Branarto</a></p>","url":"https://gojek-ghost.zysk.in/how-gojek-manages-1-million-drivers-with-12-engineers-part-1/","canonical_url":null,"uuid":"ba3d779e-27f2-41a6-ac1d-cd753222d7dd","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb12b71f7c7da001effcdbe","reading_time":4}},{"node":{"id":"Ghost__Post__5eb128c6f7c7da001effcd94","title":"Gojek Engineering ‚Äî Guiding Principles 101","slug":"gojek-engineering-guiding-principles-101","featured":false,"feature_image":"https://res-3.cloudinary.com/hcq4cvthp/image/upload/q_auto/v1/ghost-blog-images/Culture1.gif","excerpt":"Pointers that help us build and run a unicorn startup,","custom_excerpt":"Pointers that help us build and run a unicorn startup,","visibility":"public","created_at_pretty":"05 May, 2020","published_at_pretty":"04 January, 2017","updated_at_pretty":"12 May, 2020","created_at":"2020-05-05T14:20:14.000+05:30","published_at":"2017-01-04T09:30:00.000+05:30","updated_at":"2020-05-12T11:57:57.000+05:30","meta_title":null,"meta_description":"Pointers that help us build and run a unicorn startup.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"}],"primary_author":{"name":"Gojek","slug":"gojek","bio":"Gojek is a Super App. It‚Äôs one app for ordering food, commuting, digital payments, shopping, hyper-local delivery, and two dozen services.","profile_image":"https://gojek-ghost.zysk.in/content/images/2020/05/logo-01-1.png","twitter":"@gojektech","facebook":"gojektech","website":"https://www.gojek.io"},"primary_tag":{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek‚Äîexplained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Culture","slug":"culture","description":"Writings on work culture at Gojek‚Äîexplained through the lens of engineering and product decisions, and the experiences of GoTroops.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"By Ajey Gore\n\nWorking at Gojek means working with the best and brightest on the most\ncutting-edge technologies. While it is extremely rewarding, it is also\nchallenging. This is because we often work on tough problems with no clear\nsolution ‚Äî which involves taking risks and learning things on the fly.\n\nAll this, while competing with the best in the industry.\n\nThat‚Äôs why our guiding principles serve as a great reference point to deal with\nsituations that arise every day. Here are some that we abide by:\n\nEveryone writes code ‚Äî At Gojek, we believe that Software\nPrincipals/Architects/Engineers can only do the right thing when they work on\ncode themselves. It‚Äôs the only way to decide what‚Äôs working and what‚Äôs not. We\ndon‚Äôt believe that software requires a 50,000 foot overview with people\nexclusively working on the blueprint. At Gojek, writing software is not a\nlow-level task; it‚Äôs at the very core of what we do.\n\nLeaders who code are better judges of technical skill.\n\nEveryone needs to ‚Äòwalk the talk‚Äô ‚Äî We respect people who get down in the\ntrenches and take a hands-on approach to problem solving. Based on our\nexperience, standing at a distance and issuing commandments has many a time been\ninefficient and error prone, and hence we avoid this.\n\nLeaders are grown and not made ‚Äî We believe in acquired respect and leadership,\nnot leadership by position. At Gojek, you earn your leadership mettle. We\nbelieve in helping our people grow into leadership roles by giving them chances,\nrisk appetite and freedom. We trust our people and support them to do the right\nthing at any given moment. In my own career, I‚Äôve been privileged enough to have\nfound some amazing mentors, and I am glad to be able to continue the legacy at\nGojek.\n\nEvery decision is correct at the time it is made ‚Äî Swift decision-making is\nextremely important in a fast paced environment like ours. Once a decision is\nmade, we don‚Äôt constantly agonise over it or second guess. We trust that\nwhenever someone makes a decision, it is the right one, given the information\navailable to them at that time. Only the passage of time can tell us whether a\nparticular decision was right or wrong. It‚Äôs OK to change decisions, and we\nencourage people to not be afraid to make a decision.\n\nEvery person has some strengths, even if we don‚Äôt always see them ‚Äî A great team\nis built with a group of people who have complementary skill sets. A combination\nof different strengths make teams that can tackle all kinds of situations. At\nGojek, we believe each one of us is unique and has unique strengths. It‚Äôs just a\nmatter of finding the right role to match the skills. Teams become super strong\nwhen they appreciate each other‚Äôs strengths.\n\nWorking in tech means learning all the time ‚Äî Learning is important in every\nfield. In the technology industry, it is a matter of life and death. Technology\nis changing all the time, what worked a decade ago may be completely obsolete\nnow. For example, practices that worked in Waterfall don‚Äôt work in Agile, and\nuser experiences on mobile apps were unimaginable a few years back. So, we\nconstantly look for and admire people who are curious and willing to learn.\n\nThe best part? Such people will always hire people they can learn from!\n\nPair Programming and Test-Driven Development (TDD) work ‚Äî If they didn‚Äôt, our\nteams wouldn‚Äôt exist. Wherever we have followed this, we found our team‚Äôs job on\nsupporting software is more around features than bugs! We have experienced over\ndecades that this helps us build features faster, and mature teams organically.\nThe bottom line is : to write beautiful code, we believe there is no better way\nthan rigorous pair programming and practising TDD.","html":"<p>By Ajey Gore</p><p>Working at Gojek means working with the best and brightest on the most cutting-edge technologies. While it is extremely rewarding, it is also challenging. This is because we often work on tough problems with no clear solution ‚Äî which involves taking risks and learning things on the fly.</p><p><em><em>All this, while competing with the best in the industry.</em></em></p><p>That‚Äôs why our guiding principles serve as a great reference point to deal with situations that arise every day. Here are some that we abide by:</p><p><strong><strong>Everyone writes code ‚Äî </strong></strong>At Gojek, we believe that Software Principals/Architects/Engineers can only do the right thing when they work on code themselves. It‚Äôs the only way to decide what‚Äôs working and what‚Äôs not. We don‚Äôt believe that software requires a 50,000 foot overview with people exclusively working on the blueprint. At Gojek, writing software is <strong><strong>not</strong></strong> a low-level task; it‚Äôs at the very core of what we do.</p><p>Leaders who code are better judges of technical skill.</p><p><strong><strong>Everyone needs to ‚Äòwalk the talk‚Äô ‚Äî </strong></strong>We respect people who get down in the trenches and take a hands-on approach to problem solving. Based on our experience, standing at a distance and issuing commandments has many a time been inefficient and error prone, and hence we avoid this.</p><p><strong><strong>Leaders are grown and not made</strong></strong> ‚Äî We believe in acquired respect and leadership, not leadership by position. At Gojek, you earn your leadership mettle. We believe in helping our people grow into leadership roles by giving them chances, risk appetite and freedom. We trust our people and support them to do the right thing at any given moment. In my own career, I‚Äôve been privileged enough to have found some amazing mentors, and I am glad to be able to continue the legacy at Gojek.</p><p><strong><strong>Every decision is correct at the time it is made</strong></strong> ‚Äî Swift decision-making is extremely important in a fast paced environment like ours. Once a decision is made, we don‚Äôt constantly agonise over it or second guess. We trust that whenever someone makes a decision, it is the right one, given the information available to them at that time. Only the passage of time can tell us whether a particular decision was right or wrong. It‚Äôs OK to change decisions, and we encourage people to not be afraid to make a decision.</p><p><strong><strong>Every person has some strengths, even if we don‚Äôt always see them</strong></strong> ‚Äî A great team is built with a group of people who have complementary skill sets. A combination of different strengths make teams that can tackle all kinds of situations. At Gojek, we believe each one of us is unique and has unique strengths. It‚Äôs just a matter of finding the right role to match the skills. Teams become super strong when they appreciate each other‚Äôs strengths.</p><p><strong><strong>Working in tech means learning all the time</strong></strong> ‚Äî Learning is important in every field. In the technology industry, it is a matter of life and death. Technology is changing all the time, what worked a decade ago may be completely obsolete now. For example, practices that worked in Waterfall don‚Äôt work in Agile, and user experiences on mobile apps were unimaginable a few years back. So, we constantly look for and admire people who are curious and willing to learn.</p><p>The best part? Such people will always hire people they can learn from!</p><p><strong><strong>Pair Programming and Test-Driven Development (TDD) work </strong></strong>‚Äî If they didn‚Äôt, our teams wouldn‚Äôt exist. Wherever we have followed this, we found our team‚Äôs job on supporting software is more around features than bugs! We have experienced over decades that this helps us build features faster, and mature teams organically. The bottom line is : to write beautiful code, we believe there is no better way than rigorous pair programming and practising TDD.</p>","url":"https://gojek-ghost.zysk.in/gojek-engineering-guiding-principles-101/","canonical_url":null,"uuid":"9afc126f-c3cc-4649-8eb1-6b1f10431f93","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb128c6f7c7da001effcd94","reading_time":3}}]}},"pageContext":{"slug":"gojek","limit":12,"skip":36,"numberOfPages":4,"humanPageNumber":4,"prevPageNumber":3,"nextPageNumber":null,"previousPagePath":"/author/gojek/page/3/","nextPagePath":null}}}